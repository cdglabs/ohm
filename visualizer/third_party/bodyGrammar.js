var funcBodyGrammar = ohm.makeRecipe(function() {
var buildSuperGrammar = (function() {
var buildSuperGrammar = (function() {
  var decl = this.newGrammar("ES5")
    .withSource("ES5 {\n\n  Program = Directive* SourceElement*\n\n  // Â§A.1 Lexical Grammar -- http://ecma-international.org/ecma-262/5.1/#sec-A.1\n\n  /*\n    Note: the following lexical conventions (see http://ecma-international.org/ecma-262/5.1/#sec-7)\n    are not implemented in this parser.\n\n    // Goal production in contexts where a leading \"/\" or \"/=\" is permitted:\n    InputElementDiv = whitespace | lineTerminator | comment | token | DivPunctuator\n\n    // Goal production in contexts where a leading \"/\" or \"/=' is not permitted:\n    InputElementRegExp = whitespace | lineTerminator | comment | token | regularExpressionLiteral\n  */\n\n  sourceCharacter = any\n\n  // Override Ohm's built-in definition of space.\n  space := whitespace | lineTerminator | comment\n\n  whitespace = \"\\t\"\n             | \"\\x0B\"    -- verticalTab\n             | \"\\x0C\"    -- formFeed\n             | \" \"\n             | \"\\u00A0\"  -- noBreakSpace\n             | \"\\uFEFF\"  -- byteOrderMark\n             | unicodeSpaceSeparator\n\n  lineTerminator = \"\\n\" | \"\\r\" | \"\\u2028\" | \"\\u2029\"\n  lineTerminatorSequence = \"\\n\" | \"\\r\" ~\"\\n\" | \"\\u2028\" | \"\\u2029\" | \"\\r\\n\"\n\n  comment = multiLineComment | singleLineComment\n\n  multiLineComment = \"/*\" (~\"*/\" sourceCharacter)* \"*/\"\n  singleLineComment = \"//\" (~lineTerminator sourceCharacter)*\n\n  identifier (an indentifier) = ~reservedWord identifierName\n  identifierName = identifierStart identifierPart*\n\n  identifierStart = letter | \"$\" | \"_\"\n                  | \"\\\\\" unicodeEscapeSequence -- escaped\n  identifierPart = identifierStart | unicodeCombiningMark\n                 | unicodeDigit | unicodeConnectorPunctuation\n                 | \"\\u200C\" | \"\\u200D\"\n letter += unicodeCategoryNl\n  unicodeCategoryNl\n    = \"\\u2160\"..\"\\u2182\" | \"\\u3007\" | \"\\u3021\"..\"\\u3029\"\n  unicodeDigit (a digit)\n    = \"\\u0030\"..\"\\u0039\" | \"\\u0660\"..\"\\u0669\" | \"\\u06F0\"..\"\\u06F9\" | \"\\u0966\"..\"\\u096F\" | \"\\u09E6\"..\"\\u09EF\" | \"\\u0A66\"..\"\\u0A6F\" | \"\\u0AE6\"..\"\\u0AEF\" | \"\\u0B66\"..\"\\u0B6F\" | \"\\u0BE7\"..\"\\u0BEF\" | \"\\u0C66\"..\"\\u0C6F\" | \"\\u0CE6\"..\"\\u0CEF\" | \"\\u0D66\"..\"\\u0D6F\" | \"\\u0E50\"..\"\\u0E59\" | \"\\u0ED0\"..\"\\u0ED9\" | \"\\u0F20\"..\"\\u0F29\" | \"\\uFF10\"..\"\\uFF19\"\n\n  unicodeCombiningMark (a Unicode combining mark)\n    = \"\\u0300\"..\"\\u0345\" | \"\\u0360\"..\"\\u0361\" | \"\\u0483\"..\"\\u0486\" | \"\\u0591\"..\"\\u05A1\" | \"\\u05A3\"..\"\\u05B9\" | \"\\u05BB\"..\"\\u05BD\" | \"\\u05BF\"..\"\\u05BF\" | \"\\u05C1\"..\"\\u05C2\" | \"\\u05C4\"..\"\\u05C4\" | \"\\u064B\"..\"\\u0652\" | \"\\u0670\"..\"\\u0670\" | \"\\u06D6\"..\"\\u06DC\" | \"\\u06DF\"..\"\\u06E4\" | \"\\u06E7\"..\"\\u06E8\" | \"\\u06EA\"..\"\\u06ED\" | \"\\u0901\"..\"\\u0902\" | \"\\u093C\"..\"\\u093C\" | \"\\u0941\"..\"\\u0948\" | \"\\u094D\"..\"\\u094D\" | \"\\u0951\"..\"\\u0954\" | \"\\u0962\"..\"\\u0963\" | \"\\u0981\"..\"\\u0981\" | \"\\u09BC\"..\"\\u09BC\" | \"\\u09C1\"..\"\\u09C4\" | \"\\u09CD\"..\"\\u09CD\" | \"\\u09E2\"..\"\\u09E3\" | \"\\u0A02\"..\"\\u0A02\" | \"\\u0A3C\"..\"\\u0A3C\" | \"\\u0A41\"..\"\\u0A42\" | \"\\u0A47\"..\"\\u0A48\" | \"\\u0A4B\"..\"\\u0A4D\" | \"\\u0A70\"..\"\\u0A71\" | \"\\u0A81\"..\"\\u0A82\" | \"\\u0ABC\"..\"\\u0ABC\" | \"\\u0AC1\"..\"\\u0AC5\" | \"\\u0AC7\"..\"\\u0AC8\" | \"\\u0ACD\"..\"\\u0ACD\" | \"\\u0B01\"..\"\\u0B01\" | \"\\u0B3C\"..\"\\u0B3C\" | \"\\u0B3F\"..\"\\u0B3F\" | \"\\u0B41\"..\"\\u0B43\" | \"\\u0B4D\"..\"\\u0B4D\" | \"\\u0B56\"..\"\\u0B56\" | \"\\u0B82\"..\"\\u0B82\" | \"\\u0BC0\"..\"\\u0BC0\" | \"\\u0BCD\"..\"\\u0BCD\" | \"\\u0C3E\"..\"\\u0C40\" | \"\\u0C46\"..\"\\u0C48\" | \"\\u0C4A\"..\"\\u0C4D\" | \"\\u0C55\"..\"\\u0C56\" | \"\\u0CBF\"..\"\\u0CBF\" | \"\\u0CC6\"..\"\\u0CC6\" | \"\\u0CCC\"..\"\\u0CCD\" | \"\\u0D41\"..\"\\u0D43\" | \"\\u0D4D\"..\"\\u0D4D\" | \"\\u0E31\"..\"\\u0E31\" | \"\\u0E34\"..\"\\u0E3A\" | \"\\u0E47\"..\"\\u0E4E\" | \"\\u0EB1\"..\"\\u0EB1\" | \"\\u0EB4\"..\"\\u0EB9\" | \"\\u0EBB\"..\"\\u0EBC\" | \"\\u0EC8\"..\"\\u0ECD\" | \"\\u0F18\"..\"\\u0F19\" | \"\\u0F35\"..\"\\u0F35\" | \"\\u0F37\"..\"\\u0F37\" | \"\\u0F39\"..\"\\u0F39\" | \"\\u0F71\"..\"\\u0F7E\" | \"\\u0F80\"..\"\\u0F84\" | \"\\u0F86\"..\"\\u0F87\" | \"\\u0F90\"..\"\\u0F95\" | \"\\u0F97\"..\"\\u0F97\" | \"\\u0F99\"..\"\\u0FAD\" | \"\\u0FB1\"..\"\\u0FB7\" | \"\\u0FB9\"..\"\\u0FB9\" | \"\\u20D0\"..\"\\u20DC\" | \"\\u20E1\"..\"\\u20E1\" | \"\\u302A\"..\"\\u302F\" | \"\\u3099\"..\"\\u309A\" | \"\\uFB1E\"..\"\\uFB1E\" | \"\\uFE20\"..\"\\uFE23\"\n\n  unicodeConnectorPunctuation = \"\\u005F\" | \"\\u203F\"..\"\\u2040\" | \"\\u30FB\" | \"\\uFE33\"..\"\\uFE34\" | \"\\uFE4D\"..\"\\uFE4F\" | \"\\uFF3F\" | \"\\uFF65\"\n  unicodeSpaceSeparator = \"\\u2000\"..\"\\u200B\" | \"\\u3000\"\n\n  reservedWord = keyword | futureReservedWord | nullLiteral | booleanLiteral\n\n  // Note: keywords that are the complete prefix of another keyword should\n  // be prioritized (e.g. 'in' should come before 'instanceof')\n  keyword = break    | do        | instanceof | typeof\n          | case     | else      | new        | var\n          | catch    | finally   | return     | void\n          | continue | for       | switch     | while\n          | debugger | function  | this       | with\n          | default  | if        | throw\n          | delete   | in        | try\n\n  futureReservedWordLax = class  | enum  | extends\n                        | super  | const | export\n                        | import\n\n  futureReservedWordStrict = futureReservedWordLax\n                           | implements | let     | private   | public\n                           | interface  | package | protected | static\n                           | yield\n\n  futureReservedWord = futureReservedWordStrict\n\n  /*\n    Note: Punctuator and DivPunctuator (see https://es5.github.io/x7.html#x7.7) are\n    not currently used by this grammar.\n  */\n\n  literal = nullLiteral | booleanLiteral | numericLiteral\n          | stringLiteral | regularExpressionLiteral // spec forgot Regexp literals in appendix?\n  nullLiteral = \"null\" ~identifierPart\n  booleanLiteral = (\"true\" | \"false\") ~identifierPart\n\n  // For semantics on how decimal literals are constructed, see section 7.8.3\n\n  // Note that the ordering of hexIntegerLiteral and decimalLiteral is reversed w.r.t. the spec\n  // This is intentional: the order decimalLiteral | hexIntegerLiteral will parse\n  // \"0x...\" as a decimal literal \"0\" followed by \"x...\"\n  numericLiteral = octalIntegerLiteral | hexIntegerLiteral | decimalLiteral\n\n  decimalLiteral = decimalIntegerLiteral \".\" decimalDigit* exponentPart -- bothParts\n                 |                       \".\" decimalDigit+ exponentPart -- decimalsOnly\n                 | decimalIntegerLiteral                   exponentPart -- integerOnly\n\n  decimalIntegerLiteral = nonZeroDigit decimalDigit*  -- nonZero\n                        | \"0\"                         -- zero\n  decimalDigit = \"0\"..\"9\"\n  nonZeroDigit = \"1\"..\"9\"\n\n  exponentPart = exponentIndicator signedInteger -- present\n               |                                 -- absent\n  exponentIndicator = \"e\" | \"E\"\n  signedInteger = \"+\" decimalDigit* -- positive\n                | \"-\" decimalDigit* -- negative\n                |     decimalDigit+ -- noSign\n\n  hexIntegerLiteral = \"0x\" hexDigit+\n                    | \"0X\" hexDigit+\n\n  // hexDigit defined in Ohm's built-in rules (otherwise: hexDigit = \"0\"..\"9\" | \"a\"..\"f\" | \"A\"..\"F\")\n\n  octalIntegerLiteral = \"0\" octalDigit+\n\n  octalDigit = \"0\"..\"7\"\n\n  // For semantics on how string literals are constructed, see section 7.8.4\n  stringLiteral = \"\\\"\" doubleStringCharacter* \"\\\"\"\n                | \"'\" singleStringCharacter* \"'\"\n  doubleStringCharacter = ~(\"\\\"\" | \"\\\\\" | lineTerminator) sourceCharacter -- nonEscaped\n                        | \"\\\\\" escapeSequence                             -- escaped\n                        | lineContinuation                                -- lineContinuation\n  singleStringCharacter = ~(\"'\" | \"\\\\\" | lineTerminator) sourceCharacter -- nonEscaped\n                        | \"\\\\\" escapeSequence                            -- escaped\n                        | lineContinuation                               -- lineContinuation\n  lineContinuation = \"\\\\\" lineTerminatorSequence\n  escapeSequence = unicodeEscapeSequence\n                 | hexEscapeSequence\n                 | octalEscapeSequence\n                 | characterEscapeSequence  // Must come last.\n  characterEscapeSequence = singleEscapeCharacter\n                          | nonEscapeCharacter\n  singleEscapeCharacter = \"'\"  // -> ( String.fromCharCode(0039) ) /*\\u0027*/\n                        | \"\\\"\" // -> ( String.fromCharCode(0034) ) /*\\u0022*/\n                        | \"\\\\\" // -> ( String.fromCharCode(0092) ) /*\\u005C*/\n                        | \"b\"  // -> ( String.fromCharCode(0008) ) /*\\u0008*/\n                        | \"f\"  // -> ( String.fromCharCode(0012) ) /*\\u000C*/\n                        | \"n\"  // -> ( String.fromCharCode(0010) ) /*\\u000A*/\n                        | \"r\"  // -> ( String.fromCharCode(0013) ) /*\\u000D*/\n                        | \"t\"  // -> ( String.fromCharCode(0009) ) /*\\u0009*/\n                        | \"v\"  // -> ( String.fromCharCode(0011) ) /*\\u000B*/\n  nonEscapeCharacter = ~(escapeCharacter | lineTerminator) sourceCharacter\n  escapeCharacter = singleEscapeCharacter | decimalDigit | \"x\" | \"u\"\n  octalEscapeSequence = zeroToThree octalDigit octalDigit    -- whole\n                      | fourToSeven octalDigit               -- eightTimesfourToSeven\n                      | zeroToThree octalDigit ~decimalDigit -- eightTimesZeroToThree\n                      | octalDigit ~decimalDigit             -- octal\n  hexEscapeSequence = \"x\" hexDigit hexDigit\n  unicodeEscapeSequence = \"u\" hexDigit hexDigit hexDigit hexDigit\n\n  zeroToThree = \"0\"..\"3\"\n  fourToSeven = \"4\"..\"7\"\n\n  // Â§7.8.5 Regular Expression Literals -- http://ecma-international.org/ecma-262/5.1/#sec-7.8.5\n\n  regularExpressionLiteral = \"/\" regularExpressionBody \"/\" regularExpressionFlags\n  regularExpressionBody = regularExpressionFirstChar regularExpressionChar*\n  regularExpressionFirstChar = ~(\"*\" | \"\\\\\" | \"/\" | \"[\") regularExpressionNonTerminator\n                             | regularExpressionBackslashSequence\n                             | regularExpressionClass\n  regularExpressionChar = ~(\"\\\\\" | \"/\" | \"[\") regularExpressionNonTerminator\n                        | regularExpressionBackslashSequence\n                        | regularExpressionClass\n  regularExpressionBackslashSequence = \"\\\\\" regularExpressionNonTerminator\n  regularExpressionNonTerminator = ~(lineTerminator) sourceCharacter\n  regularExpressionClass = \"[\" regularExpressionClassChar* \"]\"\n  regularExpressionClassChar = ~(\"]\" | \"\\\\\") regularExpressionNonTerminator\n                             | regularExpressionBackslashSequence\n  regularExpressionFlags = identifierPart*\n\n  // === Implementation-level rules (not part of the spec) ===\n\n  multiLineCommentNoNL = \"/*\" (~(\"*/\" | lineTerminator) sourceCharacter)* \"*/\"\n\n  // does not accept lineTerminators, not even implicit ones in a multiLineComment (cf. section 7.4)\n  spacesNoNL = (whitespace | singleLineComment | multiLineCommentNoNL)*\n\n  // A semicolon is \"automatically inserted\" if a newline is reached the end of the input stream\n  // is reached, or the offending token is \"}\".\n  // See http://ecma-international.org/ecma-262/5.1/#sec-7.9 for more information.\n  // NOTE: Applications of this rule *must* appear in a lexical context -- either in the body of a\n  // lexical rule, or inside `#()`.\n  sc = space* (\";\" | end)\n     | spacesNoNL (lineTerminator | ~multiLineCommentNoNL multiLineComment | &\"}\")\n\n  // Convenience rules for parsing keyword tokens.\n  break = \"break\" ~identifierPart\n  do = \"do\" ~identifierPart\n  instanceof = \"instanceof\" ~identifierPart\n  typeof = \"typeof\" ~identifierPart\n  case = \"case\" ~identifierPart\n  else = \"else\" ~identifierPart\n  new = \"new\" ~identifierPart\n  var = \"var\" ~identifierPart\n  catch = \"catch\" ~identifierPart\n  finally = \"finally\" ~identifierPart\n  return = \"return\" ~identifierPart\n  void = \"void\" ~identifierPart\n  continue = \"continue\" ~identifierPart\n  for = \"for\" ~identifierPart\n  switch = \"switch\" ~identifierPart\n  while = \"while\" ~identifierPart\n  debugger = \"debugger\" ~identifierPart\n  function = \"function\" ~identifierPart\n  this = \"this\" ~identifierPart\n  with = \"with\" ~identifierPart\n  default = \"default\" ~identifierPart\n  if = \"if\" ~identifierPart\n  throw = \"throw\" ~identifierPart\n  delete = \"delete\" ~identifierPart\n  in = \"in\" ~identifierPart\n  try = \"try\" ~identifierPart\n  get = \"get\" ~identifierPart\n  set = \"set\" ~identifierPart\n  class = \"class\" ~identifierPart\n  enum = \"enum\" ~identifierPart\n  extends = \"extends\" ~identifierPart\n  super = \"super\" ~identifierPart\n  const = \"const\" ~identifierPart\n  export = \"export\" ~identifierPart\n  import = \"import\" ~identifierPart\n  implements = \"implements\" ~identifierPart\n  let = \"let\" ~identifierPart\n  private = \"private\" ~identifierPart\n  public = \"public\" ~identifierPart\n  interface = \"interface\" ~identifierPart\n  package = \"package\" ~identifierPart\n  protected = \"protected\" ~identifierPart\n  static = \"static\" ~identifierPart\n  yield = \"yield\" ~identifierPart\n  \n  // end of lexical rules\n\n  noIn = ~in\n  withIn =\n\n  // Â§A.3 Expressions -- http://ecma-international.org/ecma-262/5.1/#sec-A.3\n\n  PrimaryExpression = this\n                    | identifier\n                    | literal\n                      // ( litToken.type === \"regexp\"\n                      //   ? this.ast(_fromIdx, \"RegExpExpr\",{body:  litToken.value.body\n                      //                            flags: litToken.value.flags}, [])\n                      //   : this.ast(_fromIdx, \"LiteralExpr\",{type:  litToken.type\n                      //                             value: litToken.value}, []) )\n                    | ArrayLiteral\n                    | ObjectLiteral\n                    | \"(\" Expression<withIn> \")\"  -- parenExpr\n\n  ArrayLiteral = \"[\" ListOf<AssignmentExpressionOrElision, \",\"> \"]\"\n  AssignmentExpressionOrElision = AssignmentExpression<withIn>\n                                |                       -- elision\n\n  ObjectLiteral = \"{\" ListOf<PropertyAssignment, \",\"> \"}\"              -- noTrailingComma\n                | \"{\" NonemptyListOf<PropertyAssignment, \",\"> \",\" \"}\"  -- trailingComma\n\n  PropertyAssignment = get PropertyName \"(\" \")\" \"{\" FunctionBody \"}\"                  -- getter\n                     | set PropertyName \"(\" FormalParameter \")\" \"{\" FunctionBody \"}\"  -- setter\n                     | PropertyName \":\" AssignmentExpression<withIn>                  -- simple\n\n  PropertyName = identifierName\n               | stringLiteral\n               | numericLiteral\n\n  MemberExpression = MemberExpression \"[\" Expression<withIn> \"]\"  -- arrayRefExp\n                   | MemberExpression \".\" identifierName  -- propRefExp\n                   | new MemberExpression Arguments       -- newExp\n                   | FunctionExpression\n                   | PrimaryExpression\n\n  NewExpression = MemberExpression\n                | new NewExpression -- newExp\n\n  CallExpression = CallExpression \"[\" Expression<withIn> \"]\"  -- arrayRefExp\n                 | CallExpression \".\" identifierName  -- propRefExp\n                 | CallExpression Arguments           -- callExpExp\n                 | MemberExpression Arguments         -- memberExpExp\n\n  Arguments = \"(\" ListOf<AssignmentExpression<withIn>, \",\"> \")\"\n\n  LeftHandSideExpression = CallExpression\n                         | NewExpression\n\n  PostfixExpression = LeftHandSideExpression #(spacesNoNL \"++\")  -- postIncrement\n                    | LeftHandSideExpression #(spacesNoNL \"--\")  -- postDecrement\n                    | LeftHandSideExpression\n\n  UnaryExpression = delete UnaryExpression  -- deleteExp\n                  | void   UnaryExpression  -- voidExp\n                  | typeof UnaryExpression  -- typeofExp\n                  | \"++\"   UnaryExpression  -- preIncrement\n                  | \"--\"   UnaryExpression  -- preDecrement\n                  | \"+\"    UnaryExpression  -- unaryPlus\n                  | \"-\"    UnaryExpression  -- unaryMinus\n                  | \"~\"    UnaryExpression  -- bnot\n                  | \"!\"    UnaryExpression  -- lnot\n                  | PostfixExpression\n\n  MultiplicativeExpression = MultiplicativeExpression \"*\" UnaryExpression -- mul\n                           | MultiplicativeExpression \"/\" UnaryExpression -- div\n                           | MultiplicativeExpression \"%\" UnaryExpression -- mod\n                           | UnaryExpression\n\n  AdditiveExpression = AdditiveExpression \"+\" MultiplicativeExpression -- add\n                     | AdditiveExpression \"-\" MultiplicativeExpression -- sub\n                     | MultiplicativeExpression\n\n  ShiftExpression = ShiftExpression \"<<\" AdditiveExpression  -- lsl\n                  | ShiftExpression \">>>\" AdditiveExpression -- lsr\n                  | ShiftExpression \">>\" AdditiveExpression  -- asr\n                  | AdditiveExpression\n\n  RelationalExpression<guardIn>\n    = RelationalExpression<guardIn> \"<\" ShiftExpression           -- lt\n    | RelationalExpression<guardIn> \">\" ShiftExpression           -- gt\n    | RelationalExpression<guardIn> \"<=\" ShiftExpression          -- le\n    | RelationalExpression<guardIn> \">=\" ShiftExpression          -- ge\n    | RelationalExpression<guardIn> \"instanceof\" ShiftExpression  -- instanceOfExp\n    | RelationalExpression<guardIn> guardIn \"in\" ShiftExpression  -- inExp\n    | ShiftExpression\n\n  EqualityExpression<guardIn>\n    = EqualityExpression<guardIn> \"==\" RelationalExpression<guardIn>  -- equal\n    | EqualityExpression<guardIn> \"!=\" RelationalExpression<guardIn>  -- notEqual\n    | EqualityExpression<guardIn> \"===\" RelationalExpression<guardIn> -- eq\n    | EqualityExpression<guardIn> \"!==\" RelationalExpression<guardIn> -- notEq\n    | RelationalExpression<guardIn>\n\n  BitwiseANDExpression<guardIn>\n    = BitwiseANDExpression<guardIn> \"&\" EqualityExpression<guardIn> -- band\n    | EqualityExpression<guardIn>\n\n  BitwiseXORExpression<guardIn>\n    = BitwiseXORExpression<guardIn> \"^\" BitwiseANDExpression<guardIn> -- bxor\n    | BitwiseANDExpression<guardIn>\n\n  BitwiseORExpression<guardIn>\n    = BitwiseORExpression<guardIn> \"|\" BitwiseXORExpression<guardIn> -- bor\n    | BitwiseXORExpression<guardIn>\n\n  LogicalANDExpression<guardIn>\n    = LogicalANDExpression<guardIn> \"&&\" BitwiseORExpression<guardIn> -- land\n    | BitwiseORExpression<guardIn>\n\n  LogicalORExpression<guardIn>\n    = LogicalORExpression<guardIn> \"||\" LogicalANDExpression<guardIn> -- lor\n    | LogicalANDExpression<guardIn>\n\n  ConditionalExpression<guardIn>\n    = LogicalORExpression<guardIn> \"?\" AssignmentExpression<withIn> \":\" AssignmentExpression<guardIn> -- conditional\n    | LogicalORExpression<guardIn>\n\n  AssignmentExpression<guardIn>\n    = LeftHandSideExpression AssignmentOperator AssignmentExpression<guardIn> -- assignment\n    | ConditionalExpression<guardIn>\n\n  Expression<guardIn> (an expression)\n    = Expression<guardIn> \",\" AssignmentExpression<guardIn> -- commaExp\n    | AssignmentExpression<guardIn>\n\n  AssignmentOperator = \"=\" | \">>>=\" | \"<<=\" | \">>=\"\n                     | \"*=\" | \"/=\" | \"%=\" | \"+=\" | \"-=\" | \"&=\" | \"^=\" | \"|=\"\n\n  // Â§A.4 Statements -- http://ecma-international.org/ecma-262/5.1/#sec-A.4\n\n  Statement (a statement)\n    = Block\n    | VariableStatement\n    | EmptyStatement\n    | ExpressionStatement\n    | IfStatement\n    | IterationStatement\n    | ContinueStatement\n    | BreakStatement\n    | ReturnStatement\n    | WithStatement\n    | LabelledStatement\n    | SwitchStatement\n    | ThrowStatement\n    | TryStatement\n    | DebuggerStatement\n\n  Block = \"{\" StatementList \"}\"\n\n  StatementList = Statement*\n\n  VariableStatement = var VariableDeclarationList<withIn> #(sc)\n\n  VariableDeclarationList<guardIn> = NonemptyListOf<VariableDeclaration<guardIn>, \",\">\n\n  VariableDeclaration<guardIn> = identifier Initialiser<guardIn>?\n\n  Initialiser<guardIn> = \"=\" AssignmentExpression<guardIn>\n\n  EmptyStatement = \";\" // note: this semicolon eats newlines\n\n  ExpressionStatement = ~(\"{\" | function) Expression<withIn> #(sc)\n\n  IfStatement = if \"(\" Expression<withIn> \")\" Statement (else Statement)?\n\n  IterationStatement = do Statement while \"(\" Expression<withIn> \")\" #(sc)  -- doWhile\n                     | while \"(\" Expression<withIn> \")\" Statement           -- whileDo\n                     | for \"(\" Expression<noIn>? \";\"\n                                 Expression<withIn>? \";\"\n                                 Expression<withIn>? \")\" Statement          -- for3\n                     | for \"(\" var VariableDeclarationList<noIn> \";\"\n                                 Expression<withIn>? \";\"\n                                 Expression<withIn>? \")\" Statement          -- for3var\n                     | for \"(\" LeftHandSideExpression in\n                                 Expression<withIn> \")\" Statement           -- forIn\n                     | for \"(\" var VariableDeclaration<noIn> in\n                                 Expression<withIn> \")\" Statement           -- forInVar\n\n  ContinueStatement = continue #((spacesNoNL identifier)? sc)\n\n  BreakStatement = break #((spacesNoNL identifier)? sc)\n\n  ReturnStatement = return (#(spacesNoNL ~space) Expression<withIn>)? #(sc)\n\n  WithStatement = with \"(\" Expression<withIn> \")\" Statement\n\n  SwitchStatement = switch \"(\" Expression<withIn> \")\" CaseBlock\n\n  CaseBlock = \"{\" CaseClause* DefaultClause CaseClause* \"}\"  -- withDefault\n            | \"{\"                           CaseClause* \"}\"  -- withoutDefault\n\n  CaseClause = case Expression<withIn> \":\" Statement*\n\n  DefaultClause = default \":\" Statement*\n\n  LabelledStatement = identifier \":\" Statement\n\n  ThrowStatement = throw Expression<withIn> #(sc)  -- throwExpr\n\n  TryStatement = try Block Catch Finally  -- tryCatchFinally\n               | try Block Finally        -- tryFinally\n               | try Block Catch          -- tryCatch\n\n  Catch = catch \"(\" FormalParameter \")\" Block\n\n  Finally = finally Block\n\n  DebuggerStatement = #(debugger sc)\n\n  // Â§A.5 Functions and Programs -- http://ecma-international.org/ecma-262/5.1/#sec-A.5\n\n  FunctionDeclaration\n    = function identifier \"(\" FormalParameterList \")\" \"{\" FunctionBody \"}\"\n\n  FunctionExpression\n    = function identifier \"(\" FormalParameterList \")\" \"{\" FunctionBody \"}\"  -- named\n    | function \"(\" FormalParameterList \")\" \"{\" FunctionBody \"}\"             -- anonymous\n\n  FormalParameterList = ListOf<FormalParameter, \",\">\n\n  FormalParameter = identifier\n\n  FunctionBody = Directive* SourceElement*\n\n  SourceElement = Declaration | Statement\n\n  // Broken out so es6 can override to include ConstDecl and LetDecl\n  Declaration = FunctionDeclaration\n\n  Directive = stringLiteral #(sc)\n}")
    .withDefaultStartRule("Program")
  return decl
    .define("Program", [], this.seq(this.star(this.app("Directive").withInterval(decl.sourceInterval(19, 28))).withInterval(decl.sourceInterval(19, 29)), this.star(this.app("SourceElement").withInterval(decl.sourceInterval(30, 43))).withInterval(decl.sourceInterval(30, 44))).withInterval(decl.sourceInterval(19, 44)))
    .define("sourceCharacter", [], this.app("any").withInterval(decl.sourceInterval(641, 644)))
    .override("space", [], this.alt(this.app("whitespace").withInterval(decl.sourceInterval(707, 717)), this.app("lineTerminator").withInterval(decl.sourceInterval(720, 734)), this.app("comment").withInterval(decl.sourceInterval(737, 744))).withInterval(decl.sourceInterval(707, 744)))
    .define("whitespace_verticalTab", [], this.prim("\u000b").withInterval(decl.sourceInterval(781, 787)))
    .define("whitespace_formFeed", [], this.prim("\f").withInterval(decl.sourceInterval(821, 827)))
    .define("whitespace_noBreakSpace", [], this.prim(" ").withInterval(decl.sourceInterval(877, 885)))
    .define("whitespace_byteOrderMark", [], this.prim("ï»¿").withInterval(decl.sourceInterval(918, 926)))
    .define("whitespace", [], this.alt(this.prim("\t").withInterval(decl.sourceInterval(761, 765)), this.app("whitespace_verticalTab").withInterval(decl.sourceInterval(781, 787)), this.app("whitespace_formFeed").withInterval(decl.sourceInterval(821, 827)), this.prim(" ").withInterval(decl.sourceInterval(858, 861)), this.app("whitespace_noBreakSpace").withInterval(decl.sourceInterval(877, 885)), this.app("whitespace_byteOrderMark").withInterval(decl.sourceInterval(918, 926)), this.app("unicodeSpaceSeparator").withInterval(decl.sourceInterval(960, 981))).withInterval(decl.sourceInterval(761, 981)))
    .define("lineTerminator", [], this.alt(this.prim("\n").withInterval(decl.sourceInterval(1002, 1006)), this.prim("\r").withInterval(decl.sourceInterval(1009, 1013)), this.prim("\u2028").withInterval(decl.sourceInterval(1016, 1024)), this.prim("\u2029").withInterval(decl.sourceInterval(1027, 1035))).withInterval(decl.sourceInterval(1002, 1035)))
    .define("lineTerminatorSequence", [], this.alt(this.prim("\n").withInterval(decl.sourceInterval(1063, 1067)), this.seq(this.prim("\r").withInterval(decl.sourceInterval(1070, 1074)), this.not(this.prim("\n").withInterval(decl.sourceInterval(1076, 1080))).withInterval(decl.sourceInterval(1075, 1080))).withInterval(decl.sourceInterval(1070, 1080)), this.prim("\u2028").withInterval(decl.sourceInterval(1083, 1091)), this.prim("\u2029").withInterval(decl.sourceInterval(1094, 1102)), this.prim("\r\n").withInterval(decl.sourceInterval(1105, 1111))).withInterval(decl.sourceInterval(1063, 1111)))
    .define("comment", [], this.alt(this.app("multiLineComment").withInterval(decl.sourceInterval(1125, 1141)), this.app("singleLineComment").withInterval(decl.sourceInterval(1144, 1161))).withInterval(decl.sourceInterval(1125, 1161)))
    .define("multiLineComment", [], this.seq(this.prim("/*").withInterval(decl.sourceInterval(1184, 1188)), this.star(this.seq(this.not(this.prim("*/").withInterval(decl.sourceInterval(1191, 1195))).withInterval(decl.sourceInterval(1190, 1195)), this.app("sourceCharacter").withInterval(decl.sourceInterval(1196, 1211))).withInterval(decl.sourceInterval(1190, 1211))).withInterval(decl.sourceInterval(1189, 1213)), this.prim("*/").withInterval(decl.sourceInterval(1214, 1218))).withInterval(decl.sourceInterval(1184, 1218)))
    .define("singleLineComment", [], this.seq(this.prim("//").withInterval(decl.sourceInterval(1241, 1245)), this.star(this.seq(this.not(this.app("lineTerminator").withInterval(decl.sourceInterval(1248, 1262))).withInterval(decl.sourceInterval(1247, 1262)), this.app("sourceCharacter").withInterval(decl.sourceInterval(1263, 1278))).withInterval(decl.sourceInterval(1247, 1278))).withInterval(decl.sourceInterval(1246, 1280))).withInterval(decl.sourceInterval(1241, 1280)))
    .define("identifier", [], this.seq(this.not(this.app("reservedWord").withInterval(decl.sourceInterval(1315, 1327))).withInterval(decl.sourceInterval(1314, 1327)), this.app("identifierName").withInterval(decl.sourceInterval(1328, 1342))).withInterval(decl.sourceInterval(1314, 1342)), "an indentifier")
    .define("identifierName", [], this.seq(this.app("identifierStart").withInterval(decl.sourceInterval(1362, 1377)), this.star(this.app("identifierPart").withInterval(decl.sourceInterval(1378, 1392))).withInterval(decl.sourceInterval(1378, 1393))).withInterval(decl.sourceInterval(1362, 1393)))
    .define("identifierStart_escaped", [], this.seq(this.prim("\\").withInterval(decl.sourceInterval(1454, 1458)), this.app("unicodeEscapeSequence").withInterval(decl.sourceInterval(1459, 1480))).withInterval(decl.sourceInterval(1454, 1480)))
    .define("identifierStart", [], this.alt(this.app("letter").withInterval(decl.sourceInterval(1415, 1421)), this.prim("$").withInterval(decl.sourceInterval(1424, 1427)), this.prim("_").withInterval(decl.sourceInterval(1430, 1433)), this.app("identifierStart_escaped").withInterval(decl.sourceInterval(1454, 1480))).withInterval(decl.sourceInterval(1415, 1491)))
    .define("identifierPart", [], this.alt(this.app("identifierStart").withInterval(decl.sourceInterval(1511, 1526)), this.app("unicodeCombiningMark").withInterval(decl.sourceInterval(1529, 1549)), this.app("unicodeDigit").withInterval(decl.sourceInterval(1569, 1581)), this.app("unicodeConnectorPunctuation").withInterval(decl.sourceInterval(1584, 1611)), this.prim("â").withInterval(decl.sourceInterval(1631, 1639)), this.prim("â").withInterval(decl.sourceInterval(1642, 1650))).withInterval(decl.sourceInterval(1511, 1650)))
    .extend("letter", [], this.app("unicodeCategoryNl").withInterval(decl.sourceInterval(1662, 1679)))
    .define("unicodeCategoryNl", [], this.alt(this.range("â ", "â").withInterval(decl.sourceInterval(1706, 1724)), this.prim("ã").withInterval(decl.sourceInterval(1727, 1735)), this.range("ã¡", "ã©").withInterval(decl.sourceInterval(1738, 1756))).withInterval(decl.sourceInterval(1706, 1756)))
    .define("unicodeDigit", [], this.alt(this.range("0", "9").withInterval(decl.sourceInterval(1788, 1806)), this.range("Ù ", "Ù©").withInterval(decl.sourceInterval(1809, 1827)), this.range("Û°", "Û¹").withInterval(decl.sourceInterval(1830, 1848)), this.range("à¥¦", "à¥¯").withInterval(decl.sourceInterval(1851, 1869)), this.range("à§¦", "à§¯").withInterval(decl.sourceInterval(1872, 1890)), this.range("à©¦", "à©¯").withInterval(decl.sourceInterval(1893, 1911)), this.range("à«¦", "à«¯").withInterval(decl.sourceInterval(1914, 1932)), this.range("à­¦", "à­¯").withInterval(decl.sourceInterval(1935, 1953)), this.range("à¯§", "à¯¯").withInterval(decl.sourceInterval(1956, 1974)), this.range("à±¦", "à±¯").withInterval(decl.sourceInterval(1977, 1995)), this.range("à³¦", "à³¯").withInterval(decl.sourceInterval(1998, 2016)), this.range("àµ¦", "àµ¯").withInterval(decl.sourceInterval(2019, 2037)), this.range("à¹", "à¹").withInterval(decl.sourceInterval(2040, 2058)), this.range("à»", "à»").withInterval(decl.sourceInterval(2061, 2079)), this.range("à¼ ", "à¼©").withInterval(decl.sourceInterval(2082, 2100)), this.range("ï¼", "ï¼").withInterval(decl.sourceInterval(2103, 2121))).withInterval(decl.sourceInterval(1788, 2121)), "a digit")
    .define("unicodeCombiningMark", [], this.alt(this.range("Ì", "Í").withInterval(decl.sourceInterval(2179, 2197)), this.range("Í ", "Í¡").withInterval(decl.sourceInterval(2200, 2218)), this.range("Ò", "Ò").withInterval(decl.sourceInterval(2221, 2239)), this.range("Ö", "Ö¡").withInterval(decl.sourceInterval(2242, 2260)), this.range("Ö£", "Ö¹").withInterval(decl.sourceInterval(2263, 2281)), this.range("Ö»", "Ö½").withInterval(decl.sourceInterval(2284, 2302)), this.range("Ö¿", "Ö¿").withInterval(decl.sourceInterval(2305, 2323)), this.range("×", "×").withInterval(decl.sourceInterval(2326, 2344)), this.range("×", "×").withInterval(decl.sourceInterval(2347, 2365)), this.range("Ù", "Ù").withInterval(decl.sourceInterval(2368, 2386)), this.range("Ù°", "Ù°").withInterval(decl.sourceInterval(2389, 2407)), this.range("Û", "Û").withInterval(decl.sourceInterval(2410, 2428)), this.range("Û", "Û¤").withInterval(decl.sourceInterval(2431, 2449)), this.range("Û§", "Û¨").withInterval(decl.sourceInterval(2452, 2470)), this.range("Ûª", "Û­").withInterval(decl.sourceInterval(2473, 2491)), this.range("à¤", "à¤").withInterval(decl.sourceInterval(2494, 2512)), this.range("à¤¼", "à¤¼").withInterval(decl.sourceInterval(2515, 2533)), this.range("à¥", "à¥").withInterval(decl.sourceInterval(2536, 2554)), this.range("à¥", "à¥").withInterval(decl.sourceInterval(2557, 2575)), this.range("à¥", "à¥").withInterval(decl.sourceInterval(2578, 2596)), this.range("à¥¢", "à¥£").withInterval(decl.sourceInterval(2599, 2617)), this.range("à¦", "à¦").withInterval(decl.sourceInterval(2620, 2638)), this.range("à¦¼", "à¦¼").withInterval(decl.sourceInterval(2641, 2659)), this.range("à§", "à§").withInterval(decl.sourceInterval(2662, 2680)), this.range("à§", "à§").withInterval(decl.sourceInterval(2683, 2701)), this.range("à§¢", "à§£").withInterval(decl.sourceInterval(2704, 2722)), this.range("à¨", "à¨").withInterval(decl.sourceInterval(2725, 2743)), this.range("à¨¼", "à¨¼").withInterval(decl.sourceInterval(2746, 2764)), this.range("à©", "à©").withInterval(decl.sourceInterval(2767, 2785)), this.range("à©", "à©").withInterval(decl.sourceInterval(2788, 2806)), this.range("à©", "à©").withInterval(decl.sourceInterval(2809, 2827)), this.range("à©°", "à©±").withInterval(decl.sourceInterval(2830, 2848)), this.range("àª", "àª").withInterval(decl.sourceInterval(2851, 2869)), this.range("àª¼", "àª¼").withInterval(decl.sourceInterval(2872, 2890)), this.range("à«", "à«").withInterval(decl.sourceInterval(2893, 2911)), this.range("à«", "à«").withInterval(decl.sourceInterval(2914, 2932)), this.range("à«", "à«").withInterval(decl.sourceInterval(2935, 2953)), this.range("à¬", "à¬").withInterval(decl.sourceInterval(2956, 2974)), this.range("à¬¼", "à¬¼").withInterval(decl.sourceInterval(2977, 2995)), this.range("à¬¿", "à¬¿").withInterval(decl.sourceInterval(2998, 3016)), this.range("à­", "à­").withInterval(decl.sourceInterval(3019, 3037)), this.range("à­", "à­").withInterval(decl.sourceInterval(3040, 3058)), this.range("à­", "à­").withInterval(decl.sourceInterval(3061, 3079)), this.range("à®", "à®").withInterval(decl.sourceInterval(3082, 3100)), this.range("à¯", "à¯").withInterval(decl.sourceInterval(3103, 3121)), this.range("à¯", "à¯").withInterval(decl.sourceInterval(3124, 3142)), this.range("à°¾", "à±").withInterval(decl.sourceInterval(3145, 3163)), this.range("à±", "à±").withInterval(decl.sourceInterval(3166, 3184)), this.range("à±", "à±").withInterval(decl.sourceInterval(3187, 3205)), this.range("à±", "à±").withInterval(decl.sourceInterval(3208, 3226)), this.range("à²¿", "à²¿").withInterval(decl.sourceInterval(3229, 3247)), this.range("à³", "à³").withInterval(decl.sourceInterval(3250, 3268)), this.range("à³", "à³").withInterval(decl.sourceInterval(3271, 3289)), this.range("àµ", "àµ").withInterval(decl.sourceInterval(3292, 3310)), this.range("àµ", "àµ").withInterval(decl.sourceInterval(3313, 3331)), this.range("à¸±", "à¸±").withInterval(decl.sourceInterval(3334, 3352)), this.range("à¸´", "à¸º").withInterval(decl.sourceInterval(3355, 3373)), this.range("à¹", "à¹").withInterval(decl.sourceInterval(3376, 3394)), this.range("àº±", "àº±").withInterval(decl.sourceInterval(3397, 3415)), this.range("àº´", "àº¹").withInterval(decl.sourceInterval(3418, 3436)), this.range("àº»", "àº¼").withInterval(decl.sourceInterval(3439, 3457)), this.range("à»", "à»").withInterval(decl.sourceInterval(3460, 3478)), this.range("à¼", "à¼").withInterval(decl.sourceInterval(3481, 3499)), this.range("à¼µ", "à¼µ").withInterval(decl.sourceInterval(3502, 3520)), this.range("à¼·", "à¼·").withInterval(decl.sourceInterval(3523, 3541)), this.range("à¼¹", "à¼¹").withInterval(decl.sourceInterval(3544, 3562)), this.range("à½±", "à½¾").withInterval(decl.sourceInterval(3565, 3583)), this.range("à¾", "à¾").withInterval(decl.sourceInterval(3586, 3604)), this.range("à¾", "à¾").withInterval(decl.sourceInterval(3607, 3625)), this.range("à¾", "à¾").withInterval(decl.sourceInterval(3628, 3646)), this.range("à¾", "à¾").withInterval(decl.sourceInterval(3649, 3667)), this.range("à¾", "à¾­").withInterval(decl.sourceInterval(3670, 3688)), this.range("à¾±", "à¾·").withInterval(decl.sourceInterval(3691, 3709)), this.range("à¾¹", "à¾¹").withInterval(decl.sourceInterval(3712, 3730)), this.range("â", "â").withInterval(decl.sourceInterval(3733, 3751)), this.range("â¡", "â¡").withInterval(decl.sourceInterval(3754, 3772)), this.range("ãª", "ã¯").withInterval(decl.sourceInterval(3775, 3793)), this.range("ã", "ã").withInterval(decl.sourceInterval(3796, 3814)), this.range("ï¬", "ï¬").withInterval(decl.sourceInterval(3817, 3835)), this.range("ï¸ ", "ï¸£").withInterval(decl.sourceInterval(3838, 3856))).withInterval(decl.sourceInterval(2179, 3856)), "a Unicode combining mark")
    .define("unicodeConnectorPunctuation", [], this.alt(this.prim("_").withInterval(decl.sourceInterval(3890, 3898)), this.range("â¿", "â").withInterval(decl.sourceInterval(3901, 3919)), this.prim("ã»").withInterval(decl.sourceInterval(3922, 3930)), this.range("ï¸³", "ï¸´").withInterval(decl.sourceInterval(3933, 3951)), this.range("ï¹", "ï¹").withInterval(decl.sourceInterval(3954, 3972)), this.prim("ï¼¿").withInterval(decl.sourceInterval(3975, 3983)), this.prim("ï½¥").withInterval(decl.sourceInterval(3986, 3994))).withInterval(decl.sourceInterval(3890, 3994)))
    .define("unicodeSpaceSeparator", [], this.alt(this.range("â", "â").withInterval(decl.sourceInterval(4021, 4039)), this.prim("ã").withInterval(decl.sourceInterval(4042, 4050))).withInterval(decl.sourceInterval(4021, 4050)))
    .define("reservedWord", [], this.alt(this.app("keyword").withInterval(decl.sourceInterval(4069, 4076)), this.app("futureReservedWord").withInterval(decl.sourceInterval(4079, 4097)), this.app("nullLiteral").withInterval(decl.sourceInterval(4100, 4111)), this.app("booleanLiteral").withInterval(decl.sourceInterval(4114, 4128))).withInterval(decl.sourceInterval(4069, 4128)))
    .define("keyword", [], this.alt(this.app("break").withInterval(decl.sourceInterval(4281, 4286)), this.app("do").withInterval(decl.sourceInterval(4292, 4294)), this.app("instanceof").withInterval(decl.sourceInterval(4304, 4314)), this.app("typeof").withInterval(decl.sourceInterval(4317, 4323)), this.app("case").withInterval(decl.sourceInterval(4336, 4340)), this.app("else").withInterval(decl.sourceInterval(4347, 4351)), this.app("new").withInterval(decl.sourceInterval(4359, 4362)), this.app("var").withInterval(decl.sourceInterval(4372, 4375)), this.app("catch").withInterval(decl.sourceInterval(4388, 4393)), this.app("finally").withInterval(decl.sourceInterval(4399, 4406)), this.app("return").withInterval(decl.sourceInterval(4411, 4417)), this.app("void").withInterval(decl.sourceInterval(4424, 4428)), this.app("continue").withInterval(decl.sourceInterval(4441, 4449)), this.app("for").withInterval(decl.sourceInterval(4452, 4455)), this.app("switch").withInterval(decl.sourceInterval(4464, 4470)), this.app("while").withInterval(decl.sourceInterval(4477, 4482)), this.app("debugger").withInterval(decl.sourceInterval(4495, 4503)), this.app("function").withInterval(decl.sourceInterval(4506, 4514)), this.app("this").withInterval(decl.sourceInterval(4518, 4522)), this.app("with").withInterval(decl.sourceInterval(4531, 4535)), this.app("default").withInterval(decl.sourceInterval(4548, 4555)), this.app("if").withInterval(decl.sourceInterval(4559, 4561)), this.app("throw").withInterval(decl.sourceInterval(4571, 4576)), this.app("delete").withInterval(decl.sourceInterval(4589, 4595)), this.app("in").withInterval(decl.sourceInterval(4600, 4602)), this.app("try").withInterval(decl.sourceInterval(4612, 4615))).withInterval(decl.sourceInterval(4281, 4615)))
    .define("futureReservedWordLax", [], this.alt(this.app("class").withInterval(decl.sourceInterval(4643, 4648)), this.app("enum").withInterval(decl.sourceInterval(4652, 4656)), this.app("extends").withInterval(decl.sourceInterval(4660, 4667)), this.app("super").withInterval(decl.sourceInterval(4694, 4699)), this.app("const").withInterval(decl.sourceInterval(4703, 4708)), this.app("export").withInterval(decl.sourceInterval(4711, 4717)), this.app("import").withInterval(decl.sourceInterval(4744, 4750))).withInterval(decl.sourceInterval(4643, 4750)))
    .define("futureReservedWordStrict", [], this.alt(this.app("futureReservedWordLax").withInterval(decl.sourceInterval(4781, 4802)), this.app("implements").withInterval(decl.sourceInterval(4832, 4842)), this.app("let").withInterval(decl.sourceInterval(4845, 4848)), this.app("private").withInterval(decl.sourceInterval(4855, 4862)), this.app("public").withInterval(decl.sourceInterval(4867, 4873)), this.app("interface").withInterval(decl.sourceInterval(4903, 4912)), this.app("package").withInterval(decl.sourceInterval(4916, 4923)), this.app("protected").withInterval(decl.sourceInterval(4926, 4935)), this.app("static").withInterval(decl.sourceInterval(4938, 4944)), this.app("yield").withInterval(decl.sourceInterval(4974, 4979))).withInterval(decl.sourceInterval(4781, 4979)))
    .define("futureReservedWord", [], this.app("futureReservedWordStrict").withInterval(decl.sourceInterval(5004, 5028)))
    .define("literal", [], this.alt(this.app("nullLiteral").withInterval(decl.sourceInterval(5177, 5188)), this.app("booleanLiteral").withInterval(decl.sourceInterval(5191, 5205)), this.app("numericLiteral").withInterval(decl.sourceInterval(5208, 5222)), this.app("stringLiteral").withInterval(decl.sourceInterval(5235, 5248)), this.app("regularExpressionLiteral").withInterval(decl.sourceInterval(5251, 5275))).withInterval(decl.sourceInterval(5177, 5275)))
    .define("nullLiteral", [], this.seq(this.prim("null").withInterval(decl.sourceInterval(5336, 5342)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(5344, 5358))).withInterval(decl.sourceInterval(5343, 5358))).withInterval(decl.sourceInterval(5336, 5358)))
    .define("booleanLiteral", [], this.seq(this.alt(this.prim("true").withInterval(decl.sourceInterval(5379, 5385)), this.prim("false").withInterval(decl.sourceInterval(5388, 5395))).withInterval(decl.sourceInterval(5379, 5395)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(5398, 5412))).withInterval(decl.sourceInterval(5397, 5412))).withInterval(decl.sourceInterval(5378, 5412)))
    .define("numericLiteral", [], this.alt(this.app("octalIntegerLiteral").withInterval(decl.sourceInterval(5747, 5766)), this.app("hexIntegerLiteral").withInterval(decl.sourceInterval(5769, 5786)), this.app("decimalLiteral").withInterval(decl.sourceInterval(5789, 5803))).withInterval(decl.sourceInterval(5747, 5803)))
    .define("decimalLiteral_bothParts", [], this.seq(this.app("decimalIntegerLiteral").withInterval(decl.sourceInterval(5824, 5845)), this.prim(".").withInterval(decl.sourceInterval(5846, 5849)), this.star(this.app("decimalDigit").withInterval(decl.sourceInterval(5850, 5862))).withInterval(decl.sourceInterval(5850, 5863)), this.app("exponentPart").withInterval(decl.sourceInterval(5864, 5876))).withInterval(decl.sourceInterval(5824, 5876)))
    .define("decimalLiteral_decimalsOnly", [], this.seq(this.prim(".").withInterval(decl.sourceInterval(5931, 5934)), this.plus(this.app("decimalDigit").withInterval(decl.sourceInterval(5935, 5947))).withInterval(decl.sourceInterval(5935, 5948)), this.app("exponentPart").withInterval(decl.sourceInterval(5949, 5961))).withInterval(decl.sourceInterval(5931, 5961)))
    .define("decimalLiteral_integerOnly", [], this.seq(this.app("decimalIntegerLiteral").withInterval(decl.sourceInterval(5997, 6018)), this.app("exponentPart").withInterval(decl.sourceInterval(6037, 6049))).withInterval(decl.sourceInterval(5997, 6049)))
    .define("decimalLiteral", [], this.alt(this.app("decimalLiteral_bothParts").withInterval(decl.sourceInterval(5824, 5876)), this.app("decimalLiteral_decimalsOnly").withInterval(decl.sourceInterval(5931, 5961)), this.app("decimalLiteral_integerOnly").withInterval(decl.sourceInterval(5997, 6049))).withInterval(decl.sourceInterval(5824, 6064)))
    .define("decimalIntegerLiteral_nonZero", [], this.seq(this.app("nonZeroDigit").withInterval(decl.sourceInterval(6092, 6104)), this.star(this.app("decimalDigit").withInterval(decl.sourceInterval(6105, 6117))).withInterval(decl.sourceInterval(6105, 6118))).withInterval(decl.sourceInterval(6092, 6118)))
    .define("decimalIntegerLiteral_zero", [], this.prim("0").withInterval(decl.sourceInterval(6157, 6160)))
    .define("decimalIntegerLiteral", [], this.alt(this.app("decimalIntegerLiteral_nonZero").withInterval(decl.sourceInterval(6092, 6118)), this.app("decimalIntegerLiteral_zero").withInterval(decl.sourceInterval(6157, 6160))).withInterval(decl.sourceInterval(6092, 6192)))
    .define("decimalDigit", [], this.range("0", "9").withInterval(decl.sourceInterval(6210, 6218)))
    .define("nonZeroDigit", [], this.range("1", "9").withInterval(decl.sourceInterval(6236, 6244)))
    .define("exponentPart_present", [], this.seq(this.app("exponentIndicator").withInterval(decl.sourceInterval(6263, 6280)), this.app("signedInteger").withInterval(decl.sourceInterval(6281, 6294))).withInterval(decl.sourceInterval(6263, 6294)))
    .define("exponentPart_absent", [], this.seq().withInterval(decl.sourceInterval(6355, 6355)))
    .define("exponentPart", [], this.alt(this.app("exponentPart_present").withInterval(decl.sourceInterval(6263, 6294)), this.app("exponentPart_absent").withInterval(decl.sourceInterval(6355, 6355))).withInterval(decl.sourceInterval(6263, 6364)))
    .define("exponentIndicator", [], this.alt(this.prim("e").withInterval(decl.sourceInterval(6387, 6390)), this.prim("E").withInterval(decl.sourceInterval(6393, 6396))).withInterval(decl.sourceInterval(6387, 6396)))
    .define("signedInteger_positive", [], this.seq(this.prim("+").withInterval(decl.sourceInterval(6415, 6418)), this.star(this.app("decimalDigit").withInterval(decl.sourceInterval(6419, 6431))).withInterval(decl.sourceInterval(6419, 6432))).withInterval(decl.sourceInterval(6415, 6432)))
    .define("signedInteger_negative", [], this.seq(this.prim("-").withInterval(decl.sourceInterval(6463, 6466)), this.star(this.app("decimalDigit").withInterval(decl.sourceInterval(6467, 6479))).withInterval(decl.sourceInterval(6467, 6480))).withInterval(decl.sourceInterval(6463, 6480)))
    .define("signedInteger_noSign", [], this.plus(this.app("decimalDigit").withInterval(decl.sourceInterval(6515, 6527))).withInterval(decl.sourceInterval(6515, 6528)))
    .define("signedInteger", [], this.alt(this.app("signedInteger_positive").withInterval(decl.sourceInterval(6415, 6432)), this.app("signedInteger_negative").withInterval(decl.sourceInterval(6463, 6480)), this.app("signedInteger_noSign").withInterval(decl.sourceInterval(6515, 6528))).withInterval(decl.sourceInterval(6415, 6538)))
    .define("hexIntegerLiteral", [], this.alt(this.seq(this.prim("0x").withInterval(decl.sourceInterval(6562, 6566)), this.plus(this.app("hexDigit").withInterval(decl.sourceInterval(6567, 6575))).withInterval(decl.sourceInterval(6567, 6576))).withInterval(decl.sourceInterval(6562, 6576)), this.seq(this.prim("0X").withInterval(decl.sourceInterval(6599, 6603)), this.plus(this.app("hexDigit").withInterval(decl.sourceInterval(6604, 6612))).withInterval(decl.sourceInterval(6604, 6613))).withInterval(decl.sourceInterval(6599, 6613))).withInterval(decl.sourceInterval(6562, 6613)))
    .define("octalIntegerLiteral", [], this.seq(this.prim("0").withInterval(decl.sourceInterval(6741, 6744)), this.plus(this.app("octalDigit").withInterval(decl.sourceInterval(6745, 6755))).withInterval(decl.sourceInterval(6745, 6756))).withInterval(decl.sourceInterval(6741, 6756)))
    .define("octalDigit", [], this.range("0", "7").withInterval(decl.sourceInterval(6773, 6781)))
    .define("stringLiteral", [], this.alt(this.seq(this.prim("\"").withInterval(decl.sourceInterval(6878, 6882)), this.star(this.app("doubleStringCharacter").withInterval(decl.sourceInterval(6883, 6904))).withInterval(decl.sourceInterval(6883, 6905)), this.prim("\"").withInterval(decl.sourceInterval(6906, 6910))).withInterval(decl.sourceInterval(6878, 6910)), this.seq(this.prim("'").withInterval(decl.sourceInterval(6929, 6932)), this.star(this.app("singleStringCharacter").withInterval(decl.sourceInterval(6933, 6954))).withInterval(decl.sourceInterval(6933, 6955)), this.prim("'").withInterval(decl.sourceInterval(6956, 6959))).withInterval(decl.sourceInterval(6929, 6959))).withInterval(decl.sourceInterval(6878, 6959)))
    .define("doubleStringCharacter_nonEscaped", [], this.seq(this.not(this.alt(this.prim("\"").withInterval(decl.sourceInterval(6988, 6992)), this.prim("\\").withInterval(decl.sourceInterval(6995, 6999)), this.app("lineTerminator").withInterval(decl.sourceInterval(7002, 7016))).withInterval(decl.sourceInterval(6988, 7016))).withInterval(decl.sourceInterval(6986, 7017)), this.app("sourceCharacter").withInterval(decl.sourceInterval(7018, 7033))).withInterval(decl.sourceInterval(6986, 7033)))
    .define("doubleStringCharacter_escaped", [], this.seq(this.prim("\\").withInterval(decl.sourceInterval(7074, 7078)), this.app("escapeSequence").withInterval(decl.sourceInterval(7079, 7093))).withInterval(decl.sourceInterval(7074, 7093)))
    .define("doubleStringCharacter_lineContinuation", [], this.app("lineContinuation").withInterval(decl.sourceInterval(7159, 7175)))
    .define("doubleStringCharacter", [], this.alt(this.app("doubleStringCharacter_nonEscaped").withInterval(decl.sourceInterval(6986, 7033)), this.app("doubleStringCharacter_escaped").withInterval(decl.sourceInterval(7074, 7093)), this.app("doubleStringCharacter_lineContinuation").withInterval(decl.sourceInterval(7159, 7175))).withInterval(decl.sourceInterval(6986, 7226)))
    .define("singleStringCharacter_nonEscaped", [], this.seq(this.not(this.alt(this.prim("'").withInterval(decl.sourceInterval(7255, 7258)), this.prim("\\").withInterval(decl.sourceInterval(7261, 7265)), this.app("lineTerminator").withInterval(decl.sourceInterval(7268, 7282))).withInterval(decl.sourceInterval(7255, 7282))).withInterval(decl.sourceInterval(7253, 7283)), this.app("sourceCharacter").withInterval(decl.sourceInterval(7284, 7299))).withInterval(decl.sourceInterval(7253, 7299)))
    .define("singleStringCharacter_escaped", [], this.seq(this.prim("\\").withInterval(decl.sourceInterval(7340, 7344)), this.app("escapeSequence").withInterval(decl.sourceInterval(7345, 7359))).withInterval(decl.sourceInterval(7340, 7359)))
    .define("singleStringCharacter_lineContinuation", [], this.app("lineContinuation").withInterval(decl.sourceInterval(7424, 7440)))
    .define("singleStringCharacter", [], this.alt(this.app("singleStringCharacter_nonEscaped").withInterval(decl.sourceInterval(7253, 7299)), this.app("singleStringCharacter_escaped").withInterval(decl.sourceInterval(7340, 7359)), this.app("singleStringCharacter_lineContinuation").withInterval(decl.sourceInterval(7424, 7440))).withInterval(decl.sourceInterval(7253, 7490)))
    .define("lineContinuation", [], this.seq(this.prim("\\").withInterval(decl.sourceInterval(7512, 7516)), this.app("lineTerminatorSequence").withInterval(decl.sourceInterval(7517, 7539))).withInterval(decl.sourceInterval(7512, 7539)))
    .define("escapeSequence", [], this.alt(this.app("unicodeEscapeSequence").withInterval(decl.sourceInterval(7559, 7580)), this.app("hexEscapeSequence").withInterval(decl.sourceInterval(7600, 7617)), this.app("octalEscapeSequence").withInterval(decl.sourceInterval(7637, 7656)), this.app("characterEscapeSequence").withInterval(decl.sourceInterval(7676, 7699))).withInterval(decl.sourceInterval(7559, 7699)))
    .define("characterEscapeSequence", [], this.alt(this.app("singleEscapeCharacter").withInterval(decl.sourceInterval(7748, 7769)), this.app("nonEscapeCharacter").withInterval(decl.sourceInterval(7798, 7816))).withInterval(decl.sourceInterval(7748, 7816)))
    .define("singleEscapeCharacter", [], this.alt(this.prim("'").withInterval(decl.sourceInterval(7843, 7846)), this.prim("\"").withInterval(decl.sourceInterval(7921, 7925)), this.prim("\\").withInterval(decl.sourceInterval(7999, 8003)), this.prim("b").withInterval(decl.sourceInterval(8077, 8080)), this.prim("f").withInterval(decl.sourceInterval(8155, 8158)), this.prim("n").withInterval(decl.sourceInterval(8233, 8236)), this.prim("r").withInterval(decl.sourceInterval(8311, 8314)), this.prim("t").withInterval(decl.sourceInterval(8389, 8392)), this.prim("v").withInterval(decl.sourceInterval(8467, 8470))).withInterval(decl.sourceInterval(7843, 8470)))
    .define("nonEscapeCharacter", [], this.seq(this.not(this.alt(this.app("escapeCharacter").withInterval(decl.sourceInterval(8544, 8559)), this.app("lineTerminator").withInterval(decl.sourceInterval(8562, 8576))).withInterval(decl.sourceInterval(8544, 8576))).withInterval(decl.sourceInterval(8542, 8577)), this.app("sourceCharacter").withInterval(decl.sourceInterval(8578, 8593))).withInterval(decl.sourceInterval(8542, 8593)))
    .define("escapeCharacter", [], this.alt(this.app("singleEscapeCharacter").withInterval(decl.sourceInterval(8614, 8635)), this.app("decimalDigit").withInterval(decl.sourceInterval(8638, 8650)), this.prim("x").withInterval(decl.sourceInterval(8653, 8656)), this.prim("u").withInterval(decl.sourceInterval(8659, 8662))).withInterval(decl.sourceInterval(8614, 8662)))
    .define("octalEscapeSequence_whole", [], this.seq(this.app("zeroToThree").withInterval(decl.sourceInterval(8687, 8698)), this.app("octalDigit").withInterval(decl.sourceInterval(8699, 8709)), this.app("octalDigit").withInterval(decl.sourceInterval(8710, 8720))).withInterval(decl.sourceInterval(8687, 8720)))
    .define("octalEscapeSequence_eightTimesfourToSeven", [], this.seq(this.app("fourToSeven").withInterval(decl.sourceInterval(8757, 8768)), this.app("octalDigit").withInterval(decl.sourceInterval(8769, 8779))).withInterval(decl.sourceInterval(8757, 8779)))
    .define("octalEscapeSequence_eightTimesZeroToThree", [], this.seq(this.app("zeroToThree").withInterval(decl.sourceInterval(8843, 8854)), this.app("octalDigit").withInterval(decl.sourceInterval(8855, 8865)), this.not(this.app("decimalDigit").withInterval(decl.sourceInterval(8867, 8879))).withInterval(decl.sourceInterval(8866, 8879))).withInterval(decl.sourceInterval(8843, 8879)))
    .define("octalEscapeSequence_octal", [], this.seq(this.app("octalDigit").withInterval(decl.sourceInterval(8929, 8939)), this.not(this.app("decimalDigit").withInterval(decl.sourceInterval(8941, 8953))).withInterval(decl.sourceInterval(8940, 8953))).withInterval(decl.sourceInterval(8929, 8953)))
    .define("octalEscapeSequence", [], this.alt(this.app("octalEscapeSequence_whole").withInterval(decl.sourceInterval(8687, 8720)), this.app("octalEscapeSequence_eightTimesfourToSeven").withInterval(decl.sourceInterval(8757, 8779)), this.app("octalEscapeSequence_eightTimesZeroToThree").withInterval(decl.sourceInterval(8843, 8879)), this.app("octalEscapeSequence_octal").withInterval(decl.sourceInterval(8929, 8953))).withInterval(decl.sourceInterval(8687, 8974)))
    .define("hexEscapeSequence", [], this.seq(this.prim("x").withInterval(decl.sourceInterval(8997, 9000)), this.app("hexDigit").withInterval(decl.sourceInterval(9001, 9009)), this.app("hexDigit").withInterval(decl.sourceInterval(9010, 9018))).withInterval(decl.sourceInterval(8997, 9018)))
    .define("unicodeEscapeSequence", [], this.seq(this.prim("u").withInterval(decl.sourceInterval(9045, 9048)), this.app("hexDigit").withInterval(decl.sourceInterval(9049, 9057)), this.app("hexDigit").withInterval(decl.sourceInterval(9058, 9066)), this.app("hexDigit").withInterval(decl.sourceInterval(9067, 9075)), this.app("hexDigit").withInterval(decl.sourceInterval(9076, 9084))).withInterval(decl.sourceInterval(9045, 9084)))
    .define("zeroToThree", [], this.range("0", "3").withInterval(decl.sourceInterval(9102, 9110)))
    .define("fourToSeven", [], this.range("4", "7").withInterval(decl.sourceInterval(9127, 9135)))
    .define("regularExpressionLiteral", [], this.seq(this.prim("/").withInterval(decl.sourceInterval(9264, 9267)), this.app("regularExpressionBody").withInterval(decl.sourceInterval(9268, 9289)), this.prim("/").withInterval(decl.sourceInterval(9290, 9293)), this.app("regularExpressionFlags").withInterval(decl.sourceInterval(9294, 9316))).withInterval(decl.sourceInterval(9264, 9316)))
    .define("regularExpressionBody", [], this.seq(this.app("regularExpressionFirstChar").withInterval(decl.sourceInterval(9343, 9369)), this.star(this.app("regularExpressionChar").withInterval(decl.sourceInterval(9370, 9391))).withInterval(decl.sourceInterval(9370, 9392))).withInterval(decl.sourceInterval(9343, 9392)))
    .define("regularExpressionFirstChar", [], this.alt(this.seq(this.not(this.alt(this.prim("*").withInterval(decl.sourceInterval(9426, 9429)), this.prim("\\").withInterval(decl.sourceInterval(9432, 9436)), this.prim("/").withInterval(decl.sourceInterval(9439, 9442)), this.prim("[").withInterval(decl.sourceInterval(9445, 9448))).withInterval(decl.sourceInterval(9426, 9448))).withInterval(decl.sourceInterval(9424, 9449)), this.app("regularExpressionNonTerminator").withInterval(decl.sourceInterval(9450, 9480))).withInterval(decl.sourceInterval(9424, 9480)), this.app("regularExpressionBackslashSequence").withInterval(decl.sourceInterval(9512, 9546)), this.app("regularExpressionClass").withInterval(decl.sourceInterval(9578, 9600))).withInterval(decl.sourceInterval(9424, 9600)))
    .define("regularExpressionChar", [], this.alt(this.seq(this.not(this.alt(this.prim("\\").withInterval(decl.sourceInterval(9629, 9633)), this.prim("/").withInterval(decl.sourceInterval(9636, 9639)), this.prim("[").withInterval(decl.sourceInterval(9642, 9645))).withInterval(decl.sourceInterval(9629, 9645))).withInterval(decl.sourceInterval(9627, 9646)), this.app("regularExpressionNonTerminator").withInterval(decl.sourceInterval(9647, 9677))).withInterval(decl.sourceInterval(9627, 9677)), this.app("regularExpressionBackslashSequence").withInterval(decl.sourceInterval(9704, 9738)), this.app("regularExpressionClass").withInterval(decl.sourceInterval(9765, 9787))).withInterval(decl.sourceInterval(9627, 9787)))
    .define("regularExpressionBackslashSequence", [], this.seq(this.prim("\\").withInterval(decl.sourceInterval(9827, 9831)), this.app("regularExpressionNonTerminator").withInterval(decl.sourceInterval(9832, 9862))).withInterval(decl.sourceInterval(9827, 9862)))
    .define("regularExpressionNonTerminator", [], this.seq(this.not(this.app("lineTerminator").withInterval(decl.sourceInterval(9900, 9914))).withInterval(decl.sourceInterval(9898, 9915)), this.app("sourceCharacter").withInterval(decl.sourceInterval(9916, 9931))).withInterval(decl.sourceInterval(9898, 9931)))
    .define("regularExpressionClass", [], this.seq(this.prim("[").withInterval(decl.sourceInterval(9959, 9962)), this.star(this.app("regularExpressionClassChar").withInterval(decl.sourceInterval(9963, 9989))).withInterval(decl.sourceInterval(9963, 9990)), this.prim("]").withInterval(decl.sourceInterval(9991, 9994))).withInterval(decl.sourceInterval(9959, 9994)))
    .define("regularExpressionClassChar", [], this.alt(this.seq(this.not(this.alt(this.prim("]").withInterval(decl.sourceInterval(10028, 10031)), this.prim("\\").withInterval(decl.sourceInterval(10034, 10038))).withInterval(decl.sourceInterval(10028, 10038))).withInterval(decl.sourceInterval(10026, 10039)), this.app("regularExpressionNonTerminator").withInterval(decl.sourceInterval(10040, 10070))).withInterval(decl.sourceInterval(10026, 10070)), this.app("regularExpressionBackslashSequence").withInterval(decl.sourceInterval(10102, 10136))).withInterval(decl.sourceInterval(10026, 10136)))
    .define("regularExpressionFlags", [], this.star(this.app("identifierPart").withInterval(decl.sourceInterval(10164, 10178))).withInterval(decl.sourceInterval(10164, 10179)))
    .define("multiLineCommentNoNL", [], this.seq(this.prim("/*").withInterval(decl.sourceInterval(10270, 10274)), this.star(this.seq(this.not(this.alt(this.prim("*/").withInterval(decl.sourceInterval(10278, 10282)), this.app("lineTerminator").withInterval(decl.sourceInterval(10285, 10299))).withInterval(decl.sourceInterval(10278, 10299))).withInterval(decl.sourceInterval(10276, 10300)), this.app("sourceCharacter").withInterval(decl.sourceInterval(10301, 10316))).withInterval(decl.sourceInterval(10276, 10316))).withInterval(decl.sourceInterval(10275, 10318)), this.prim("*/").withInterval(decl.sourceInterval(10319, 10323))).withInterval(decl.sourceInterval(10270, 10323)))
    .define("spacesNoNL", [], this.star(this.alt(this.app("whitespace").withInterval(decl.sourceInterval(10442, 10452)), this.app("singleLineComment").withInterval(decl.sourceInterval(10455, 10472)), this.app("multiLineCommentNoNL").withInterval(decl.sourceInterval(10475, 10495))).withInterval(decl.sourceInterval(10442, 10495))).withInterval(decl.sourceInterval(10441, 10497)))
    .define("sc", [], this.alt(this.seq(this.star(this.app("space").withInterval(decl.sourceInterval(10869, 10874))).withInterval(decl.sourceInterval(10869, 10875)), this.alt(this.prim(";").withInterval(decl.sourceInterval(10877, 10880)), this.app("end").withInterval(decl.sourceInterval(10883, 10886))).withInterval(decl.sourceInterval(10877, 10886))).withInterval(decl.sourceInterval(10869, 10887)), this.seq(this.app("spacesNoNL").withInterval(decl.sourceInterval(10895, 10905)), this.alt(this.app("lineTerminator").withInterval(decl.sourceInterval(10907, 10921)), this.seq(this.not(this.app("multiLineCommentNoNL").withInterval(decl.sourceInterval(10925, 10945))).withInterval(decl.sourceInterval(10924, 10945)), this.app("multiLineComment").withInterval(decl.sourceInterval(10946, 10962))).withInterval(decl.sourceInterval(10924, 10962)), this.la(this.prim("}").withInterval(decl.sourceInterval(10966, 10969))).withInterval(decl.sourceInterval(10965, 10969))).withInterval(decl.sourceInterval(10907, 10969))).withInterval(decl.sourceInterval(10895, 10970))).withInterval(decl.sourceInterval(10869, 10970)))
    .define("break", [], this.seq(this.prim("break").withInterval(decl.sourceInterval(11033, 11040)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11042, 11056))).withInterval(decl.sourceInterval(11041, 11056))).withInterval(decl.sourceInterval(11033, 11056)))
    .define("do", [], this.seq(this.prim("do").withInterval(decl.sourceInterval(11064, 11068)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11070, 11084))).withInterval(decl.sourceInterval(11069, 11084))).withInterval(decl.sourceInterval(11064, 11084)))
    .define("instanceof", [], this.seq(this.prim("instanceof").withInterval(decl.sourceInterval(11100, 11112)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11114, 11128))).withInterval(decl.sourceInterval(11113, 11128))).withInterval(decl.sourceInterval(11100, 11128)))
    .define("typeof", [], this.seq(this.prim("typeof").withInterval(decl.sourceInterval(11140, 11148)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11150, 11164))).withInterval(decl.sourceInterval(11149, 11164))).withInterval(decl.sourceInterval(11140, 11164)))
    .define("case", [], this.seq(this.prim("case").withInterval(decl.sourceInterval(11174, 11180)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11182, 11196))).withInterval(decl.sourceInterval(11181, 11196))).withInterval(decl.sourceInterval(11174, 11196)))
    .define("else", [], this.seq(this.prim("else").withInterval(decl.sourceInterval(11206, 11212)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11214, 11228))).withInterval(decl.sourceInterval(11213, 11228))).withInterval(decl.sourceInterval(11206, 11228)))
    .define("new", [], this.seq(this.prim("new").withInterval(decl.sourceInterval(11237, 11242)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11244, 11258))).withInterval(decl.sourceInterval(11243, 11258))).withInterval(decl.sourceInterval(11237, 11258)))
    .define("var", [], this.seq(this.prim("var").withInterval(decl.sourceInterval(11267, 11272)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11274, 11288))).withInterval(decl.sourceInterval(11273, 11288))).withInterval(decl.sourceInterval(11267, 11288)))
    .define("catch", [], this.seq(this.prim("catch").withInterval(decl.sourceInterval(11299, 11306)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11308, 11322))).withInterval(decl.sourceInterval(11307, 11322))).withInterval(decl.sourceInterval(11299, 11322)))
    .define("finally", [], this.seq(this.prim("finally").withInterval(decl.sourceInterval(11335, 11344)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11346, 11360))).withInterval(decl.sourceInterval(11345, 11360))).withInterval(decl.sourceInterval(11335, 11360)))
    .define("return", [], this.seq(this.prim("return").withInterval(decl.sourceInterval(11372, 11380)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11382, 11396))).withInterval(decl.sourceInterval(11381, 11396))).withInterval(decl.sourceInterval(11372, 11396)))
    .define("void", [], this.seq(this.prim("void").withInterval(decl.sourceInterval(11406, 11412)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11414, 11428))).withInterval(decl.sourceInterval(11413, 11428))).withInterval(decl.sourceInterval(11406, 11428)))
    .define("continue", [], this.seq(this.prim("continue").withInterval(decl.sourceInterval(11442, 11452)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11454, 11468))).withInterval(decl.sourceInterval(11453, 11468))).withInterval(decl.sourceInterval(11442, 11468)))
    .define("for", [], this.seq(this.prim("for").withInterval(decl.sourceInterval(11477, 11482)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11484, 11498))).withInterval(decl.sourceInterval(11483, 11498))).withInterval(decl.sourceInterval(11477, 11498)))
    .define("switch", [], this.seq(this.prim("switch").withInterval(decl.sourceInterval(11510, 11518)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11520, 11534))).withInterval(decl.sourceInterval(11519, 11534))).withInterval(decl.sourceInterval(11510, 11534)))
    .define("while", [], this.seq(this.prim("while").withInterval(decl.sourceInterval(11545, 11552)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11554, 11568))).withInterval(decl.sourceInterval(11553, 11568))).withInterval(decl.sourceInterval(11545, 11568)))
    .define("debugger", [], this.seq(this.prim("debugger").withInterval(decl.sourceInterval(11582, 11592)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11594, 11608))).withInterval(decl.sourceInterval(11593, 11608))).withInterval(decl.sourceInterval(11582, 11608)))
    .define("function", [], this.seq(this.prim("function").withInterval(decl.sourceInterval(11622, 11632)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11634, 11648))).withInterval(decl.sourceInterval(11633, 11648))).withInterval(decl.sourceInterval(11622, 11648)))
    .define("this", [], this.seq(this.prim("this").withInterval(decl.sourceInterval(11658, 11664)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11666, 11680))).withInterval(decl.sourceInterval(11665, 11680))).withInterval(decl.sourceInterval(11658, 11680)))
    .define("with", [], this.seq(this.prim("with").withInterval(decl.sourceInterval(11690, 11696)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11698, 11712))).withInterval(decl.sourceInterval(11697, 11712))).withInterval(decl.sourceInterval(11690, 11712)))
    .define("default", [], this.seq(this.prim("default").withInterval(decl.sourceInterval(11725, 11734)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11736, 11750))).withInterval(decl.sourceInterval(11735, 11750))).withInterval(decl.sourceInterval(11725, 11750)))
    .define("if", [], this.seq(this.prim("if").withInterval(decl.sourceInterval(11758, 11762)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11764, 11778))).withInterval(decl.sourceInterval(11763, 11778))).withInterval(decl.sourceInterval(11758, 11778)))
    .define("throw", [], this.seq(this.prim("throw").withInterval(decl.sourceInterval(11789, 11796)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11798, 11812))).withInterval(decl.sourceInterval(11797, 11812))).withInterval(decl.sourceInterval(11789, 11812)))
    .define("delete", [], this.seq(this.prim("delete").withInterval(decl.sourceInterval(11824, 11832)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11834, 11848))).withInterval(decl.sourceInterval(11833, 11848))).withInterval(decl.sourceInterval(11824, 11848)))
    .define("in", [], this.seq(this.prim("in").withInterval(decl.sourceInterval(11856, 11860)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11862, 11876))).withInterval(decl.sourceInterval(11861, 11876))).withInterval(decl.sourceInterval(11856, 11876)))
    .define("try", [], this.seq(this.prim("try").withInterval(decl.sourceInterval(11885, 11890)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11892, 11906))).withInterval(decl.sourceInterval(11891, 11906))).withInterval(decl.sourceInterval(11885, 11906)))
    .define("get", [], this.seq(this.prim("get").withInterval(decl.sourceInterval(11915, 11920)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11922, 11936))).withInterval(decl.sourceInterval(11921, 11936))).withInterval(decl.sourceInterval(11915, 11936)))
    .define("set", [], this.seq(this.prim("set").withInterval(decl.sourceInterval(11945, 11950)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11952, 11966))).withInterval(decl.sourceInterval(11951, 11966))).withInterval(decl.sourceInterval(11945, 11966)))
    .define("class", [], this.seq(this.prim("class").withInterval(decl.sourceInterval(11977, 11984)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11986, 12000))).withInterval(decl.sourceInterval(11985, 12000))).withInterval(decl.sourceInterval(11977, 12000)))
    .define("enum", [], this.seq(this.prim("enum").withInterval(decl.sourceInterval(12010, 12016)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12018, 12032))).withInterval(decl.sourceInterval(12017, 12032))).withInterval(decl.sourceInterval(12010, 12032)))
    .define("extends", [], this.seq(this.prim("extends").withInterval(decl.sourceInterval(12045, 12054)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12056, 12070))).withInterval(decl.sourceInterval(12055, 12070))).withInterval(decl.sourceInterval(12045, 12070)))
    .define("super", [], this.seq(this.prim("super").withInterval(decl.sourceInterval(12081, 12088)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12090, 12104))).withInterval(decl.sourceInterval(12089, 12104))).withInterval(decl.sourceInterval(12081, 12104)))
    .define("const", [], this.seq(this.prim("const").withInterval(decl.sourceInterval(12115, 12122)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12124, 12138))).withInterval(decl.sourceInterval(12123, 12138))).withInterval(decl.sourceInterval(12115, 12138)))
    .define("export", [], this.seq(this.prim("export").withInterval(decl.sourceInterval(12150, 12158)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12160, 12174))).withInterval(decl.sourceInterval(12159, 12174))).withInterval(decl.sourceInterval(12150, 12174)))
    .define("import", [], this.seq(this.prim("import").withInterval(decl.sourceInterval(12186, 12194)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12196, 12210))).withInterval(decl.sourceInterval(12195, 12210))).withInterval(decl.sourceInterval(12186, 12210)))
    .define("implements", [], this.seq(this.prim("implements").withInterval(decl.sourceInterval(12226, 12238)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12240, 12254))).withInterval(decl.sourceInterval(12239, 12254))).withInterval(decl.sourceInterval(12226, 12254)))
    .define("let", [], this.seq(this.prim("let").withInterval(decl.sourceInterval(12263, 12268)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12270, 12284))).withInterval(decl.sourceInterval(12269, 12284))).withInterval(decl.sourceInterval(12263, 12284)))
    .define("private", [], this.seq(this.prim("private").withInterval(decl.sourceInterval(12297, 12306)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12308, 12322))).withInterval(decl.sourceInterval(12307, 12322))).withInterval(decl.sourceInterval(12297, 12322)))
    .define("public", [], this.seq(this.prim("public").withInterval(decl.sourceInterval(12334, 12342)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12344, 12358))).withInterval(decl.sourceInterval(12343, 12358))).withInterval(decl.sourceInterval(12334, 12358)))
    .define("interface", [], this.seq(this.prim("interface").withInterval(decl.sourceInterval(12373, 12384)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12386, 12400))).withInterval(decl.sourceInterval(12385, 12400))).withInterval(decl.sourceInterval(12373, 12400)))
    .define("package", [], this.seq(this.prim("package").withInterval(decl.sourceInterval(12413, 12422)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12424, 12438))).withInterval(decl.sourceInterval(12423, 12438))).withInterval(decl.sourceInterval(12413, 12438)))
    .define("protected", [], this.seq(this.prim("protected").withInterval(decl.sourceInterval(12453, 12464)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12466, 12480))).withInterval(decl.sourceInterval(12465, 12480))).withInterval(decl.sourceInterval(12453, 12480)))
    .define("static", [], this.seq(this.prim("static").withInterval(decl.sourceInterval(12492, 12500)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12502, 12516))).withInterval(decl.sourceInterval(12501, 12516))).withInterval(decl.sourceInterval(12492, 12516)))
    .define("yield", [], this.seq(this.prim("yield").withInterval(decl.sourceInterval(12527, 12534)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12536, 12550))).withInterval(decl.sourceInterval(12535, 12550))).withInterval(decl.sourceInterval(12527, 12550)))
    .define("noIn", [], this.not(this.app("in").withInterval(decl.sourceInterval(12591, 12593))).withInterval(decl.sourceInterval(12590, 12593)))
    .define("withIn", [], this.seq().withInterval(decl.sourceInterval(12686, 12686)))
    .define("PrimaryExpression_parenExpr", [], this.seq(this.prim("(").withInterval(decl.sourceInterval(13263, 13266)), this.app("Expression", [this.app("withIn").withInterval(decl.sourceInterval(13278, 13284))]).withInterval(decl.sourceInterval(13267, 13285)), this.prim(")").withInterval(decl.sourceInterval(13286, 13289))).withInterval(decl.sourceInterval(13263, 13289)))
    .define("PrimaryExpression", [], this.alt(this.app("this").withInterval(decl.sourceInterval(12706, 12710)), this.app("identifier").withInterval(decl.sourceInterval(12733, 12743)), this.app("literal").withInterval(decl.sourceInterval(12766, 12773)), this.app("ArrayLiteral").withInterval(decl.sourceInterval(13192, 13204)), this.app("ObjectLiteral").withInterval(decl.sourceInterval(13227, 13240)), this.app("PrimaryExpression_parenExpr").withInterval(decl.sourceInterval(13263, 13289))).withInterval(decl.sourceInterval(12706, 13303)))
    .define("ArrayLiteral", [], this.seq(this.prim("[").withInterval(decl.sourceInterval(13322, 13325)), this.app("ListOf", [this.app("AssignmentExpressionOrElision").withInterval(decl.sourceInterval(13333, 13362)), this.prim(",").withInterval(decl.sourceInterval(13364, 13367))]).withInterval(decl.sourceInterval(13326, 13368)), this.prim("]").withInterval(decl.sourceInterval(13369, 13372))).withInterval(decl.sourceInterval(13322, 13372)))
    .define("AssignmentExpressionOrElision_elision", [], this.seq().withInterval(decl.sourceInterval(13492, 13492)))
    .define("AssignmentExpressionOrElision", [], this.alt(this.app("AssignmentExpression", [this.app("withIn").withInterval(decl.sourceInterval(13428, 13434))]).withInterval(decl.sourceInterval(13407, 13435)), this.app("AssignmentExpressionOrElision_elision").withInterval(decl.sourceInterval(13492, 13492))).withInterval(decl.sourceInterval(13407, 13502)))
    .define("ObjectLiteral_noTrailingComma", [], this.seq(this.prim("{").withInterval(decl.sourceInterval(13522, 13525)), this.app("ListOf", [this.app("PropertyAssignment").withInterval(decl.sourceInterval(13533, 13551)), this.prim(",").withInterval(decl.sourceInterval(13553, 13556))]).withInterval(decl.sourceInterval(13526, 13557)), this.prim("}").withInterval(decl.sourceInterval(13558, 13561))).withInterval(decl.sourceInterval(13522, 13561)))
    .define("ObjectLiteral_trailingComma", [], this.seq(this.prim("{").withInterval(decl.sourceInterval(13612, 13615)), this.app("NonemptyListOf", [this.app("PropertyAssignment").withInterval(decl.sourceInterval(13631, 13649)), this.prim(",").withInterval(decl.sourceInterval(13651, 13654))]).withInterval(decl.sourceInterval(13616, 13655)), this.prim(",").withInterval(decl.sourceInterval(13656, 13659)), this.prim("}").withInterval(decl.sourceInterval(13660, 13663))).withInterval(decl.sourceInterval(13612, 13663)))
    .define("ObjectLiteral", [], this.alt(this.app("ObjectLiteral_noTrailingComma").withInterval(decl.sourceInterval(13522, 13561)), this.app("ObjectLiteral_trailingComma").withInterval(decl.sourceInterval(13612, 13663))).withInterval(decl.sourceInterval(13522, 13681)))
    .define("PropertyAssignment_getter", [], this.seq(this.app("get").withInterval(decl.sourceInterval(13706, 13709)), this.app("PropertyName").withInterval(decl.sourceInterval(13710, 13722)), this.prim("(").withInterval(decl.sourceInterval(13723, 13726)), this.prim(")").withInterval(decl.sourceInterval(13727, 13730)), this.prim("{").withInterval(decl.sourceInterval(13731, 13734)), this.app("FunctionBody").withInterval(decl.sourceInterval(13735, 13747)), this.prim("}").withInterval(decl.sourceInterval(13748, 13751))).withInterval(decl.sourceInterval(13706, 13751)))
    .define("PropertyAssignment_setter", [], this.seq(this.app("set").withInterval(decl.sourceInterval(13802, 13805)), this.app("PropertyName").withInterval(decl.sourceInterval(13806, 13818)), this.prim("(").withInterval(decl.sourceInterval(13819, 13822)), this.app("FormalParameter").withInterval(decl.sourceInterval(13823, 13838)), this.prim(")").withInterval(decl.sourceInterval(13839, 13842)), this.prim("{").withInterval(decl.sourceInterval(13843, 13846)), this.app("FunctionBody").withInterval(decl.sourceInterval(13847, 13859)), this.prim("}").withInterval(decl.sourceInterval(13860, 13863))).withInterval(decl.sourceInterval(13802, 13863)))
    .define("PropertyAssignment_simple", [], this.seq(this.app("PropertyName").withInterval(decl.sourceInterval(13898, 13910)), this.prim(":").withInterval(decl.sourceInterval(13911, 13914)), this.app("AssignmentExpression", [this.app("withIn").withInterval(decl.sourceInterval(13936, 13942))]).withInterval(decl.sourceInterval(13915, 13943))).withInterval(decl.sourceInterval(13898, 13943)))
    .define("PropertyAssignment", [], this.alt(this.app("PropertyAssignment_getter").withInterval(decl.sourceInterval(13706, 13751)), this.app("PropertyAssignment_setter").withInterval(decl.sourceInterval(13802, 13863)), this.app("PropertyAssignment_simple").withInterval(decl.sourceInterval(13898, 13943))).withInterval(decl.sourceInterval(13706, 13970)))
    .define("PropertyName", [], this.alt(this.app("identifierName").withInterval(decl.sourceInterval(13989, 14003)), this.app("stringLiteral").withInterval(decl.sourceInterval(14021, 14034)), this.app("numericLiteral").withInterval(decl.sourceInterval(14052, 14066))).withInterval(decl.sourceInterval(13989, 14066)))
    .define("MemberExpression_arrayRefExp", [], this.seq(this.app("MemberExpression").withInterval(decl.sourceInterval(14089, 14105)), this.prim("[").withInterval(decl.sourceInterval(14106, 14109)), this.app("Expression", [this.app("withIn").withInterval(decl.sourceInterval(14121, 14127))]).withInterval(decl.sourceInterval(14110, 14128)), this.prim("]").withInterval(decl.sourceInterval(14129, 14132))).withInterval(decl.sourceInterval(14089, 14132)))
    .define("MemberExpression_propRefExp", [], this.seq(this.app("MemberExpression").withInterval(decl.sourceInterval(14170, 14186)), this.prim(".").withInterval(decl.sourceInterval(14187, 14190)), this.app("identifierName").withInterval(decl.sourceInterval(14191, 14205))).withInterval(decl.sourceInterval(14170, 14205)))
    .define("MemberExpression_newExp", [], this.seq(this.app("new").withInterval(decl.sourceInterval(14242, 14245)), this.app("MemberExpression").withInterval(decl.sourceInterval(14246, 14262)), this.app("Arguments").withInterval(decl.sourceInterval(14263, 14272))).withInterval(decl.sourceInterval(14242, 14272)))
    .define("MemberExpression", [], this.alt(this.app("MemberExpression_arrayRefExp").withInterval(decl.sourceInterval(14089, 14132)), this.app("MemberExpression_propRefExp").withInterval(decl.sourceInterval(14170, 14205)), this.app("MemberExpression_newExp").withInterval(decl.sourceInterval(14242, 14272)), this.app("FunctionExpression").withInterval(decl.sourceInterval(14310, 14328)), this.app("PrimaryExpression").withInterval(decl.sourceInterval(14350, 14367))).withInterval(decl.sourceInterval(14089, 14367)))
    .define("NewExpression_newExp", [], this.seq(this.app("new").withInterval(decl.sourceInterval(14422, 14425)), this.app("NewExpression").withInterval(decl.sourceInterval(14426, 14439))).withInterval(decl.sourceInterval(14422, 14439)))
    .define("NewExpression", [], this.alt(this.app("MemberExpression").withInterval(decl.sourceInterval(14387, 14403)), this.app("NewExpression_newExp").withInterval(decl.sourceInterval(14422, 14439))).withInterval(decl.sourceInterval(14387, 14449)))
    .define("CallExpression_arrayRefExp", [], this.seq(this.app("CallExpression").withInterval(decl.sourceInterval(14470, 14484)), this.prim("[").withInterval(decl.sourceInterval(14485, 14488)), this.app("Expression", [this.app("withIn").withInterval(decl.sourceInterval(14500, 14506))]).withInterval(decl.sourceInterval(14489, 14507)), this.prim("]").withInterval(decl.sourceInterval(14508, 14511))).withInterval(decl.sourceInterval(14470, 14511)))
    .define("CallExpression_propRefExp", [], this.seq(this.app("CallExpression").withInterval(decl.sourceInterval(14547, 14561)), this.prim(".").withInterval(decl.sourceInterval(14562, 14565)), this.app("identifierName").withInterval(decl.sourceInterval(14566, 14580))).withInterval(decl.sourceInterval(14547, 14580)))
    .define("CallExpression_callExpExp", [], this.seq(this.app("CallExpression").withInterval(decl.sourceInterval(14615, 14629)), this.app("Arguments").withInterval(decl.sourceInterval(14630, 14639))).withInterval(decl.sourceInterval(14615, 14639)))
    .define("CallExpression_memberExpExp", [], this.seq(this.app("MemberExpression").withInterval(decl.sourceInterval(14683, 14699)), this.app("Arguments").withInterval(decl.sourceInterval(14700, 14709))).withInterval(decl.sourceInterval(14683, 14709)))
    .define("CallExpression", [], this.alt(this.app("CallExpression_arrayRefExp").withInterval(decl.sourceInterval(14470, 14511)), this.app("CallExpression_propRefExp").withInterval(decl.sourceInterval(14547, 14580)), this.app("CallExpression_callExpExp").withInterval(decl.sourceInterval(14615, 14639)), this.app("CallExpression_memberExpExp").withInterval(decl.sourceInterval(14683, 14709))).withInterval(decl.sourceInterval(14470, 14733)))
    .define("Arguments", [], this.seq(this.prim("(").withInterval(decl.sourceInterval(14749, 14752)), this.app("ListOf", [this.app("AssignmentExpression", [this.app("withIn").withInterval(decl.sourceInterval(14781, 14787))]).withInterval(decl.sourceInterval(14760, 14788)), this.prim(",").withInterval(decl.sourceInterval(14790, 14793))]).withInterval(decl.sourceInterval(14753, 14794)), this.prim(")").withInterval(decl.sourceInterval(14795, 14798))).withInterval(decl.sourceInterval(14749, 14798)))
    .define("LeftHandSideExpression", [], this.alt(this.app("CallExpression").withInterval(decl.sourceInterval(14827, 14841)), this.app("NewExpression").withInterval(decl.sourceInterval(14869, 14882))).withInterval(decl.sourceInterval(14827, 14882)))
    .define("PostfixExpression_postIncrement", [], this.seq(this.app("LeftHandSideExpression").withInterval(decl.sourceInterval(14906, 14928)), this.lex(this.seq(this.app("spacesNoNL").withInterval(decl.sourceInterval(14931, 14941)), this.prim("++").withInterval(decl.sourceInterval(14942, 14946))).withInterval(decl.sourceInterval(14931, 14946))).withInterval(decl.sourceInterval(14929, 14947))).withInterval(decl.sourceInterval(14906, 14947)))
    .define("PostfixExpression_postDecrement", [], this.seq(this.app("LeftHandSideExpression").withInterval(decl.sourceInterval(14988, 15010)), this.lex(this.seq(this.app("spacesNoNL").withInterval(decl.sourceInterval(15013, 15023)), this.prim("--").withInterval(decl.sourceInterval(15024, 15028))).withInterval(decl.sourceInterval(15013, 15028))).withInterval(decl.sourceInterval(15011, 15029))).withInterval(decl.sourceInterval(14988, 15029)))
    .define("PostfixExpression", [], this.alt(this.app("PostfixExpression_postIncrement").withInterval(decl.sourceInterval(14906, 14947)), this.app("PostfixExpression_postDecrement").withInterval(decl.sourceInterval(14988, 15029)), this.app("LeftHandSideExpression").withInterval(decl.sourceInterval(15070, 15092))).withInterval(decl.sourceInterval(14906, 15092)))
    .define("UnaryExpression_deleteExp", [], this.seq(this.app("delete").withInterval(decl.sourceInterval(15114, 15120)), this.app("UnaryExpression").withInterval(decl.sourceInterval(15121, 15136))).withInterval(decl.sourceInterval(15114, 15136)))
    .define("UnaryExpression_voidExp", [], this.seq(this.app("void").withInterval(decl.sourceInterval(15171, 15175)), this.app("UnaryExpression").withInterval(decl.sourceInterval(15178, 15193))).withInterval(decl.sourceInterval(15171, 15193)))
    .define("UnaryExpression_typeofExp", [], this.seq(this.app("typeof").withInterval(decl.sourceInterval(15226, 15232)), this.app("UnaryExpression").withInterval(decl.sourceInterval(15233, 15248))).withInterval(decl.sourceInterval(15226, 15248)))
    .define("UnaryExpression_preIncrement", [], this.seq(this.prim("++").withInterval(decl.sourceInterval(15283, 15287)), this.app("UnaryExpression").withInterval(decl.sourceInterval(15290, 15305))).withInterval(decl.sourceInterval(15283, 15305)))
    .define("UnaryExpression_preDecrement", [], this.seq(this.prim("--").withInterval(decl.sourceInterval(15343, 15347)), this.app("UnaryExpression").withInterval(decl.sourceInterval(15350, 15365))).withInterval(decl.sourceInterval(15343, 15365)))
    .define("UnaryExpression_unaryPlus", [], this.seq(this.prim("+").withInterval(decl.sourceInterval(15403, 15406)), this.app("UnaryExpression").withInterval(decl.sourceInterval(15410, 15425))).withInterval(decl.sourceInterval(15403, 15425)))
    .define("UnaryExpression_unaryMinus", [], this.seq(this.prim("-").withInterval(decl.sourceInterval(15460, 15463)), this.app("UnaryExpression").withInterval(decl.sourceInterval(15467, 15482))).withInterval(decl.sourceInterval(15460, 15482)))
    .define("UnaryExpression_bnot", [], this.seq(this.prim("~").withInterval(decl.sourceInterval(15518, 15521)), this.app("UnaryExpression").withInterval(decl.sourceInterval(15525, 15540))).withInterval(decl.sourceInterval(15518, 15540)))
    .define("UnaryExpression_lnot", [], this.seq(this.prim("!").withInterval(decl.sourceInterval(15570, 15573)), this.app("UnaryExpression").withInterval(decl.sourceInterval(15577, 15592))).withInterval(decl.sourceInterval(15570, 15592)))
    .define("UnaryExpression", [], this.alt(this.app("UnaryExpression_deleteExp").withInterval(decl.sourceInterval(15114, 15136)), this.app("UnaryExpression_voidExp").withInterval(decl.sourceInterval(15171, 15193)), this.app("UnaryExpression_typeofExp").withInterval(decl.sourceInterval(15226, 15248)), this.app("UnaryExpression_preIncrement").withInterval(decl.sourceInterval(15283, 15305)), this.app("UnaryExpression_preDecrement").withInterval(decl.sourceInterval(15343, 15365)), this.app("UnaryExpression_unaryPlus").withInterval(decl.sourceInterval(15403, 15425)), this.app("UnaryExpression_unaryMinus").withInterval(decl.sourceInterval(15460, 15482)), this.app("UnaryExpression_bnot").withInterval(decl.sourceInterval(15518, 15540)), this.app("UnaryExpression_lnot").withInterval(decl.sourceInterval(15570, 15592)), this.app("PostfixExpression").withInterval(decl.sourceInterval(15622, 15639))).withInterval(decl.sourceInterval(15114, 15639)))
    .define("MultiplicativeExpression_mul", [], this.seq(this.app("MultiplicativeExpression").withInterval(decl.sourceInterval(15670, 15694)), this.prim("*").withInterval(decl.sourceInterval(15695, 15698)), this.app("UnaryExpression").withInterval(decl.sourceInterval(15699, 15714))).withInterval(decl.sourceInterval(15670, 15714)))
    .define("MultiplicativeExpression_div", [], this.seq(this.app("MultiplicativeExpression").withInterval(decl.sourceInterval(15751, 15775)), this.prim("/").withInterval(decl.sourceInterval(15776, 15779)), this.app("UnaryExpression").withInterval(decl.sourceInterval(15780, 15795))).withInterval(decl.sourceInterval(15751, 15795)))
    .define("MultiplicativeExpression_mod", [], this.seq(this.app("MultiplicativeExpression").withInterval(decl.sourceInterval(15832, 15856)), this.prim("%").withInterval(decl.sourceInterval(15857, 15860)), this.app("UnaryExpression").withInterval(decl.sourceInterval(15861, 15876))).withInterval(decl.sourceInterval(15832, 15876)))
    .define("MultiplicativeExpression", [], this.alt(this.app("MultiplicativeExpression_mul").withInterval(decl.sourceInterval(15670, 15714)), this.app("MultiplicativeExpression_div").withInterval(decl.sourceInterval(15751, 15795)), this.app("MultiplicativeExpression_mod").withInterval(decl.sourceInterval(15832, 15876)), this.app("UnaryExpression").withInterval(decl.sourceInterval(15913, 15928))).withInterval(decl.sourceInterval(15670, 15928)))
    .define("AdditiveExpression_add", [], this.seq(this.app("AdditiveExpression").withInterval(decl.sourceInterval(15953, 15971)), this.prim("+").withInterval(decl.sourceInterval(15972, 15975)), this.app("MultiplicativeExpression").withInterval(decl.sourceInterval(15976, 16000))).withInterval(decl.sourceInterval(15953, 16000)))
    .define("AdditiveExpression_sub", [], this.seq(this.app("AdditiveExpression").withInterval(decl.sourceInterval(16031, 16049)), this.prim("-").withInterval(decl.sourceInterval(16050, 16053)), this.app("MultiplicativeExpression").withInterval(decl.sourceInterval(16054, 16078))).withInterval(decl.sourceInterval(16031, 16078)))
    .define("AdditiveExpression", [], this.alt(this.app("AdditiveExpression_add").withInterval(decl.sourceInterval(15953, 16000)), this.app("AdditiveExpression_sub").withInterval(decl.sourceInterval(16031, 16078)), this.app("MultiplicativeExpression").withInterval(decl.sourceInterval(16109, 16133))).withInterval(decl.sourceInterval(15953, 16133)))
    .define("ShiftExpression_lsl", [], this.seq(this.app("ShiftExpression").withInterval(decl.sourceInterval(16155, 16170)), this.prim("<<").withInterval(decl.sourceInterval(16171, 16175)), this.app("AdditiveExpression").withInterval(decl.sourceInterval(16176, 16194))).withInterval(decl.sourceInterval(16155, 16194)))
    .define("ShiftExpression_lsr", [], this.seq(this.app("ShiftExpression").withInterval(decl.sourceInterval(16223, 16238)), this.prim(">>>").withInterval(decl.sourceInterval(16239, 16244)), this.app("AdditiveExpression").withInterval(decl.sourceInterval(16245, 16263))).withInterval(decl.sourceInterval(16223, 16263)))
    .define("ShiftExpression_asr", [], this.seq(this.app("ShiftExpression").withInterval(decl.sourceInterval(16291, 16306)), this.prim(">>").withInterval(decl.sourceInterval(16307, 16311)), this.app("AdditiveExpression").withInterval(decl.sourceInterval(16312, 16330))).withInterval(decl.sourceInterval(16291, 16330)))
    .define("ShiftExpression", [], this.alt(this.app("ShiftExpression_lsl").withInterval(decl.sourceInterval(16155, 16194)), this.app("ShiftExpression_lsr").withInterval(decl.sourceInterval(16223, 16263)), this.app("ShiftExpression_asr").withInterval(decl.sourceInterval(16291, 16330)), this.app("AdditiveExpression").withInterval(decl.sourceInterval(16359, 16377))).withInterval(decl.sourceInterval(16155, 16377)))
    .define("RelationalExpression_lt", ["guardIn"], this.seq(this.app("RelationalExpression", [this.param(0)]).withInterval(decl.sourceInterval(16417, 16446)), this.prim("<").withInterval(decl.sourceInterval(16447, 16450)), this.app("ShiftExpression").withInterval(decl.sourceInterval(16451, 16466))).withInterval(decl.sourceInterval(16417, 16466)))
    .define("RelationalExpression_gt", ["guardIn"], this.seq(this.app("RelationalExpression", [this.param(0)]).withInterval(decl.sourceInterval(16489, 16518)), this.prim(">").withInterval(decl.sourceInterval(16519, 16522)), this.app("ShiftExpression").withInterval(decl.sourceInterval(16523, 16538))).withInterval(decl.sourceInterval(16489, 16538)))
    .define("RelationalExpression_le", ["guardIn"], this.seq(this.app("RelationalExpression", [this.param(0)]).withInterval(decl.sourceInterval(16561, 16590)), this.prim("<=").withInterval(decl.sourceInterval(16591, 16595)), this.app("ShiftExpression").withInterval(decl.sourceInterval(16596, 16611))).withInterval(decl.sourceInterval(16561, 16611)))
    .define("RelationalExpression_ge", ["guardIn"], this.seq(this.app("RelationalExpression", [this.param(0)]).withInterval(decl.sourceInterval(16633, 16662)), this.prim(">=").withInterval(decl.sourceInterval(16663, 16667)), this.app("ShiftExpression").withInterval(decl.sourceInterval(16668, 16683))).withInterval(decl.sourceInterval(16633, 16683)))
    .define("RelationalExpression_instanceOfExp", ["guardIn"], this.seq(this.app("RelationalExpression", [this.param(0)]).withInterval(decl.sourceInterval(16705, 16734)), this.prim("instanceof").withInterval(decl.sourceInterval(16735, 16747)), this.app("ShiftExpression").withInterval(decl.sourceInterval(16748, 16763))).withInterval(decl.sourceInterval(16705, 16763)))
    .define("RelationalExpression_inExp", ["guardIn"], this.seq(this.app("RelationalExpression", [this.param(0)]).withInterval(decl.sourceInterval(16788, 16817)), this.param(0), this.prim("in").withInterval(decl.sourceInterval(16826, 16830)), this.app("ShiftExpression").withInterval(decl.sourceInterval(16831, 16846))).withInterval(decl.sourceInterval(16788, 16846)))
    .define("RelationalExpression", ["guardIn"], this.alt(this.app("RelationalExpression_lt", [this.param(0)]).withInterval(decl.sourceInterval(16417, 16466)), this.app("RelationalExpression_gt", [this.param(0)]).withInterval(decl.sourceInterval(16489, 16538)), this.app("RelationalExpression_le", [this.param(0)]).withInterval(decl.sourceInterval(16561, 16611)), this.app("RelationalExpression_ge", [this.param(0)]).withInterval(decl.sourceInterval(16633, 16683)), this.app("RelationalExpression_instanceOfExp", [this.param(0)]).withInterval(decl.sourceInterval(16705, 16763)), this.app("RelationalExpression_inExp", [this.param(0)]).withInterval(decl.sourceInterval(16788, 16846)), this.app("ShiftExpression").withInterval(decl.sourceInterval(16863, 16878))).withInterval(decl.sourceInterval(16417, 16878)))
    .define("EqualityExpression_equal", ["guardIn"], this.seq(this.app("EqualityExpression", [this.param(0)]).withInterval(decl.sourceInterval(16916, 16943)), this.prim("==").withInterval(decl.sourceInterval(16944, 16948)), this.app("RelationalExpression", [this.param(0)]).withInterval(decl.sourceInterval(16949, 16978))).withInterval(decl.sourceInterval(16916, 16978)))
    .define("EqualityExpression_notEqual", ["guardIn"], this.seq(this.app("EqualityExpression", [this.param(0)]).withInterval(decl.sourceInterval(16995, 17022)), this.prim("!=").withInterval(decl.sourceInterval(17023, 17027)), this.app("RelationalExpression", [this.param(0)]).withInterval(decl.sourceInterval(17028, 17057))).withInterval(decl.sourceInterval(16995, 17057)))
    .define("EqualityExpression_eq", ["guardIn"], this.seq(this.app("EqualityExpression", [this.param(0)]).withInterval(decl.sourceInterval(17077, 17104)), this.prim("===").withInterval(decl.sourceInterval(17105, 17110)), this.app("RelationalExpression", [this.param(0)]).withInterval(decl.sourceInterval(17111, 17140))).withInterval(decl.sourceInterval(17077, 17140)))
    .define("EqualityExpression_notEq", ["guardIn"], this.seq(this.app("EqualityExpression", [this.param(0)]).withInterval(decl.sourceInterval(17153, 17180)), this.prim("!==").withInterval(decl.sourceInterval(17181, 17186)), this.app("RelationalExpression", [this.param(0)]).withInterval(decl.sourceInterval(17187, 17216))).withInterval(decl.sourceInterval(17153, 17216)))
    .define("EqualityExpression", ["guardIn"], this.alt(this.app("EqualityExpression_equal", [this.param(0)]).withInterval(decl.sourceInterval(16916, 16978)), this.app("EqualityExpression_notEqual", [this.param(0)]).withInterval(decl.sourceInterval(16995, 17057)), this.app("EqualityExpression_eq", [this.param(0)]).withInterval(decl.sourceInterval(17077, 17140)), this.app("EqualityExpression_notEq", [this.param(0)]).withInterval(decl.sourceInterval(17153, 17216)), this.app("RelationalExpression", [this.param(0)]).withInterval(decl.sourceInterval(17232, 17261))).withInterval(decl.sourceInterval(16916, 17261)))
    .define("BitwiseANDExpression_band", ["guardIn"], this.seq(this.app("BitwiseANDExpression", [this.param(0)]).withInterval(decl.sourceInterval(17301, 17330)), this.prim("&").withInterval(decl.sourceInterval(17331, 17334)), this.app("EqualityExpression", [this.param(0)]).withInterval(decl.sourceInterval(17335, 17362))).withInterval(decl.sourceInterval(17301, 17362)))
    .define("BitwiseANDExpression", ["guardIn"], this.alt(this.app("BitwiseANDExpression_band", [this.param(0)]).withInterval(decl.sourceInterval(17301, 17362)), this.app("EqualityExpression", [this.param(0)]).withInterval(decl.sourceInterval(17377, 17404))).withInterval(decl.sourceInterval(17301, 17404)))
    .define("BitwiseXORExpression_bxor", ["guardIn"], this.seq(this.app("BitwiseXORExpression", [this.param(0)]).withInterval(decl.sourceInterval(17444, 17473)), this.prim("^").withInterval(decl.sourceInterval(17474, 17477)), this.app("BitwiseANDExpression", [this.param(0)]).withInterval(decl.sourceInterval(17478, 17507))).withInterval(decl.sourceInterval(17444, 17507)))
    .define("BitwiseXORExpression", ["guardIn"], this.alt(this.app("BitwiseXORExpression_bxor", [this.param(0)]).withInterval(decl.sourceInterval(17444, 17507)), this.app("BitwiseANDExpression", [this.param(0)]).withInterval(decl.sourceInterval(17522, 17551))).withInterval(decl.sourceInterval(17444, 17551)))
    .define("BitwiseORExpression_bor", ["guardIn"], this.seq(this.app("BitwiseORExpression", [this.param(0)]).withInterval(decl.sourceInterval(17590, 17618)), this.prim("|").withInterval(decl.sourceInterval(17619, 17622)), this.app("BitwiseXORExpression", [this.param(0)]).withInterval(decl.sourceInterval(17623, 17652))).withInterval(decl.sourceInterval(17590, 17652)))
    .define("BitwiseORExpression", ["guardIn"], this.alt(this.app("BitwiseORExpression_bor", [this.param(0)]).withInterval(decl.sourceInterval(17590, 17652)), this.app("BitwiseXORExpression", [this.param(0)]).withInterval(decl.sourceInterval(17666, 17695))).withInterval(decl.sourceInterval(17590, 17695)))
    .define("LogicalANDExpression_land", ["guardIn"], this.seq(this.app("LogicalANDExpression", [this.param(0)]).withInterval(decl.sourceInterval(17735, 17764)), this.prim("&&").withInterval(decl.sourceInterval(17765, 17769)), this.app("BitwiseORExpression", [this.param(0)]).withInterval(decl.sourceInterval(17770, 17798))).withInterval(decl.sourceInterval(17735, 17798)))
    .define("LogicalANDExpression", ["guardIn"], this.alt(this.app("LogicalANDExpression_land", [this.param(0)]).withInterval(decl.sourceInterval(17735, 17798)), this.app("BitwiseORExpression", [this.param(0)]).withInterval(decl.sourceInterval(17813, 17841))).withInterval(decl.sourceInterval(17735, 17841)))
    .define("LogicalORExpression_lor", ["guardIn"], this.seq(this.app("LogicalORExpression", [this.param(0)]).withInterval(decl.sourceInterval(17880, 17908)), this.prim("||").withInterval(decl.sourceInterval(17909, 17913)), this.app("LogicalANDExpression", [this.param(0)]).withInterval(decl.sourceInterval(17914, 17943))).withInterval(decl.sourceInterval(17880, 17943)))
    .define("LogicalORExpression", ["guardIn"], this.alt(this.app("LogicalORExpression_lor", [this.param(0)]).withInterval(decl.sourceInterval(17880, 17943)), this.app("LogicalANDExpression", [this.param(0)]).withInterval(decl.sourceInterval(17957, 17986))).withInterval(decl.sourceInterval(17880, 17986)))
    .define("ConditionalExpression_conditional", ["guardIn"], this.seq(this.app("LogicalORExpression", [this.param(0)]).withInterval(decl.sourceInterval(18027, 18055)), this.prim("?").withInterval(decl.sourceInterval(18056, 18059)), this.app("AssignmentExpression", [this.app("withIn").withInterval(decl.sourceInterval(18081, 18087))]).withInterval(decl.sourceInterval(18060, 18088)), this.prim(":").withInterval(decl.sourceInterval(18089, 18092)), this.app("AssignmentExpression", [this.param(0)]).withInterval(decl.sourceInterval(18093, 18122))).withInterval(decl.sourceInterval(18027, 18122)))
    .define("ConditionalExpression", ["guardIn"], this.alt(this.app("ConditionalExpression_conditional", [this.param(0)]).withInterval(decl.sourceInterval(18027, 18122)), this.app("LogicalORExpression", [this.param(0)]).withInterval(decl.sourceInterval(18144, 18172))).withInterval(decl.sourceInterval(18027, 18172)))
    .define("AssignmentExpression_assignment", ["guardIn"], this.seq(this.app("LeftHandSideExpression").withInterval(decl.sourceInterval(18212, 18234)), this.app("AssignmentOperator").withInterval(decl.sourceInterval(18235, 18253)), this.app("AssignmentExpression", [this.param(0)]).withInterval(decl.sourceInterval(18254, 18283))).withInterval(decl.sourceInterval(18212, 18283)))
    .define("AssignmentExpression", ["guardIn"], this.alt(this.app("AssignmentExpression_assignment", [this.param(0)]).withInterval(decl.sourceInterval(18212, 18283)), this.app("ConditionalExpression", [this.param(0)]).withInterval(decl.sourceInterval(18304, 18334))).withInterval(decl.sourceInterval(18212, 18334)))
    .define("Expression_commaExp", ["guardIn"], this.seq(this.app("Expression", [this.param(0)]).withInterval(decl.sourceInterval(18380, 18399)), this.prim(",").withInterval(decl.sourceInterval(18400, 18403)), this.app("AssignmentExpression", [this.param(0)]).withInterval(decl.sourceInterval(18404, 18433))).withInterval(decl.sourceInterval(18380, 18433)))
    .define("Expression", ["guardIn"], this.alt(this.app("Expression_commaExp", [this.param(0)]).withInterval(decl.sourceInterval(18380, 18433)), this.app("AssignmentExpression", [this.param(0)]).withInterval(decl.sourceInterval(18452, 18481))).withInterval(decl.sourceInterval(18380, 18481)), "an expression")
    .define("AssignmentOperator", [], this.alt(this.prim("=").withInterval(decl.sourceInterval(18506, 18509)), this.prim(">>>=").withInterval(decl.sourceInterval(18512, 18518)), this.prim("<<=").withInterval(decl.sourceInterval(18521, 18526)), this.prim(">>=").withInterval(decl.sourceInterval(18529, 18534)), this.prim("*=").withInterval(decl.sourceInterval(18558, 18562)), this.prim("/=").withInterval(decl.sourceInterval(18565, 18569)), this.prim("%=").withInterval(decl.sourceInterval(18572, 18576)), this.prim("+=").withInterval(decl.sourceInterval(18579, 18583)), this.prim("-=").withInterval(decl.sourceInterval(18586, 18590)), this.prim("&=").withInterval(decl.sourceInterval(18593, 18597)), this.prim("^=").withInterval(decl.sourceInterval(18600, 18604)), this.prim("|=").withInterval(decl.sourceInterval(18607, 18611))).withInterval(decl.sourceInterval(18506, 18611)))
    .define("Statement", [], this.alt(this.app("Block").withInterval(decl.sourceInterval(18722, 18727)), this.app("VariableStatement").withInterval(decl.sourceInterval(18734, 18751)), this.app("EmptyStatement").withInterval(decl.sourceInterval(18758, 18772)), this.app("ExpressionStatement").withInterval(decl.sourceInterval(18779, 18798)), this.app("IfStatement").withInterval(decl.sourceInterval(18805, 18816)), this.app("IterationStatement").withInterval(decl.sourceInterval(18823, 18841)), this.app("ContinueStatement").withInterval(decl.sourceInterval(18848, 18865)), this.app("BreakStatement").withInterval(decl.sourceInterval(18872, 18886)), this.app("ReturnStatement").withInterval(decl.sourceInterval(18893, 18908)), this.app("WithStatement").withInterval(decl.sourceInterval(18915, 18928)), this.app("LabelledStatement").withInterval(decl.sourceInterval(18935, 18952)), this.app("SwitchStatement").withInterval(decl.sourceInterval(18959, 18974)), this.app("ThrowStatement").withInterval(decl.sourceInterval(18981, 18995)), this.app("TryStatement").withInterval(decl.sourceInterval(19002, 19014)), this.app("DebuggerStatement").withInterval(decl.sourceInterval(19021, 19038))).withInterval(decl.sourceInterval(18722, 19038)), "a statement")
    .define("Block", [], this.seq(this.prim("{").withInterval(decl.sourceInterval(19050, 19053)), this.app("StatementList").withInterval(decl.sourceInterval(19054, 19067)), this.prim("}").withInterval(decl.sourceInterval(19068, 19071))).withInterval(decl.sourceInterval(19050, 19071)))
    .define("StatementList", [], this.star(this.app("Statement").withInterval(decl.sourceInterval(19091, 19100))).withInterval(decl.sourceInterval(19091, 19101)))
    .define("VariableStatement", [], this.seq(this.app("var").withInterval(decl.sourceInterval(19125, 19128)), this.app("VariableDeclarationList", [this.app("withIn").withInterval(decl.sourceInterval(19153, 19159))]).withInterval(decl.sourceInterval(19129, 19160)), this.lex(this.app("sc").withInterval(decl.sourceInterval(19163, 19165))).withInterval(decl.sourceInterval(19161, 19166))).withInterval(decl.sourceInterval(19125, 19166)))
    .define("VariableDeclarationList", ["guardIn"], this.app("NonemptyListOf", [this.app("VariableDeclaration", [this.param(0)]).withInterval(decl.sourceInterval(19220, 19248)), this.prim(",").withInterval(decl.sourceInterval(19250, 19253))]).withInterval(decl.sourceInterval(19205, 19254)))
    .define("VariableDeclaration", ["guardIn"], this.seq(this.app("identifier").withInterval(decl.sourceInterval(19289, 19299)), this.opt(this.app("Initialiser", [this.param(0)]).withInterval(decl.sourceInterval(19300, 19320))).withInterval(decl.sourceInterval(19300, 19321))).withInterval(decl.sourceInterval(19289, 19321)))
    .define("Initialiser", ["guardIn"], this.seq(this.prim("=").withInterval(decl.sourceInterval(19348, 19351)), this.app("AssignmentExpression", [this.param(0)]).withInterval(decl.sourceInterval(19352, 19381))).withInterval(decl.sourceInterval(19348, 19381)))
    .define("EmptyStatement", [], this.prim(";").withInterval(decl.sourceInterval(19402, 19405)))
    .define("ExpressionStatement", [], this.seq(this.not(this.alt(this.prim("{").withInterval(decl.sourceInterval(19471, 19474)), this.app("function").withInterval(decl.sourceInterval(19477, 19485))).withInterval(decl.sourceInterval(19471, 19485))).withInterval(decl.sourceInterval(19469, 19486)), this.app("Expression", [this.app("withIn").withInterval(decl.sourceInterval(19498, 19504))]).withInterval(decl.sourceInterval(19487, 19505)), this.lex(this.app("sc").withInterval(decl.sourceInterval(19508, 19510))).withInterval(decl.sourceInterval(19506, 19511))).withInterval(decl.sourceInterval(19469, 19511)))
    .define("IfStatement", [], this.seq(this.app("if").withInterval(decl.sourceInterval(19529, 19531)), this.prim("(").withInterval(decl.sourceInterval(19532, 19535)), this.app("Expression", [this.app("withIn").withInterval(decl.sourceInterval(19547, 19553))]).withInterval(decl.sourceInterval(19536, 19554)), this.prim(")").withInterval(decl.sourceInterval(19555, 19558)), this.app("Statement").withInterval(decl.sourceInterval(19559, 19568)), this.opt(this.seq(this.app("else").withInterval(decl.sourceInterval(19570, 19574)), this.app("Statement").withInterval(decl.sourceInterval(19575, 19584))).withInterval(decl.sourceInterval(19570, 19584))).withInterval(decl.sourceInterval(19569, 19586))).withInterval(decl.sourceInterval(19529, 19586)))
    .define("IterationStatement_doWhile", [], this.seq(this.app("do").withInterval(decl.sourceInterval(19611, 19613)), this.app("Statement").withInterval(decl.sourceInterval(19614, 19623)), this.app("while").withInterval(decl.sourceInterval(19624, 19629)), this.prim("(").withInterval(decl.sourceInterval(19630, 19633)), this.app("Expression", [this.app("withIn").withInterval(decl.sourceInterval(19645, 19651))]).withInterval(decl.sourceInterval(19634, 19652)), this.prim(")").withInterval(decl.sourceInterval(19653, 19656)), this.lex(this.app("sc").withInterval(decl.sourceInterval(19659, 19661))).withInterval(decl.sourceInterval(19657, 19662))).withInterval(decl.sourceInterval(19611, 19662)))
    .define("IterationStatement_whileDo", [], this.seq(this.app("while").withInterval(decl.sourceInterval(19698, 19703)), this.prim("(").withInterval(decl.sourceInterval(19704, 19707)), this.app("Expression", [this.app("withIn").withInterval(decl.sourceInterval(19719, 19725))]).withInterval(decl.sourceInterval(19708, 19726)), this.prim(")").withInterval(decl.sourceInterval(19727, 19730)), this.app("Statement").withInterval(decl.sourceInterval(19731, 19740))).withInterval(decl.sourceInterval(19698, 19740)))
    .define("IterationStatement_for3", [], this.seq(this.app("for").withInterval(decl.sourceInterval(19785, 19788)), this.prim("(").withInterval(decl.sourceInterval(19789, 19792)), this.opt(this.app("Expression", [this.app("noIn").withInterval(decl.sourceInterval(19804, 19808))]).withInterval(decl.sourceInterval(19793, 19809))).withInterval(decl.sourceInterval(19793, 19810)), this.prim(";").withInterval(decl.sourceInterval(19811, 19814)), this.opt(this.app("Expression", [this.app("withIn").withInterval(decl.sourceInterval(19859, 19865))]).withInterval(decl.sourceInterval(19848, 19866))).withInterval(decl.sourceInterval(19848, 19867)), this.prim(";").withInterval(decl.sourceInterval(19868, 19871)), this.opt(this.app("Expression", [this.app("withIn").withInterval(decl.sourceInterval(19916, 19922))]).withInterval(decl.sourceInterval(19905, 19923))).withInterval(decl.sourceInterval(19905, 19924)), this.prim(")").withInterval(decl.sourceInterval(19925, 19928)), this.app("Statement").withInterval(decl.sourceInterval(19929, 19938))).withInterval(decl.sourceInterval(19785, 19938)))
    .define("IterationStatement_for3var", [], this.seq(this.app("for").withInterval(decl.sourceInterval(19979, 19982)), this.prim("(").withInterval(decl.sourceInterval(19983, 19986)), this.app("var").withInterval(decl.sourceInterval(19987, 19990)), this.app("VariableDeclarationList", [this.app("noIn").withInterval(decl.sourceInterval(20015, 20019))]).withInterval(decl.sourceInterval(19991, 20020)), this.prim(";").withInterval(decl.sourceInterval(20021, 20024)), this.opt(this.app("Expression", [this.app("withIn").withInterval(decl.sourceInterval(20069, 20075))]).withInterval(decl.sourceInterval(20058, 20076))).withInterval(decl.sourceInterval(20058, 20077)), this.prim(";").withInterval(decl.sourceInterval(20078, 20081)), this.opt(this.app("Expression", [this.app("withIn").withInterval(decl.sourceInterval(20126, 20132))]).withInterval(decl.sourceInterval(20115, 20133))).withInterval(decl.sourceInterval(20115, 20134)), this.prim(")").withInterval(decl.sourceInterval(20135, 20138)), this.app("Statement").withInterval(decl.sourceInterval(20139, 20148))).withInterval(decl.sourceInterval(19979, 20148)))
    .define("IterationStatement_forIn", [], this.seq(this.app("for").withInterval(decl.sourceInterval(20192, 20195)), this.prim("(").withInterval(decl.sourceInterval(20196, 20199)), this.app("LeftHandSideExpression").withInterval(decl.sourceInterval(20200, 20222)), this.app("in").withInterval(decl.sourceInterval(20223, 20225)), this.app("Expression", [this.app("withIn").withInterval(decl.sourceInterval(20270, 20276))]).withInterval(decl.sourceInterval(20259, 20277)), this.prim(")").withInterval(decl.sourceInterval(20278, 20281)), this.app("Statement").withInterval(decl.sourceInterval(20282, 20291))).withInterval(decl.sourceInterval(20192, 20291)))
    .define("IterationStatement_forInVar", [], this.seq(this.app("for").withInterval(decl.sourceInterval(20334, 20337)), this.prim("(").withInterval(decl.sourceInterval(20338, 20341)), this.app("var").withInterval(decl.sourceInterval(20342, 20345)), this.app("VariableDeclaration", [this.app("noIn").withInterval(decl.sourceInterval(20366, 20370))]).withInterval(decl.sourceInterval(20346, 20371)), this.app("in").withInterval(decl.sourceInterval(20372, 20374)), this.app("Expression", [this.app("withIn").withInterval(decl.sourceInterval(20419, 20425))]).withInterval(decl.sourceInterval(20408, 20426)), this.prim(")").withInterval(decl.sourceInterval(20427, 20430)), this.app("Statement").withInterval(decl.sourceInterval(20431, 20440))).withInterval(decl.sourceInterval(20334, 20440)))
    .define("IterationStatement", [], this.alt(this.app("IterationStatement_doWhile").withInterval(decl.sourceInterval(19611, 19662)), this.app("IterationStatement_whileDo").withInterval(decl.sourceInterval(19698, 19740)), this.app("IterationStatement_for3").withInterval(decl.sourceInterval(19785, 19938)), this.app("IterationStatement_for3var").withInterval(decl.sourceInterval(19979, 20148)), this.app("IterationStatement_forIn").withInterval(decl.sourceInterval(20192, 20291)), this.app("IterationStatement_forInVar").withInterval(decl.sourceInterval(20334, 20440))).withInterval(decl.sourceInterval(19611, 20462)))
    .define("ContinueStatement", [], this.seq(this.app("continue").withInterval(decl.sourceInterval(20486, 20494)), this.lex(this.seq(this.opt(this.seq(this.app("spacesNoNL").withInterval(decl.sourceInterval(20498, 20508)), this.app("identifier").withInterval(decl.sourceInterval(20509, 20519))).withInterval(decl.sourceInterval(20498, 20519))).withInterval(decl.sourceInterval(20497, 20521)), this.app("sc").withInterval(decl.sourceInterval(20522, 20524))).withInterval(decl.sourceInterval(20497, 20524))).withInterval(decl.sourceInterval(20495, 20525))).withInterval(decl.sourceInterval(20486, 20525)))
    .define("BreakStatement", [], this.seq(this.app("break").withInterval(decl.sourceInterval(20546, 20551)), this.lex(this.seq(this.opt(this.seq(this.app("spacesNoNL").withInterval(decl.sourceInterval(20555, 20565)), this.app("identifier").withInterval(decl.sourceInterval(20566, 20576))).withInterval(decl.sourceInterval(20555, 20576))).withInterval(decl.sourceInterval(20554, 20578)), this.app("sc").withInterval(decl.sourceInterval(20579, 20581))).withInterval(decl.sourceInterval(20554, 20581))).withInterval(decl.sourceInterval(20552, 20582))).withInterval(decl.sourceInterval(20546, 20582)))
    .define("ReturnStatement", [], this.seq(this.app("return").withInterval(decl.sourceInterval(20604, 20610)), this.opt(this.seq(this.lex(this.seq(this.app("spacesNoNL").withInterval(decl.sourceInterval(20614, 20624)), this.not(this.app("space").withInterval(decl.sourceInterval(20626, 20631))).withInterval(decl.sourceInterval(20625, 20631))).withInterval(decl.sourceInterval(20614, 20631))).withInterval(decl.sourceInterval(20612, 20632)), this.app("Expression", [this.app("withIn").withInterval(decl.sourceInterval(20644, 20650))]).withInterval(decl.sourceInterval(20633, 20651))).withInterval(decl.sourceInterval(20612, 20651))).withInterval(decl.sourceInterval(20611, 20653)), this.lex(this.app("sc").withInterval(decl.sourceInterval(20656, 20658))).withInterval(decl.sourceInterval(20654, 20659))).withInterval(decl.sourceInterval(20604, 20659)))
    .define("WithStatement", [], this.seq(this.app("with").withInterval(decl.sourceInterval(20679, 20683)), this.prim("(").withInterval(decl.sourceInterval(20684, 20687)), this.app("Expression", [this.app("withIn").withInterval(decl.sourceInterval(20699, 20705))]).withInterval(decl.sourceInterval(20688, 20706)), this.prim(")").withInterval(decl.sourceInterval(20707, 20710)), this.app("Statement").withInterval(decl.sourceInterval(20711, 20720))).withInterval(decl.sourceInterval(20679, 20720)))
    .define("SwitchStatement", [], this.seq(this.app("switch").withInterval(decl.sourceInterval(20742, 20748)), this.prim("(").withInterval(decl.sourceInterval(20749, 20752)), this.app("Expression", [this.app("withIn").withInterval(decl.sourceInterval(20764, 20770))]).withInterval(decl.sourceInterval(20753, 20771)), this.prim(")").withInterval(decl.sourceInterval(20772, 20775)), this.app("CaseBlock").withInterval(decl.sourceInterval(20776, 20785))).withInterval(decl.sourceInterval(20742, 20785)))
    .define("CaseBlock_withDefault", [], this.seq(this.prim("{").withInterval(decl.sourceInterval(20801, 20804)), this.star(this.app("CaseClause").withInterval(decl.sourceInterval(20805, 20815))).withInterval(decl.sourceInterval(20805, 20816)), this.app("DefaultClause").withInterval(decl.sourceInterval(20817, 20830)), this.star(this.app("CaseClause").withInterval(decl.sourceInterval(20831, 20841))).withInterval(decl.sourceInterval(20831, 20842)), this.prim("}").withInterval(decl.sourceInterval(20843, 20846))).withInterval(decl.sourceInterval(20801, 20846)))
    .define("CaseBlock_withoutDefault", [], this.seq(this.prim("{").withInterval(decl.sourceInterval(20877, 20880)), this.star(this.app("CaseClause").withInterval(decl.sourceInterval(20907, 20917))).withInterval(decl.sourceInterval(20907, 20918)), this.prim("}").withInterval(decl.sourceInterval(20919, 20922))).withInterval(decl.sourceInterval(20877, 20922)))
    .define("CaseBlock", [], this.alt(this.app("CaseBlock_withDefault").withInterval(decl.sourceInterval(20801, 20846)), this.app("CaseBlock_withoutDefault").withInterval(decl.sourceInterval(20877, 20922))).withInterval(decl.sourceInterval(20801, 20941)))
    .define("CaseClause", [], this.seq(this.app("case").withInterval(decl.sourceInterval(20958, 20962)), this.app("Expression", [this.app("withIn").withInterval(decl.sourceInterval(20974, 20980))]).withInterval(decl.sourceInterval(20963, 20981)), this.prim(":").withInterval(decl.sourceInterval(20982, 20985)), this.star(this.app("Statement").withInterval(decl.sourceInterval(20986, 20995))).withInterval(decl.sourceInterval(20986, 20996))).withInterval(decl.sourceInterval(20958, 20996)))
    .define("DefaultClause", [], this.seq(this.app("default").withInterval(decl.sourceInterval(21016, 21023)), this.prim(":").withInterval(decl.sourceInterval(21024, 21027)), this.star(this.app("Statement").withInterval(decl.sourceInterval(21028, 21037))).withInterval(decl.sourceInterval(21028, 21038))).withInterval(decl.sourceInterval(21016, 21038)))
    .define("LabelledStatement", [], this.seq(this.app("identifier").withInterval(decl.sourceInterval(21062, 21072)), this.prim(":").withInterval(decl.sourceInterval(21073, 21076)), this.app("Statement").withInterval(decl.sourceInterval(21077, 21086))).withInterval(decl.sourceInterval(21062, 21086)))
    .define("ThrowStatement_throwExpr", [], this.seq(this.app("throw").withInterval(decl.sourceInterval(21107, 21112)), this.app("Expression", [this.app("withIn").withInterval(decl.sourceInterval(21124, 21130))]).withInterval(decl.sourceInterval(21113, 21131)), this.lex(this.app("sc").withInterval(decl.sourceInterval(21134, 21136))).withInterval(decl.sourceInterval(21132, 21137))).withInterval(decl.sourceInterval(21107, 21137)))
    .define("ThrowStatement", [], this.app("ThrowStatement_throwExpr").withInterval(decl.sourceInterval(21107, 21151)))
    .define("TryStatement_tryCatchFinally", [], this.seq(this.app("try").withInterval(decl.sourceInterval(21170, 21173)), this.app("Block").withInterval(decl.sourceInterval(21174, 21179)), this.app("Catch").withInterval(decl.sourceInterval(21180, 21185)), this.app("Finally").withInterval(decl.sourceInterval(21186, 21193))).withInterval(decl.sourceInterval(21170, 21193)))
    .define("TryStatement_tryFinally", [], this.seq(this.app("try").withInterval(decl.sourceInterval(21231, 21234)), this.app("Block").withInterval(decl.sourceInterval(21235, 21240)), this.app("Finally").withInterval(decl.sourceInterval(21241, 21248))).withInterval(decl.sourceInterval(21231, 21248)))
    .define("TryStatement_tryCatch", [], this.seq(this.app("try").withInterval(decl.sourceInterval(21287, 21290)), this.app("Block").withInterval(decl.sourceInterval(21291, 21296)), this.app("Catch").withInterval(decl.sourceInterval(21297, 21302))).withInterval(decl.sourceInterval(21287, 21302)))
    .define("TryStatement", [], this.alt(this.app("TryStatement_tryCatchFinally").withInterval(decl.sourceInterval(21170, 21193)), this.app("TryStatement_tryFinally").withInterval(decl.sourceInterval(21231, 21248)), this.app("TryStatement_tryCatch").withInterval(decl.sourceInterval(21287, 21302))).withInterval(decl.sourceInterval(21170, 21323)))
    .define("Catch", [], this.seq(this.app("catch").withInterval(decl.sourceInterval(21335, 21340)), this.prim("(").withInterval(decl.sourceInterval(21341, 21344)), this.app("FormalParameter").withInterval(decl.sourceInterval(21345, 21360)), this.prim(")").withInterval(decl.sourceInterval(21361, 21364)), this.app("Block").withInterval(decl.sourceInterval(21365, 21370))).withInterval(decl.sourceInterval(21335, 21370)))
    .define("Finally", [], this.seq(this.app("finally").withInterval(decl.sourceInterval(21384, 21391)), this.app("Block").withInterval(decl.sourceInterval(21392, 21397))).withInterval(decl.sourceInterval(21384, 21397)))
    .define("DebuggerStatement", [], this.lex(this.seq(this.app("debugger").withInterval(decl.sourceInterval(21423, 21431)), this.app("sc").withInterval(decl.sourceInterval(21432, 21434))).withInterval(decl.sourceInterval(21423, 21434))).withInterval(decl.sourceInterval(21421, 21435)))
    .define("FunctionDeclaration", [], this.seq(this.app("function").withInterval(decl.sourceInterval(21554, 21562)), this.app("identifier").withInterval(decl.sourceInterval(21563, 21573)), this.prim("(").withInterval(decl.sourceInterval(21574, 21577)), this.app("FormalParameterList").withInterval(decl.sourceInterval(21578, 21597)), this.prim(")").withInterval(decl.sourceInterval(21598, 21601)), this.prim("{").withInterval(decl.sourceInterval(21602, 21605)), this.app("FunctionBody").withInterval(decl.sourceInterval(21606, 21618)), this.prim("}").withInterval(decl.sourceInterval(21619, 21622))).withInterval(decl.sourceInterval(21554, 21622)))
    .define("FunctionExpression_named", [], this.seq(this.app("function").withInterval(decl.sourceInterval(21651, 21659)), this.app("identifier").withInterval(decl.sourceInterval(21660, 21670)), this.prim("(").withInterval(decl.sourceInterval(21671, 21674)), this.app("FormalParameterList").withInterval(decl.sourceInterval(21675, 21694)), this.prim(")").withInterval(decl.sourceInterval(21695, 21698)), this.prim("{").withInterval(decl.sourceInterval(21699, 21702)), this.app("FunctionBody").withInterval(decl.sourceInterval(21703, 21715)), this.prim("}").withInterval(decl.sourceInterval(21716, 21719))).withInterval(decl.sourceInterval(21651, 21719)))
    .define("FunctionExpression_anonymous", [], this.seq(this.app("function").withInterval(decl.sourceInterval(21736, 21744)), this.prim("(").withInterval(decl.sourceInterval(21745, 21748)), this.app("FormalParameterList").withInterval(decl.sourceInterval(21749, 21768)), this.prim(")").withInterval(decl.sourceInterval(21769, 21772)), this.prim("{").withInterval(decl.sourceInterval(21773, 21776)), this.app("FunctionBody").withInterval(decl.sourceInterval(21777, 21789)), this.prim("}").withInterval(decl.sourceInterval(21790, 21793))).withInterval(decl.sourceInterval(21736, 21793)))
    .define("FunctionExpression", [], this.alt(this.app("FunctionExpression_named").withInterval(decl.sourceInterval(21651, 21719)), this.app("FunctionExpression_anonymous").withInterval(decl.sourceInterval(21736, 21793))).withInterval(decl.sourceInterval(21651, 21818)))
    .define("FormalParameterList", [], this.app("ListOf", [this.app("FormalParameter").withInterval(decl.sourceInterval(21851, 21866)), this.prim(",").withInterval(decl.sourceInterval(21868, 21871))]).withInterval(decl.sourceInterval(21844, 21872)))
    .define("FormalParameter", [], this.app("identifier").withInterval(decl.sourceInterval(21894, 21904)))
    .define("FunctionBody", [], this.seq(this.star(this.app("Directive").withInterval(decl.sourceInterval(21923, 21932))).withInterval(decl.sourceInterval(21923, 21933)), this.star(this.app("SourceElement").withInterval(decl.sourceInterval(21934, 21947))).withInterval(decl.sourceInterval(21934, 21948))).withInterval(decl.sourceInterval(21923, 21948)))
    .define("SourceElement", [], this.alt(this.app("Declaration").withInterval(decl.sourceInterval(21968, 21979)), this.app("Statement").withInterval(decl.sourceInterval(21982, 21991))).withInterval(decl.sourceInterval(21968, 21991)))
    .define("Declaration", [], this.app("FunctionDeclaration").withInterval(decl.sourceInterval(22078, 22097)))
    .define("Directive", [], this.seq(this.app("stringLiteral").withInterval(decl.sourceInterval(22113, 22126)), this.lex(this.app("sc").withInterval(decl.sourceInterval(22129, 22131))).withInterval(decl.sourceInterval(22127, 22132))).withInterval(decl.sourceInterval(22113, 22132)))
    .build();
});
  var decl = this.newGrammar("ES6")
    .withSource("ES6 <: ES5 {\n  AssignmentExpression<guardIn>\n    := ArrowFunction<guardIn>\n     | LeftHandSideExpression AssignmentOperator AssignmentExpression<guardIn> -- assignment\n     | ConditionalExpression<guardIn>\n\n  ArrowFunction<guardIn> = ArrowParameters<guardIn> #(spacesNoNL \"=>\") ConciseBody<guardIn>\n\n  ConciseBody<guardIn> = ~\"{\" AssignmentExpression<guardIn>  -- noBraces\n                       | \"{\" FunctionBody \"}\"                -- withBraces\n\n  ArrowParameters<guardIn> = BindingIdentifier<guardIn>  -- unparenthesized\n                           | CoverParenthesizedExpressionAndArrowParameterList<guardIn>\n\n  BindingIdentifier<guardIn> = identifier  // TODO: Implement this properly.\n\n  CoverParenthesizedExpressionAndArrowParameterList<guardIn>\n    = \"(\" Expression<guardIn> \")\"  -- expression\n    | \"(\" \")\"                      -- parens\n    | \"(\" FormalParameterList \")\"  -- params\n}")
    .withSuperGrammar(buildSuperGrammar.call(this))
    .withDefaultStartRule("Program")
  return decl
    .override("AssignmentExpression_assignment", ["guardIn"], this.seq(this.app("LeftHandSideExpression").withInterval(decl.sourceInterval(82, 104)), this.app("AssignmentOperator").withInterval(decl.sourceInterval(105, 123)), this.app("AssignmentExpression", [this.param(0)]).withInterval(decl.sourceInterval(124, 153))).withInterval(decl.sourceInterval(82, 153)))
    .override("AssignmentExpression", ["guardIn"], this.alt(this.app("ArrowFunction", [this.param(0)]).withInterval(decl.sourceInterval(52, 74)), this.app("AssignmentExpression_assignment", [this.param(0)]).withInterval(decl.sourceInterval(82, 153)), this.app("ConditionalExpression", [this.param(0)]).withInterval(decl.sourceInterval(175, 205))).withInterval(decl.sourceInterval(52, 205)))
    .define("ArrowFunction", ["guardIn"], this.seq(this.app("ArrowParameters", [this.param(0)]).withInterval(decl.sourceInterval(234, 258)), this.lex(this.seq(this.app("spacesNoNL").withInterval(decl.sourceInterval(261, 271)), this.prim("=>").withInterval(decl.sourceInterval(272, 276))).withInterval(decl.sourceInterval(261, 276))).withInterval(decl.sourceInterval(259, 277)), this.app("ConciseBody", [this.param(0)]).withInterval(decl.sourceInterval(278, 298))).withInterval(decl.sourceInterval(234, 298)))
    .define("ConciseBody_noBraces", ["guardIn"], this.seq(this.not(this.prim("{").withInterval(decl.sourceInterval(326, 329))).withInterval(decl.sourceInterval(325, 329)), this.app("AssignmentExpression", [this.param(0)]).withInterval(decl.sourceInterval(330, 359))).withInterval(decl.sourceInterval(325, 359)))
    .define("ConciseBody_withBraces", ["guardIn"], this.seq(this.prim("{").withInterval(decl.sourceInterval(398, 401)), this.app("FunctionBody").withInterval(decl.sourceInterval(402, 414)), this.prim("}").withInterval(decl.sourceInterval(415, 418))).withInterval(decl.sourceInterval(398, 418)))
    .define("ConciseBody", ["guardIn"], this.alt(this.app("ConciseBody_noBraces", [this.param(0)]).withInterval(decl.sourceInterval(325, 359)), this.app("ConciseBody_withBraces", [this.param(0)]).withInterval(decl.sourceInterval(398, 418))).withInterval(decl.sourceInterval(325, 447)))
    .define("ArrowParameters_unparenthesized", ["guardIn"], this.app("BindingIdentifier", [this.param(0)]).withInterval(decl.sourceInterval(478, 504)))
    .define("ArrowParameters", ["guardIn"], this.alt(this.app("ArrowParameters_unparenthesized", [this.param(0)]).withInterval(decl.sourceInterval(478, 504)), this.app("CoverParenthesizedExpressionAndArrowParameterList", [this.param(0)]).withInterval(decl.sourceInterval(554, 612))).withInterval(decl.sourceInterval(478, 612)))
    .define("BindingIdentifier", ["guardIn"], this.app("identifier").withInterval(decl.sourceInterval(645, 655)))
    .define("CoverParenthesizedExpressionAndArrowParameterList_expression", ["guardIn"], this.seq(this.prim("(").withInterval(decl.sourceInterval(759, 762)), this.app("Expression", [this.param(0)]).withInterval(decl.sourceInterval(763, 782)), this.prim(")").withInterval(decl.sourceInterval(783, 786))).withInterval(decl.sourceInterval(759, 786)))
    .define("CoverParenthesizedExpressionAndArrowParameterList_parens", ["guardIn"], this.seq(this.prim("(").withInterval(decl.sourceInterval(808, 811)), this.prim(")").withInterval(decl.sourceInterval(812, 815))).withInterval(decl.sourceInterval(808, 815)))
    .define("CoverParenthesizedExpressionAndArrowParameterList_params", ["guardIn"], this.seq(this.prim("(").withInterval(decl.sourceInterval(853, 856)), this.app("FormalParameterList").withInterval(decl.sourceInterval(857, 876)), this.prim(")").withInterval(decl.sourceInterval(877, 880))).withInterval(decl.sourceInterval(853, 880)))
    .define("CoverParenthesizedExpressionAndArrowParameterList", ["guardIn"], this.alt(this.app("CoverParenthesizedExpressionAndArrowParameterList_expression", [this.param(0)]).withInterval(decl.sourceInterval(759, 786)), this.app("CoverParenthesizedExpressionAndArrowParameterList_parens", [this.param(0)]).withInterval(decl.sourceInterval(808, 815)), this.app("CoverParenthesizedExpressionAndArrowParameterList_params", [this.param(0)]).withInterval(decl.sourceInterval(853, 880))).withInterval(decl.sourceInterval(759, 891)))
    .build();
});
  var decl = this.newGrammar("BodyGrammar")
    .withSource("BodyGrammar <: ES6 {\n    BodyExpression = AssignmentExpression<withIn>\n  }")
    .withSuperGrammar(buildSuperGrammar.call(this))
    .withDefaultStartRule("Program")
  return decl
    .define("BodyExpression", [], this.app("AssignmentExpression", [this.app("withIn").withInterval(decl.sourceInterval(63, 69))]).withInterval(decl.sourceInterval(42, 70)))
    .build();
}
);

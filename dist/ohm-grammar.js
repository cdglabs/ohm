var ohm = require('..');
module.exports = ohm.makeRecipe(function() {
  var decl = this.newGrammar("Ohm")
    .withSource("Ohm {\n\n  Grammars\n    = Grammar*\n\n  Grammar\n    = ident SuperGrammar? \"{\" Rule* \"}\"\n\n  SuperGrammar\n    = \"<:\" ident\n\n  Rule\n    = ident Formals? ruleDescr? \"=\"  \"|\"? Alt  -- define\n    | ident Formals?            \":=\" \"|\"? Alt  -- override\n    | ident Formals?            \"+=\" \"|\"? Alt  -- extend\n\n  Formals\n    = \"<\" ListOf<ident, \",\"> \">\"\n\n  Params\n    = \"<\" ListOf<Seq, \",\"> \">\"\n\n  Alt\n    = Term (\"|\" Term)*\n\n  Term\n    = Seq caseName -- inline\n    | Seq\n\n  Seq\n    = Iter*\n\n  Iter\n    = Pred \"*\"  -- star\n    | Pred \"+\"  -- plus\n    | Pred \"?\"  -- opt\n    | Pred\n\n  Pred\n    = \"~\" Lex  -- not\n    | \"&\" Lex  -- lookahead\n    | Lex\n\n  Lex\n    = \"#\" Base  -- lex\n    | Base\n\n  Base\n    = ident Params? ~(ruleDescr? \"=\" | \":=\" | \"+=\")  -- application\n    | terminal \"..\" terminal                         -- range\n    | terminal                                       -- terminal\n    | \"(\" Alt \")\"                                    -- paren\n\n  ruleDescr  (a rule description)\n    = \"(\" ruleDescrText \")\"\n\n  ruleDescrText\n    = (~\")\" any)*\n\n  caseName\n    = \"--\" (~\"\\n\" space)* name (~\"\\n\" space)* (\"\\n\" | &\"}\")\n\n  name  (a name)\n    = nameFirst nameRest*\n\n  nameFirst\n    = \"_\"\n    | letter\n\n  nameRest\n    = \"_\"\n    | alnum\n\n  ident  (an identifier)\n    = name\n\n  terminal\n    = \"\\\"\" terminalChar* \"\\\"\"\n\n  terminalChar\n    = escapeChar\n    | ~\"\\\\\" ~\"\\\"\" ~\"\\n\" any\n\n  escapeChar  (an escape sequence)\n    = \"\\\\\\\\\"                                     -- backslash\n    | \"\\\\\\\"\"                                     -- doubleQuote\n    | \"\\\\\\'\"                                     -- singleQuote\n    | \"\\\\b\"                                      -- backspace\n    | \"\\\\n\"                                      -- lineFeed\n    | \"\\\\r\"                                      -- carriageReturn\n    | \"\\\\t\"                                      -- tab\n    | \"\\\\u\" hexDigit hexDigit hexDigit hexDigit  -- unicodeEscape\n    | \"\\\\x\" hexDigit hexDigit                    -- hexEscape\n\n  space\n   += comment\n\n  comment\n    = \"//\" (~\"\\n\" any)* \"\\n\"  -- singleLine\n    | \"/*\" (~\"*/\" any)* \"*/\"  -- multiLine\n\n  tokens = token*\n\n  token = caseName | comment | ident | operator | punctuation | terminal | any\n\n  operator = \"<:\" | \"=\" | \":=\" | \"+=\" | \"*\" | \"+\" | \"?\" | \"~\" | \"&\"\n\n  punctuation = \"<\" | \">\" | \",\" | \"--\"\n}")
    .withDefaultStartRule("Grammars")
  return decl
    .define("Grammars", [], this.star(this.app("Grammar").withInterval(decl.sourceInterval(24, 31))).withInterval(decl.sourceInterval(24, 32)))
    .define("Grammar", [], this.seq(this.app("ident").withInterval(decl.sourceInterval(50, 55)), this.opt(this.app("SuperGrammar").withInterval(decl.sourceInterval(56, 68))).withInterval(decl.sourceInterval(56, 69)), this.prim("{").withInterval(decl.sourceInterval(70, 73)), this.star(this.app("Rule").withInterval(decl.sourceInterval(74, 78))).withInterval(decl.sourceInterval(74, 79)), this.prim("}").withInterval(decl.sourceInterval(80, 83))).withInterval(decl.sourceInterval(50, 83)))
    .define("SuperGrammar", [], this.seq(this.prim("<:").withInterval(decl.sourceInterval(106, 110)), this.app("ident").withInterval(decl.sourceInterval(111, 116))).withInterval(decl.sourceInterval(106, 116)))
    .define("Rule_define", [], this.seq(this.app("ident").withInterval(decl.sourceInterval(131, 136)), this.opt(this.app("Formals").withInterval(decl.sourceInterval(137, 144))).withInterval(decl.sourceInterval(137, 145)), this.opt(this.app("ruleDescr").withInterval(decl.sourceInterval(146, 155))).withInterval(decl.sourceInterval(146, 156)), this.prim("=").withInterval(decl.sourceInterval(157, 160)), this.opt(this.prim("|").withInterval(decl.sourceInterval(162, 165))).withInterval(decl.sourceInterval(162, 166)), this.app("Alt").withInterval(decl.sourceInterval(167, 170))).withInterval(decl.sourceInterval(131, 170)))
    .define("Rule_override", [], this.seq(this.app("ident").withInterval(decl.sourceInterval(188, 193)), this.opt(this.app("Formals").withInterval(decl.sourceInterval(194, 201))).withInterval(decl.sourceInterval(194, 202)), this.prim(":=").withInterval(decl.sourceInterval(214, 218)), this.opt(this.prim("|").withInterval(decl.sourceInterval(219, 222))).withInterval(decl.sourceInterval(219, 223)), this.app("Alt").withInterval(decl.sourceInterval(224, 227))).withInterval(decl.sourceInterval(188, 227)))
    .define("Rule_extend", [], this.seq(this.app("ident").withInterval(decl.sourceInterval(247, 252)), this.opt(this.app("Formals").withInterval(decl.sourceInterval(253, 260))).withInterval(decl.sourceInterval(253, 261)), this.prim("+=").withInterval(decl.sourceInterval(273, 277)), this.opt(this.prim("|").withInterval(decl.sourceInterval(278, 281))).withInterval(decl.sourceInterval(278, 282)), this.app("Alt").withInterval(decl.sourceInterval(283, 286))).withInterval(decl.sourceInterval(247, 286)))
    .define("Rule", [], this.alt(this.app("Rule_define").withInterval(decl.sourceInterval(131, 170)), this.app("Rule_override").withInterval(decl.sourceInterval(188, 227)), this.app("Rule_extend").withInterval(decl.sourceInterval(247, 286))).withInterval(decl.sourceInterval(131, 297)))
    .define("Formals", [], this.seq(this.prim("<").withInterval(decl.sourceInterval(315, 318)), this.app("ListOf", [this.app("ident").withInterval(decl.sourceInterval(326, 331)), this.prim(",").withInterval(decl.sourceInterval(333, 336))]).withInterval(decl.sourceInterval(319, 337)), this.prim(">").withInterval(decl.sourceInterval(338, 341))).withInterval(decl.sourceInterval(315, 341)))
    .define("Params", [], this.seq(this.prim("<").withInterval(decl.sourceInterval(358, 361)), this.app("ListOf", [this.app("Seq").withInterval(decl.sourceInterval(369, 372)), this.prim(",").withInterval(decl.sourceInterval(374, 377))]).withInterval(decl.sourceInterval(362, 378)), this.prim(">").withInterval(decl.sourceInterval(379, 382))).withInterval(decl.sourceInterval(358, 382)))
    .define("Alt", [], this.seq(this.app("Term").withInterval(decl.sourceInterval(396, 400)), this.star(this.seq(this.prim("|").withInterval(decl.sourceInterval(402, 405)), this.app("Term").withInterval(decl.sourceInterval(406, 410))).withInterval(decl.sourceInterval(402, 410))).withInterval(decl.sourceInterval(401, 412))).withInterval(decl.sourceInterval(396, 412)))
    .define("Term_inline", [], this.seq(this.app("Seq").withInterval(decl.sourceInterval(427, 430)), this.app("caseName").withInterval(decl.sourceInterval(431, 439))).withInterval(decl.sourceInterval(427, 439)))
    .define("Term", [], this.alt(this.app("Term_inline").withInterval(decl.sourceInterval(427, 439)), this.app("Seq").withInterval(decl.sourceInterval(456, 459))).withInterval(decl.sourceInterval(427, 459)))
    .define("Seq", [], this.star(this.app("Iter").withInterval(decl.sourceInterval(473, 477))).withInterval(decl.sourceInterval(473, 478)))
    .define("Iter_star", [], this.seq(this.app("Pred").withInterval(decl.sourceInterval(493, 497)), this.prim("*").withInterval(decl.sourceInterval(498, 501))).withInterval(decl.sourceInterval(493, 501)))
    .define("Iter_plus", [], this.seq(this.app("Pred").withInterval(decl.sourceInterval(517, 521)), this.prim("+").withInterval(decl.sourceInterval(522, 525))).withInterval(decl.sourceInterval(517, 525)))
    .define("Iter_opt", [], this.seq(this.app("Pred").withInterval(decl.sourceInterval(541, 545)), this.prim("?").withInterval(decl.sourceInterval(546, 549))).withInterval(decl.sourceInterval(541, 549)))
    .define("Iter", [], this.alt(this.app("Iter_star").withInterval(decl.sourceInterval(493, 501)), this.app("Iter_plus").withInterval(decl.sourceInterval(517, 525)), this.app("Iter_opt").withInterval(decl.sourceInterval(541, 549)), this.app("Pred").withInterval(decl.sourceInterval(564, 568))).withInterval(decl.sourceInterval(493, 568)))
    .define("Pred_not", [], this.seq(this.prim("~").withInterval(decl.sourceInterval(583, 586)), this.app("Lex").withInterval(decl.sourceInterval(587, 590))).withInterval(decl.sourceInterval(583, 590)))
    .define("Pred_lookahead", [], this.seq(this.prim("&").withInterval(decl.sourceInterval(605, 608)), this.app("Lex").withInterval(decl.sourceInterval(609, 612))).withInterval(decl.sourceInterval(605, 612)))
    .define("Pred", [], this.alt(this.app("Pred_not").withInterval(decl.sourceInterval(583, 590)), this.app("Pred_lookahead").withInterval(decl.sourceInterval(605, 612)), this.app("Lex").withInterval(decl.sourceInterval(633, 636))).withInterval(decl.sourceInterval(583, 636)))
    .define("Lex_lex", [], this.seq(this.prim("#").withInterval(decl.sourceInterval(650, 653)), this.app("Base").withInterval(decl.sourceInterval(654, 658))).withInterval(decl.sourceInterval(650, 658)))
    .define("Lex", [], this.alt(this.app("Lex_lex").withInterval(decl.sourceInterval(650, 658)), this.app("Base").withInterval(decl.sourceInterval(673, 677))).withInterval(decl.sourceInterval(650, 677)))
    .define("Base_application", [], this.seq(this.app("ident").withInterval(decl.sourceInterval(692, 697)), this.opt(this.app("Params").withInterval(decl.sourceInterval(698, 704))).withInterval(decl.sourceInterval(698, 705)), this.not(this.alt(this.seq(this.opt(this.app("ruleDescr").withInterval(decl.sourceInterval(708, 717))).withInterval(decl.sourceInterval(708, 718)), this.prim("=").withInterval(decl.sourceInterval(719, 722))).withInterval(decl.sourceInterval(708, 722)), this.prim(":=").withInterval(decl.sourceInterval(725, 729)), this.prim("+=").withInterval(decl.sourceInterval(732, 736))).withInterval(decl.sourceInterval(708, 736))).withInterval(decl.sourceInterval(706, 737))).withInterval(decl.sourceInterval(692, 737)))
    .define("Base_range", [], this.seq(this.app("terminal").withInterval(decl.sourceInterval(760, 768)), this.prim("..").withInterval(decl.sourceInterval(769, 773)), this.app("terminal").withInterval(decl.sourceInterval(774, 782))).withInterval(decl.sourceInterval(760, 782)))
    .define("Base_terminal", [], this.app("terminal").withInterval(decl.sourceInterval(822, 830)))
    .define("Base_paren", [], this.seq(this.prim("(").withInterval(decl.sourceInterval(887, 890)), this.app("Alt").withInterval(decl.sourceInterval(891, 894)), this.prim(")").withInterval(decl.sourceInterval(895, 898))).withInterval(decl.sourceInterval(887, 898)))
    .define("Base", [], this.alt(this.app("Base_application").withInterval(decl.sourceInterval(692, 737)), this.app("Base_range").withInterval(decl.sourceInterval(760, 782)), this.app("Base_terminal").withInterval(decl.sourceInterval(822, 830)), this.app("Base_paren").withInterval(decl.sourceInterval(887, 898))).withInterval(decl.sourceInterval(692, 942)))
    .define("ruleDescr", [], this.seq(this.prim("(").withInterval(decl.sourceInterval(984, 987)), this.app("ruleDescrText").withInterval(decl.sourceInterval(988, 1001)), this.prim(")").withInterval(decl.sourceInterval(1002, 1005))).withInterval(decl.sourceInterval(984, 1005)), "a rule description")
    .define("ruleDescrText", [], this.star(this.seq(this.not(this.prim(")").withInterval(decl.sourceInterval(1031, 1034))).withInterval(decl.sourceInterval(1030, 1034)), this.app("any").withInterval(decl.sourceInterval(1035, 1038))).withInterval(decl.sourceInterval(1030, 1038))).withInterval(decl.sourceInterval(1029, 1040)))
    .define("caseName", [], this.seq(this.prim("--").withInterval(decl.sourceInterval(1059, 1063)), this.star(this.seq(this.not(this.prim("\n").withInterval(decl.sourceInterval(1066, 1070))).withInterval(decl.sourceInterval(1065, 1070)), this.app("space").withInterval(decl.sourceInterval(1071, 1076))).withInterval(decl.sourceInterval(1065, 1076))).withInterval(decl.sourceInterval(1064, 1078)), this.app("name").withInterval(decl.sourceInterval(1079, 1083)), this.star(this.seq(this.not(this.prim("\n").withInterval(decl.sourceInterval(1086, 1090))).withInterval(decl.sourceInterval(1085, 1090)), this.app("space").withInterval(decl.sourceInterval(1091, 1096))).withInterval(decl.sourceInterval(1085, 1096))).withInterval(decl.sourceInterval(1084, 1098)), this.alt(this.prim("\n").withInterval(decl.sourceInterval(1100, 1104)), this.la(this.prim("}").withInterval(decl.sourceInterval(1108, 1111))).withInterval(decl.sourceInterval(1107, 1111))).withInterval(decl.sourceInterval(1100, 1111))).withInterval(decl.sourceInterval(1059, 1112)))
    .define("name", [], this.seq(this.app("nameFirst").withInterval(decl.sourceInterval(1137, 1146)), this.star(this.app("nameRest").withInterval(decl.sourceInterval(1147, 1155))).withInterval(decl.sourceInterval(1147, 1156))).withInterval(decl.sourceInterval(1137, 1156)), "a name")
    .define("nameFirst", [], this.alt(this.prim("_").withInterval(decl.sourceInterval(1176, 1179)), this.app("letter").withInterval(decl.sourceInterval(1186, 1192))).withInterval(decl.sourceInterval(1176, 1192)))
    .define("nameRest", [], this.alt(this.prim("_").withInterval(decl.sourceInterval(1211, 1214)), this.app("alnum").withInterval(decl.sourceInterval(1221, 1226))).withInterval(decl.sourceInterval(1211, 1226)))
    .define("ident", [], this.app("name").withInterval(decl.sourceInterval(1259, 1263)), "an identifier")
    .define("terminal", [], this.seq(this.prim("\"").withInterval(decl.sourceInterval(1282, 1286)), this.star(this.app("terminalChar").withInterval(decl.sourceInterval(1287, 1299))).withInterval(decl.sourceInterval(1287, 1300)), this.prim("\"").withInterval(decl.sourceInterval(1301, 1305))).withInterval(decl.sourceInterval(1282, 1305)))
    .define("terminalChar", [], this.alt(this.app("escapeChar").withInterval(decl.sourceInterval(1328, 1338)), this.seq(this.not(this.prim("\\").withInterval(decl.sourceInterval(1346, 1350))).withInterval(decl.sourceInterval(1345, 1350)), this.not(this.prim("\"").withInterval(decl.sourceInterval(1352, 1356))).withInterval(decl.sourceInterval(1351, 1356)), this.not(this.prim("\n").withInterval(decl.sourceInterval(1358, 1362))).withInterval(decl.sourceInterval(1357, 1362)), this.app("any").withInterval(decl.sourceInterval(1363, 1366))).withInterval(decl.sourceInterval(1345, 1366))).withInterval(decl.sourceInterval(1328, 1366)))
    .define("escapeChar_backslash", [], this.prim("\\\\").withInterval(decl.sourceInterval(1409, 1415)))
    .define("escapeChar_doubleQuote", [], this.prim("\\\"").withInterval(decl.sourceInterval(1471, 1477)))
    .define("escapeChar_singleQuote", [], this.prim("\\'").withInterval(decl.sourceInterval(1535, 1541)))
    .define("escapeChar_backspace", [], this.prim("\\b").withInterval(decl.sourceInterval(1599, 1604)))
    .define("escapeChar_lineFeed", [], this.prim("\\n").withInterval(decl.sourceInterval(1661, 1666)))
    .define("escapeChar_carriageReturn", [], this.prim("\\r").withInterval(decl.sourceInterval(1722, 1727)))
    .define("escapeChar_tab", [], this.prim("\\t").withInterval(decl.sourceInterval(1789, 1794)))
    .define("escapeChar_unicodeEscape", [], this.seq(this.prim("\\u").withInterval(decl.sourceInterval(1845, 1850)), this.app("hexDigit").withInterval(decl.sourceInterval(1851, 1859)), this.app("hexDigit").withInterval(decl.sourceInterval(1860, 1868)), this.app("hexDigit").withInterval(decl.sourceInterval(1869, 1877)), this.app("hexDigit").withInterval(decl.sourceInterval(1878, 1886))).withInterval(decl.sourceInterval(1845, 1886)))
    .define("escapeChar_hexEscape", [], this.seq(this.prim("\\x").withInterval(decl.sourceInterval(1911, 1916)), this.app("hexDigit").withInterval(decl.sourceInterval(1917, 1925)), this.app("hexDigit").withInterval(decl.sourceInterval(1926, 1934))).withInterval(decl.sourceInterval(1911, 1934)))
    .define("escapeChar", [], this.alt(this.app("escapeChar_backslash").withInterval(decl.sourceInterval(1409, 1415)), this.app("escapeChar_doubleQuote").withInterval(decl.sourceInterval(1471, 1477)), this.app("escapeChar_singleQuote").withInterval(decl.sourceInterval(1535, 1541)), this.app("escapeChar_backspace").withInterval(decl.sourceInterval(1599, 1604)), this.app("escapeChar_lineFeed").withInterval(decl.sourceInterval(1661, 1666)), this.app("escapeChar_carriageReturn").withInterval(decl.sourceInterval(1722, 1727)), this.app("escapeChar_tab").withInterval(decl.sourceInterval(1789, 1794)), this.app("escapeChar_unicodeEscape").withInterval(decl.sourceInterval(1845, 1886)), this.app("escapeChar_hexEscape").withInterval(decl.sourceInterval(1911, 1934))).withInterval(decl.sourceInterval(1409, 1966)), "an escape sequence")
    .extend("space", [], this.app("comment").withInterval(decl.sourceInterval(1982, 1989)))
    .define("comment_singleLine", [], this.seq(this.prim("//").withInterval(decl.sourceInterval(2007, 2011)), this.star(this.seq(this.not(this.prim("\n").withInterval(decl.sourceInterval(2014, 2018))).withInterval(decl.sourceInterval(2013, 2018)), this.app("any").withInterval(decl.sourceInterval(2019, 2022))).withInterval(decl.sourceInterval(2013, 2022))).withInterval(decl.sourceInterval(2012, 2024)), this.prim("\n").withInterval(decl.sourceInterval(2025, 2029))).withInterval(decl.sourceInterval(2007, 2029)))
    .define("comment_multiLine", [], this.seq(this.prim("/*").withInterval(decl.sourceInterval(2051, 2055)), this.star(this.seq(this.not(this.prim("*/").withInterval(decl.sourceInterval(2058, 2062))).withInterval(decl.sourceInterval(2057, 2062)), this.app("any").withInterval(decl.sourceInterval(2063, 2066))).withInterval(decl.sourceInterval(2057, 2066))).withInterval(decl.sourceInterval(2056, 2068)), this.prim("*/").withInterval(decl.sourceInterval(2069, 2073))).withInterval(decl.sourceInterval(2051, 2073)))
    .define("comment", [], this.alt(this.app("comment_singleLine").withInterval(decl.sourceInterval(2007, 2029)), this.app("comment_multiLine").withInterval(decl.sourceInterval(2051, 2073))).withInterval(decl.sourceInterval(2007, 2087)))
    .define("tokens", [], this.star(this.app("token").withInterval(decl.sourceInterval(2100, 2105))).withInterval(decl.sourceInterval(2100, 2106)))
    .define("token", [], this.alt(this.app("caseName").withInterval(decl.sourceInterval(2118, 2126)), this.app("comment").withInterval(decl.sourceInterval(2129, 2136)), this.app("ident").withInterval(decl.sourceInterval(2139, 2144)), this.app("operator").withInterval(decl.sourceInterval(2147, 2155)), this.app("punctuation").withInterval(decl.sourceInterval(2158, 2169)), this.app("terminal").withInterval(decl.sourceInterval(2172, 2180)), this.app("any").withInterval(decl.sourceInterval(2183, 2186))).withInterval(decl.sourceInterval(2118, 2186)))
    .define("operator", [], this.alt(this.prim("<:").withInterval(decl.sourceInterval(2201, 2205)), this.prim("=").withInterval(decl.sourceInterval(2208, 2211)), this.prim(":=").withInterval(decl.sourceInterval(2214, 2218)), this.prim("+=").withInterval(decl.sourceInterval(2221, 2225)), this.prim("*").withInterval(decl.sourceInterval(2228, 2231)), this.prim("+").withInterval(decl.sourceInterval(2234, 2237)), this.prim("?").withInterval(decl.sourceInterval(2240, 2243)), this.prim("~").withInterval(decl.sourceInterval(2246, 2249)), this.prim("&").withInterval(decl.sourceInterval(2252, 2255))).withInterval(decl.sourceInterval(2201, 2255)))
    .define("punctuation", [], this.alt(this.prim("<").withInterval(decl.sourceInterval(2273, 2276)), this.prim(">").withInterval(decl.sourceInterval(2279, 2282)), this.prim(",").withInterval(decl.sourceInterval(2285, 2288)), this.prim("--").withInterval(decl.sourceInterval(2291, 2295))).withInterval(decl.sourceInterval(2273, 2295)))
    .build();
});


var ohm = require('..');
module.exports = ohm.makeRecipe(function() {
  var decl = this.newGrammar("Ohm")
    .withSource("Ohm {\n\n  Grammars\n    = Grammar*\n\n  Grammar\n    = ident SuperGrammar? \"{\" Rule* \"}\"\n\n  SuperGrammar\n    = \"<:\" ident\n\n  Rule\n    = ident Formals? ruleDescr? \"=\"  \"|\"? Alt  -- define\n    | ident Formals?            \":=\" \"|\"? Alt  -- override\n    | ident Formals?            \"+=\" \"|\"? Alt  -- extend\n\n  Formals\n    = \"<\" ListOf<ident, \",\"> \">\"\n\n  Params\n    = \"<\" ListOf<Seq, \",\"> \">\"\n\n  Alt\n    = Term (\"|\" Term)*\n\n  Term\n    = Seq caseName -- inline\n    | Seq\n\n  Seq\n    = Iter*\n\n  Iter\n    = Pred \"*\"  -- star\n    | Pred \"+\"  -- plus\n    | Pred \"?\"  -- opt\n    | Pred\n\n  Pred\n    = \"~\" Lex  -- not\n    | \"&\" Lex  -- lookahead\n    | Lex\n\n  Lex\n    = \"#\" Base  -- lex\n    | Base\n\n  Base\n    = ident Params? ~(ruleDescr? \"=\" | \":=\" | \"+=\")  -- application\n    | Prim \"..\" Prim                                 -- range\n    | Prim                                           -- prim\n    | \"(\" Alt \")\"                                    -- paren\n    | \"[\" Alt \"]\"                                    -- arr\n    | \"``\" Alt \"''\"                                  -- str\n    | \"{\" \"...\"? \"}\"                                 -- obj\n    | \"{\" Props (\",\" \"...\")? \"}\"                     -- objWithProps\n\n  Prim\n    = keyword\n    | string\n    | number\n\n  Props\n    = Prop (\",\" Prop)*\n\n  Prop\n    = (name | string) \":\" Alt\n\n  ruleDescr  (a rule description)\n    = \"(\" ruleDescrText \")\"\n\n  ruleDescrText\n    = (~\")\" any)*\n\n  caseName\n    = \"--\" (~\"\\n\" space)* name (~\"\\n\" space)* (\"\\n\" | &\"}\")\n\n  name  (a name)\n    = nameFirst nameRest*\n\n  nameFirst\n    = \"_\"\n    | letter\n\n  nameRest\n    = \"_\"\n    | alnum\n\n  ident  (an identifier)\n    = ~keyword name\n\n  keyword\n    = \"null\" ~nameRest   -- null\n    | \"true\" ~nameRest   -- true\n    | \"false\" ~nameRest  -- false\n\n  string\n    = \"\\\"\" strChar* \"\\\"\"\n\n  strChar\n    = escapeChar\n    | ~\"\\\\\" ~\"\\\"\" ~\"\\n\" any\n\n  escapeChar  (an escape sequence)\n    = \"\\\\\\\\\"                                     -- backslash\n    | \"\\\\\\\"\"                                     -- doubleQuote\n    | \"\\\\\\'\"                                     -- singleQuote\n    | \"\\\\b\"                                      -- backspace\n    | \"\\\\n\"                                      -- lineFeed\n    | \"\\\\r\"                                      -- carriageReturn\n    | \"\\\\t\"                                      -- tab\n    | \"\\\\u\" hexDigit hexDigit hexDigit hexDigit  -- unicodeEscape\n    | \"\\\\x\" hexDigit hexDigit                    -- hexEscape\n\n  number  (a number)\n    = \"-\"? digit+\n\n  space\n   += comment\n\n  comment\n    = \"//\" (~\"\\n\" any)* \"\\n\"  -- singleLine\n    | \"/*\" (~\"*/\" any)* \"*/\"  -- multiLine\n\n  tokens = token*\n\n  token = caseName | comment | ident | keyword | number | operator | punctuation | string | any\n\n  operator = \"<:\" | \"=\" | \":=\" | \"+=\" | \"*\" | \"+\" | \"?\" | \"~\" | \"&\"\n\n  punctuation = \"<\" | \">\" | \",\" | \"--\"\n}")
    .withDefaultStartRule("Grammars")
  return decl
    .define("Grammars", [], this.star(this.app("Grammar").withInterval(decl.sourceInterval(24, 31))).withInterval(decl.sourceInterval(24, 32)))
    .define("Grammar", [], this.seq(this.app("ident").withInterval(decl.sourceInterval(50, 55)), this.opt(this.app("SuperGrammar").withInterval(decl.sourceInterval(56, 68))).withInterval(decl.sourceInterval(56, 69)), this.prim("{").withInterval(decl.sourceInterval(70, 73)), this.star(this.app("Rule").withInterval(decl.sourceInterval(74, 78))).withInterval(decl.sourceInterval(74, 79)), this.prim("}").withInterval(decl.sourceInterval(80, 83))).withInterval(decl.sourceInterval(50, 83)))
    .define("SuperGrammar", [], this.seq(this.prim("<:").withInterval(decl.sourceInterval(106, 110)), this.app("ident").withInterval(decl.sourceInterval(111, 116))).withInterval(decl.sourceInterval(106, 116)))
    .define("Rule_define", [], this.seq(this.app("ident").withInterval(decl.sourceInterval(131, 136)), this.opt(this.app("Formals").withInterval(decl.sourceInterval(137, 144))).withInterval(decl.sourceInterval(137, 145)), this.opt(this.app("ruleDescr").withInterval(decl.sourceInterval(146, 155))).withInterval(decl.sourceInterval(146, 156)), this.prim("=").withInterval(decl.sourceInterval(157, 160)), this.opt(this.prim("|").withInterval(decl.sourceInterval(162, 165))).withInterval(decl.sourceInterval(162, 166)), this.app("Alt").withInterval(decl.sourceInterval(167, 170))).withInterval(decl.sourceInterval(131, 170)))
    .define("Rule_override", [], this.seq(this.app("ident").withInterval(decl.sourceInterval(188, 193)), this.opt(this.app("Formals").withInterval(decl.sourceInterval(194, 201))).withInterval(decl.sourceInterval(194, 202)), this.prim(":=").withInterval(decl.sourceInterval(214, 218)), this.opt(this.prim("|").withInterval(decl.sourceInterval(219, 222))).withInterval(decl.sourceInterval(219, 223)), this.app("Alt").withInterval(decl.sourceInterval(224, 227))).withInterval(decl.sourceInterval(188, 227)))
    .define("Rule_extend", [], this.seq(this.app("ident").withInterval(decl.sourceInterval(247, 252)), this.opt(this.app("Formals").withInterval(decl.sourceInterval(253, 260))).withInterval(decl.sourceInterval(253, 261)), this.prim("+=").withInterval(decl.sourceInterval(273, 277)), this.opt(this.prim("|").withInterval(decl.sourceInterval(278, 281))).withInterval(decl.sourceInterval(278, 282)), this.app("Alt").withInterval(decl.sourceInterval(283, 286))).withInterval(decl.sourceInterval(247, 286)))
    .define("Rule", [], this.alt(this.app("Rule_define").withInterval(decl.sourceInterval(131, 170)), this.app("Rule_override").withInterval(decl.sourceInterval(188, 227)), this.app("Rule_extend").withInterval(decl.sourceInterval(247, 286))).withInterval(decl.sourceInterval(131, 297)))
    .define("Formals", [], this.seq(this.prim("<").withInterval(decl.sourceInterval(315, 318)), this.app("ListOf", [this.app("ident").withInterval(decl.sourceInterval(326, 331)), this.prim(",").withInterval(decl.sourceInterval(333, 336))]).withInterval(decl.sourceInterval(319, 337)), this.prim(">").withInterval(decl.sourceInterval(338, 341))).withInterval(decl.sourceInterval(315, 341)))
    .define("Params", [], this.seq(this.prim("<").withInterval(decl.sourceInterval(358, 361)), this.app("ListOf", [this.app("Seq").withInterval(decl.sourceInterval(369, 372)), this.prim(",").withInterval(decl.sourceInterval(374, 377))]).withInterval(decl.sourceInterval(362, 378)), this.prim(">").withInterval(decl.sourceInterval(379, 382))).withInterval(decl.sourceInterval(358, 382)))
    .define("Alt", [], this.seq(this.app("Term").withInterval(decl.sourceInterval(396, 400)), this.star(this.seq(this.prim("|").withInterval(decl.sourceInterval(402, 405)), this.app("Term").withInterval(decl.sourceInterval(406, 410))).withInterval(decl.sourceInterval(402, 410))).withInterval(decl.sourceInterval(401, 412))).withInterval(decl.sourceInterval(396, 412)))
    .define("Term_inline", [], this.seq(this.app("Seq").withInterval(decl.sourceInterval(427, 430)), this.app("caseName").withInterval(decl.sourceInterval(431, 439))).withInterval(decl.sourceInterval(427, 439)))
    .define("Term", [], this.alt(this.app("Term_inline").withInterval(decl.sourceInterval(427, 439)), this.app("Seq").withInterval(decl.sourceInterval(456, 459))).withInterval(decl.sourceInterval(427, 459)))
    .define("Seq", [], this.star(this.app("Iter").withInterval(decl.sourceInterval(473, 477))).withInterval(decl.sourceInterval(473, 478)))
    .define("Iter_star", [], this.seq(this.app("Pred").withInterval(decl.sourceInterval(493, 497)), this.prim("*").withInterval(decl.sourceInterval(498, 501))).withInterval(decl.sourceInterval(493, 501)))
    .define("Iter_plus", [], this.seq(this.app("Pred").withInterval(decl.sourceInterval(517, 521)), this.prim("+").withInterval(decl.sourceInterval(522, 525))).withInterval(decl.sourceInterval(517, 525)))
    .define("Iter_opt", [], this.seq(this.app("Pred").withInterval(decl.sourceInterval(541, 545)), this.prim("?").withInterval(decl.sourceInterval(546, 549))).withInterval(decl.sourceInterval(541, 549)))
    .define("Iter", [], this.alt(this.app("Iter_star").withInterval(decl.sourceInterval(493, 501)), this.app("Iter_plus").withInterval(decl.sourceInterval(517, 525)), this.app("Iter_opt").withInterval(decl.sourceInterval(541, 549)), this.app("Pred").withInterval(decl.sourceInterval(564, 568))).withInterval(decl.sourceInterval(493, 568)))
    .define("Pred_not", [], this.seq(this.prim("~").withInterval(decl.sourceInterval(583, 586)), this.app("Lex").withInterval(decl.sourceInterval(587, 590))).withInterval(decl.sourceInterval(583, 590)))
    .define("Pred_lookahead", [], this.seq(this.prim("&").withInterval(decl.sourceInterval(605, 608)), this.app("Lex").withInterval(decl.sourceInterval(609, 612))).withInterval(decl.sourceInterval(605, 612)))
    .define("Pred", [], this.alt(this.app("Pred_not").withInterval(decl.sourceInterval(583, 590)), this.app("Pred_lookahead").withInterval(decl.sourceInterval(605, 612)), this.app("Lex").withInterval(decl.sourceInterval(633, 636))).withInterval(decl.sourceInterval(583, 636)))
    .define("Lex_lex", [], this.seq(this.prim("#").withInterval(decl.sourceInterval(650, 653)), this.app("Base").withInterval(decl.sourceInterval(654, 658))).withInterval(decl.sourceInterval(650, 658)))
    .define("Lex", [], this.alt(this.app("Lex_lex").withInterval(decl.sourceInterval(650, 658)), this.app("Base").withInterval(decl.sourceInterval(673, 677))).withInterval(decl.sourceInterval(650, 677)))
    .define("Base_application", [], this.seq(this.app("ident").withInterval(decl.sourceInterval(692, 697)), this.opt(this.app("Params").withInterval(decl.sourceInterval(698, 704))).withInterval(decl.sourceInterval(698, 705)), this.not(this.alt(this.seq(this.opt(this.app("ruleDescr").withInterval(decl.sourceInterval(708, 717))).withInterval(decl.sourceInterval(708, 718)), this.prim("=").withInterval(decl.sourceInterval(719, 722))).withInterval(decl.sourceInterval(708, 722)), this.prim(":=").withInterval(decl.sourceInterval(725, 729)), this.prim("+=").withInterval(decl.sourceInterval(732, 736))).withInterval(decl.sourceInterval(708, 736))).withInterval(decl.sourceInterval(706, 737))).withInterval(decl.sourceInterval(692, 737)))
    .define("Base_range", [], this.seq(this.app("Prim").withInterval(decl.sourceInterval(760, 764)), this.prim("..").withInterval(decl.sourceInterval(765, 769)), this.app("Prim").withInterval(decl.sourceInterval(770, 774))).withInterval(decl.sourceInterval(760, 774)))
    .define("Base_prim", [], this.app("Prim").withInterval(decl.sourceInterval(822, 826)))
    .define("Base_paren", [], this.seq(this.prim("(").withInterval(decl.sourceInterval(883, 886)), this.app("Alt").withInterval(decl.sourceInterval(887, 890)), this.prim(")").withInterval(decl.sourceInterval(891, 894))).withInterval(decl.sourceInterval(883, 894)))
    .define("Base_arr", [], this.seq(this.prim("[").withInterval(decl.sourceInterval(945, 948)), this.app("Alt").withInterval(decl.sourceInterval(949, 952)), this.prim("]").withInterval(decl.sourceInterval(953, 956))).withInterval(decl.sourceInterval(945, 956)))
    .define("Base_str", [], this.seq(this.prim("``").withInterval(decl.sourceInterval(1005, 1009)), this.app("Alt").withInterval(decl.sourceInterval(1010, 1013)), this.prim("''").withInterval(decl.sourceInterval(1014, 1018))).withInterval(decl.sourceInterval(1005, 1018)))
    .define("Base_obj", [], this.seq(this.prim("{").withInterval(decl.sourceInterval(1065, 1068)), this.opt(this.prim("...").withInterval(decl.sourceInterval(1069, 1074))).withInterval(decl.sourceInterval(1069, 1075)), this.prim("}").withInterval(decl.sourceInterval(1076, 1079))).withInterval(decl.sourceInterval(1065, 1079)))
    .define("Base_objWithProps", [], this.seq(this.prim("{").withInterval(decl.sourceInterval(1125, 1128)), this.app("Props").withInterval(decl.sourceInterval(1129, 1134)), this.opt(this.seq(this.prim(",").withInterval(decl.sourceInterval(1136, 1139)), this.prim("...").withInterval(decl.sourceInterval(1140, 1145))).withInterval(decl.sourceInterval(1136, 1145))).withInterval(decl.sourceInterval(1135, 1147)), this.prim("}").withInterval(decl.sourceInterval(1148, 1151))).withInterval(decl.sourceInterval(1125, 1151)))
    .define("Base", [], this.alt(this.app("Base_application").withInterval(decl.sourceInterval(692, 737)), this.app("Base_range").withInterval(decl.sourceInterval(760, 774)), this.app("Base_prim").withInterval(decl.sourceInterval(822, 826)), this.app("Base_paren").withInterval(decl.sourceInterval(883, 894)), this.app("Base_arr").withInterval(decl.sourceInterval(945, 956)), this.app("Base_str").withInterval(decl.sourceInterval(1005, 1018)), this.app("Base_obj").withInterval(decl.sourceInterval(1065, 1079)), this.app("Base_objWithProps").withInterval(decl.sourceInterval(1125, 1151))).withInterval(decl.sourceInterval(692, 1187)))
    .define("Prim", [], this.alt(this.app("keyword").withInterval(decl.sourceInterval(1202, 1209)), this.app("string").withInterval(decl.sourceInterval(1216, 1222)), this.app("number").withInterval(decl.sourceInterval(1229, 1235))).withInterval(decl.sourceInterval(1202, 1235)))
    .define("Props", [], this.seq(this.app("Prop").withInterval(decl.sourceInterval(1251, 1255)), this.star(this.seq(this.prim(",").withInterval(decl.sourceInterval(1257, 1260)), this.app("Prop").withInterval(decl.sourceInterval(1261, 1265))).withInterval(decl.sourceInterval(1257, 1265))).withInterval(decl.sourceInterval(1256, 1267))).withInterval(decl.sourceInterval(1251, 1267)))
    .define("Prop", [], this.seq(this.alt(this.app("name").withInterval(decl.sourceInterval(1283, 1287)), this.app("string").withInterval(decl.sourceInterval(1290, 1296))).withInterval(decl.sourceInterval(1283, 1296)), this.prim(":").withInterval(decl.sourceInterval(1298, 1301)), this.app("Alt").withInterval(decl.sourceInterval(1302, 1305))).withInterval(decl.sourceInterval(1282, 1305)))
    .define("ruleDescr", [], this.seq(this.prim("(").withInterval(decl.sourceInterval(1347, 1350)), this.app("ruleDescrText").withInterval(decl.sourceInterval(1351, 1364)), this.prim(")").withInterval(decl.sourceInterval(1365, 1368))).withInterval(decl.sourceInterval(1347, 1368)), "a rule description")
    .define("ruleDescrText", [], this.star(this.seq(this.not(this.prim(")").withInterval(decl.sourceInterval(1394, 1397))).withInterval(decl.sourceInterval(1393, 1397)), this.app("any").withInterval(decl.sourceInterval(1398, 1401))).withInterval(decl.sourceInterval(1393, 1401))).withInterval(decl.sourceInterval(1392, 1403)))
    .define("caseName", [], this.seq(this.prim("--").withInterval(decl.sourceInterval(1422, 1426)), this.star(this.seq(this.not(this.prim("\n").withInterval(decl.sourceInterval(1429, 1433))).withInterval(decl.sourceInterval(1428, 1433)), this.app("space").withInterval(decl.sourceInterval(1434, 1439))).withInterval(decl.sourceInterval(1428, 1439))).withInterval(decl.sourceInterval(1427, 1441)), this.app("name").withInterval(decl.sourceInterval(1442, 1446)), this.star(this.seq(this.not(this.prim("\n").withInterval(decl.sourceInterval(1449, 1453))).withInterval(decl.sourceInterval(1448, 1453)), this.app("space").withInterval(decl.sourceInterval(1454, 1459))).withInterval(decl.sourceInterval(1448, 1459))).withInterval(decl.sourceInterval(1447, 1461)), this.alt(this.prim("\n").withInterval(decl.sourceInterval(1463, 1467)), this.la(this.prim("}").withInterval(decl.sourceInterval(1471, 1474))).withInterval(decl.sourceInterval(1470, 1474))).withInterval(decl.sourceInterval(1463, 1474))).withInterval(decl.sourceInterval(1422, 1475)))
    .define("name", [], this.seq(this.app("nameFirst").withInterval(decl.sourceInterval(1500, 1509)), this.star(this.app("nameRest").withInterval(decl.sourceInterval(1510, 1518))).withInterval(decl.sourceInterval(1510, 1519))).withInterval(decl.sourceInterval(1500, 1519)), "a name")
    .define("nameFirst", [], this.alt(this.prim("_").withInterval(decl.sourceInterval(1539, 1542)), this.app("letter").withInterval(decl.sourceInterval(1549, 1555))).withInterval(decl.sourceInterval(1539, 1555)))
    .define("nameRest", [], this.alt(this.prim("_").withInterval(decl.sourceInterval(1574, 1577)), this.app("alnum").withInterval(decl.sourceInterval(1584, 1589))).withInterval(decl.sourceInterval(1574, 1589)))
    .define("ident", [], this.seq(this.not(this.app("keyword").withInterval(decl.sourceInterval(1623, 1630))).withInterval(decl.sourceInterval(1622, 1630)), this.app("name").withInterval(decl.sourceInterval(1631, 1635))).withInterval(decl.sourceInterval(1622, 1635)), "an identifier")
    .define("keyword_null", [], this.seq(this.prim("null").withInterval(decl.sourceInterval(1653, 1659)), this.not(this.app("nameRest").withInterval(decl.sourceInterval(1661, 1669))).withInterval(decl.sourceInterval(1660, 1669))).withInterval(decl.sourceInterval(1653, 1669)))
    .define("keyword_true", [], this.seq(this.prim("true").withInterval(decl.sourceInterval(1686, 1692)), this.not(this.app("nameRest").withInterval(decl.sourceInterval(1694, 1702))).withInterval(decl.sourceInterval(1693, 1702))).withInterval(decl.sourceInterval(1686, 1702)))
    .define("keyword_false", [], this.seq(this.prim("false").withInterval(decl.sourceInterval(1719, 1726)), this.not(this.app("nameRest").withInterval(decl.sourceInterval(1728, 1736))).withInterval(decl.sourceInterval(1727, 1736))).withInterval(decl.sourceInterval(1719, 1736)))
    .define("keyword", [], this.alt(this.app("keyword_null").withInterval(decl.sourceInterval(1653, 1669)), this.app("keyword_true").withInterval(decl.sourceInterval(1686, 1702)), this.app("keyword_false").withInterval(decl.sourceInterval(1719, 1736))).withInterval(decl.sourceInterval(1653, 1746)))
    .define("string", [], this.seq(this.prim("\"").withInterval(decl.sourceInterval(1763, 1767)), this.star(this.app("strChar").withInterval(decl.sourceInterval(1768, 1775))).withInterval(decl.sourceInterval(1768, 1776)), this.prim("\"").withInterval(decl.sourceInterval(1777, 1781))).withInterval(decl.sourceInterval(1763, 1781)))
    .define("strChar", [], this.alt(this.app("escapeChar").withInterval(decl.sourceInterval(1799, 1809)), this.seq(this.not(this.prim("\\").withInterval(decl.sourceInterval(1817, 1821))).withInterval(decl.sourceInterval(1816, 1821)), this.not(this.prim("\"").withInterval(decl.sourceInterval(1823, 1827))).withInterval(decl.sourceInterval(1822, 1827)), this.not(this.prim("\n").withInterval(decl.sourceInterval(1829, 1833))).withInterval(decl.sourceInterval(1828, 1833)), this.app("any").withInterval(decl.sourceInterval(1834, 1837))).withInterval(decl.sourceInterval(1816, 1837))).withInterval(decl.sourceInterval(1799, 1837)))
    .define("escapeChar_backslash", [], this.prim("\\\\").withInterval(decl.sourceInterval(1880, 1886)))
    .define("escapeChar_doubleQuote", [], this.prim("\\\"").withInterval(decl.sourceInterval(1942, 1948)))
    .define("escapeChar_singleQuote", [], this.prim("\\'").withInterval(decl.sourceInterval(2006, 2012)))
    .define("escapeChar_backspace", [], this.prim("\\b").withInterval(decl.sourceInterval(2070, 2075)))
    .define("escapeChar_lineFeed", [], this.prim("\\n").withInterval(decl.sourceInterval(2132, 2137)))
    .define("escapeChar_carriageReturn", [], this.prim("\\r").withInterval(decl.sourceInterval(2193, 2198)))
    .define("escapeChar_tab", [], this.prim("\\t").withInterval(decl.sourceInterval(2260, 2265)))
    .define("escapeChar_unicodeEscape", [], this.seq(this.prim("\\u").withInterval(decl.sourceInterval(2316, 2321)), this.app("hexDigit").withInterval(decl.sourceInterval(2322, 2330)), this.app("hexDigit").withInterval(decl.sourceInterval(2331, 2339)), this.app("hexDigit").withInterval(decl.sourceInterval(2340, 2348)), this.app("hexDigit").withInterval(decl.sourceInterval(2349, 2357))).withInterval(decl.sourceInterval(2316, 2357)))
    .define("escapeChar_hexEscape", [], this.seq(this.prim("\\x").withInterval(decl.sourceInterval(2382, 2387)), this.app("hexDigit").withInterval(decl.sourceInterval(2388, 2396)), this.app("hexDigit").withInterval(decl.sourceInterval(2397, 2405))).withInterval(decl.sourceInterval(2382, 2405)))
    .define("escapeChar", [], this.alt(this.app("escapeChar_backslash").withInterval(decl.sourceInterval(1880, 1886)), this.app("escapeChar_doubleQuote").withInterval(decl.sourceInterval(1942, 1948)), this.app("escapeChar_singleQuote").withInterval(decl.sourceInterval(2006, 2012)), this.app("escapeChar_backspace").withInterval(decl.sourceInterval(2070, 2075)), this.app("escapeChar_lineFeed").withInterval(decl.sourceInterval(2132, 2137)), this.app("escapeChar_carriageReturn").withInterval(decl.sourceInterval(2193, 2198)), this.app("escapeChar_tab").withInterval(decl.sourceInterval(2260, 2265)), this.app("escapeChar_unicodeEscape").withInterval(decl.sourceInterval(2316, 2357)), this.app("escapeChar_hexEscape").withInterval(decl.sourceInterval(2382, 2405))).withInterval(decl.sourceInterval(1880, 2437)), "an escape sequence")
    .define("number", [], this.seq(this.opt(this.prim("-").withInterval(decl.sourceInterval(2466, 2469))).withInterval(decl.sourceInterval(2466, 2470)), this.plus(this.app("digit").withInterval(decl.sourceInterval(2471, 2476))).withInterval(decl.sourceInterval(2471, 2477))).withInterval(decl.sourceInterval(2466, 2477)), "a number")
    .extend("space", [], this.app("comment").withInterval(decl.sourceInterval(2493, 2500)))
    .define("comment_singleLine", [], this.seq(this.prim("//").withInterval(decl.sourceInterval(2518, 2522)), this.star(this.seq(this.not(this.prim("\n").withInterval(decl.sourceInterval(2525, 2529))).withInterval(decl.sourceInterval(2524, 2529)), this.app("any").withInterval(decl.sourceInterval(2530, 2533))).withInterval(decl.sourceInterval(2524, 2533))).withInterval(decl.sourceInterval(2523, 2535)), this.prim("\n").withInterval(decl.sourceInterval(2536, 2540))).withInterval(decl.sourceInterval(2518, 2540)))
    .define("comment_multiLine", [], this.seq(this.prim("/*").withInterval(decl.sourceInterval(2562, 2566)), this.star(this.seq(this.not(this.prim("*/").withInterval(decl.sourceInterval(2569, 2573))).withInterval(decl.sourceInterval(2568, 2573)), this.app("any").withInterval(decl.sourceInterval(2574, 2577))).withInterval(decl.sourceInterval(2568, 2577))).withInterval(decl.sourceInterval(2567, 2579)), this.prim("*/").withInterval(decl.sourceInterval(2580, 2584))).withInterval(decl.sourceInterval(2562, 2584)))
    .define("comment", [], this.alt(this.app("comment_singleLine").withInterval(decl.sourceInterval(2518, 2540)), this.app("comment_multiLine").withInterval(decl.sourceInterval(2562, 2584))).withInterval(decl.sourceInterval(2518, 2598)))
    .define("tokens", [], this.star(this.app("token").withInterval(decl.sourceInterval(2611, 2616))).withInterval(decl.sourceInterval(2611, 2617)))
    .define("token", [], this.alt(this.app("caseName").withInterval(decl.sourceInterval(2629, 2637)), this.app("comment").withInterval(decl.sourceInterval(2640, 2647)), this.app("ident").withInterval(decl.sourceInterval(2650, 2655)), this.app("keyword").withInterval(decl.sourceInterval(2658, 2665)), this.app("number").withInterval(decl.sourceInterval(2668, 2674)), this.app("operator").withInterval(decl.sourceInterval(2677, 2685)), this.app("punctuation").withInterval(decl.sourceInterval(2688, 2699)), this.app("string").withInterval(decl.sourceInterval(2702, 2708)), this.app("any").withInterval(decl.sourceInterval(2711, 2714))).withInterval(decl.sourceInterval(2629, 2714)))
    .define("operator", [], this.alt(this.prim("<:").withInterval(decl.sourceInterval(2729, 2733)), this.prim("=").withInterval(decl.sourceInterval(2736, 2739)), this.prim(":=").withInterval(decl.sourceInterval(2742, 2746)), this.prim("+=").withInterval(decl.sourceInterval(2749, 2753)), this.prim("*").withInterval(decl.sourceInterval(2756, 2759)), this.prim("+").withInterval(decl.sourceInterval(2762, 2765)), this.prim("?").withInterval(decl.sourceInterval(2768, 2771)), this.prim("~").withInterval(decl.sourceInterval(2774, 2777)), this.prim("&").withInterval(decl.sourceInterval(2780, 2783))).withInterval(decl.sourceInterval(2729, 2783)))
    .define("punctuation", [], this.alt(this.prim("<").withInterval(decl.sourceInterval(2801, 2804)), this.prim(">").withInterval(decl.sourceInterval(2807, 2810)), this.prim(",").withInterval(decl.sourceInterval(2813, 2816)), this.prim("--").withInterval(decl.sourceInterval(2819, 2823))).withInterval(decl.sourceInterval(2801, 2823)))
    .build();
});


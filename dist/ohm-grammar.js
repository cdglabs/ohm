var ohm = require('..');
module.exports = ohm.makeRecipe(function() {
  var decl = this.newGrammar("Ohm")
    .withSource("Ohm {\n\n  Grammars\n    = Grammar*\n\n  Grammar\n    = ident SuperGrammar? \"{\" Rule* \"}\"\n\n  SuperGrammar\n    = \"<:\" ident\n\n  Rule\n    = ident Formals? ruleDescr? \"=\"  \"|\"? Alt  -- define\n    | ident Formals?            \":=\" \"|\"? Alt  -- override\n    | ident Formals?            \"+=\" \"|\"? Alt  -- extend\n\n  Formals\n    = \"<\" ListOf<ident, \",\"> \">\"\n\n  Params\n    = \"<\" ListOf<Seq, \",\"> \">\"\n\n  Alt\n    = Term (\"|\" Term)*\n\n  Term\n    = Seq caseName -- inline\n    | Seq\n\n  Seq\n    = Iter*\n\n  Iter\n    = Pred \"*\"  -- star\n    | Pred \"+\"  -- plus\n    | Pred \"?\"  -- opt\n    | Pred\n\n  Pred\n    = \"~\" Lex  -- not\n    | \"&\" Lex  -- lookahead\n    | Lex\n\n  Lex\n    = \"#\" Base  -- lex\n    | Base\n\n  Base\n    = ident Params? ~(ruleDescr? \"=\" | \":=\" | \"+=\")  -- application\n    | string \"..\" string                             -- range\n    | string                                         -- string\n    | \"(\" Alt \")\"                                    -- paren\n\n  ruleDescr  (a rule description)\n    = \"(\" ruleDescrText \")\"\n\n  ruleDescrText\n    = (~\")\" any)*\n\n  caseName\n    = \"--\" (~\"\\n\" space)* name (~\"\\n\" space)* (\"\\n\" | &\"}\")\n\n  name  (a name)\n    = nameFirst nameRest*\n\n  nameFirst\n    = \"_\"\n    | letter\n\n  nameRest\n    = \"_\"\n    | alnum\n\n  ident  (an identifier)\n    = name\n\n  string\n    = \"\\\"\" strChar* \"\\\"\"\n\n  strChar\n    = escapeChar\n    | ~\"\\\\\" ~\"\\\"\" ~\"\\n\" any\n\n  escapeChar  (an escape sequence)\n    = \"\\\\\\\\\"                                     -- backslash\n    | \"\\\\\\\"\"                                     -- doubleQuote\n    | \"\\\\\\'\"                                     -- singleQuote\n    | \"\\\\b\"                                      -- backspace\n    | \"\\\\n\"                                      -- lineFeed\n    | \"\\\\r\"                                      -- carriageReturn\n    | \"\\\\t\"                                      -- tab\n    | \"\\\\u\" hexDigit hexDigit hexDigit hexDigit  -- unicodeEscape\n    | \"\\\\x\" hexDigit hexDigit                    -- hexEscape\n\n  space\n   += comment\n\n  comment\n    = \"//\" (~\"\\n\" any)* \"\\n\"  -- singleLine\n    | \"/*\" (~\"*/\" any)* \"*/\"  -- multiLine\n\n  tokens = token*\n\n  token = caseName | comment | ident | operator | punctuation | string | any\n\n  operator = \"<:\" | \"=\" | \":=\" | \"+=\" | \"*\" | \"+\" | \"?\" | \"~\" | \"&\"\n\n  punctuation = \"<\" | \">\" | \",\" | \"--\"\n}")
    .withDefaultStartRule("Grammars")
  return decl
    .define("Grammars", [], this.star(this.app("Grammar").withInterval(decl.sourceInterval(24, 31))).withInterval(decl.sourceInterval(24, 32)))
    .define("Grammar", [], this.seq(this.app("ident").withInterval(decl.sourceInterval(50, 55)), this.opt(this.app("SuperGrammar").withInterval(decl.sourceInterval(56, 68))).withInterval(decl.sourceInterval(56, 69)), this.prim("{").withInterval(decl.sourceInterval(70, 73)), this.star(this.app("Rule").withInterval(decl.sourceInterval(74, 78))).withInterval(decl.sourceInterval(74, 79)), this.prim("}").withInterval(decl.sourceInterval(80, 83))).withInterval(decl.sourceInterval(50, 83)))
    .define("SuperGrammar", [], this.seq(this.prim("<:").withInterval(decl.sourceInterval(106, 110)), this.app("ident").withInterval(decl.sourceInterval(111, 116))).withInterval(decl.sourceInterval(106, 116)))
    .define("Rule_define", [], this.seq(this.app("ident").withInterval(decl.sourceInterval(131, 136)), this.opt(this.app("Formals").withInterval(decl.sourceInterval(137, 144))).withInterval(decl.sourceInterval(137, 145)), this.opt(this.app("ruleDescr").withInterval(decl.sourceInterval(146, 155))).withInterval(decl.sourceInterval(146, 156)), this.prim("=").withInterval(decl.sourceInterval(157, 160)), this.opt(this.prim("|").withInterval(decl.sourceInterval(162, 165))).withInterval(decl.sourceInterval(162, 166)), this.app("Alt").withInterval(decl.sourceInterval(167, 170))).withInterval(decl.sourceInterval(131, 170)))
    .define("Rule_override", [], this.seq(this.app("ident").withInterval(decl.sourceInterval(188, 193)), this.opt(this.app("Formals").withInterval(decl.sourceInterval(194, 201))).withInterval(decl.sourceInterval(194, 202)), this.prim(":=").withInterval(decl.sourceInterval(214, 218)), this.opt(this.prim("|").withInterval(decl.sourceInterval(219, 222))).withInterval(decl.sourceInterval(219, 223)), this.app("Alt").withInterval(decl.sourceInterval(224, 227))).withInterval(decl.sourceInterval(188, 227)))
    .define("Rule_extend", [], this.seq(this.app("ident").withInterval(decl.sourceInterval(247, 252)), this.opt(this.app("Formals").withInterval(decl.sourceInterval(253, 260))).withInterval(decl.sourceInterval(253, 261)), this.prim("+=").withInterval(decl.sourceInterval(273, 277)), this.opt(this.prim("|").withInterval(decl.sourceInterval(278, 281))).withInterval(decl.sourceInterval(278, 282)), this.app("Alt").withInterval(decl.sourceInterval(283, 286))).withInterval(decl.sourceInterval(247, 286)))
    .define("Rule", [], this.alt(this.app("Rule_define").withInterval(decl.sourceInterval(131, 170)), this.app("Rule_override").withInterval(decl.sourceInterval(188, 227)), this.app("Rule_extend").withInterval(decl.sourceInterval(247, 286))).withInterval(decl.sourceInterval(131, 297)))
    .define("Formals", [], this.seq(this.prim("<").withInterval(decl.sourceInterval(315, 318)), this.app("ListOf", [this.app("ident").withInterval(decl.sourceInterval(326, 331)), this.prim(",").withInterval(decl.sourceInterval(333, 336))]).withInterval(decl.sourceInterval(319, 337)), this.prim(">").withInterval(decl.sourceInterval(338, 341))).withInterval(decl.sourceInterval(315, 341)))
    .define("Params", [], this.seq(this.prim("<").withInterval(decl.sourceInterval(358, 361)), this.app("ListOf", [this.app("Seq").withInterval(decl.sourceInterval(369, 372)), this.prim(",").withInterval(decl.sourceInterval(374, 377))]).withInterval(decl.sourceInterval(362, 378)), this.prim(">").withInterval(decl.sourceInterval(379, 382))).withInterval(decl.sourceInterval(358, 382)))
    .define("Alt", [], this.seq(this.app("Term").withInterval(decl.sourceInterval(396, 400)), this.star(this.seq(this.prim("|").withInterval(decl.sourceInterval(402, 405)), this.app("Term").withInterval(decl.sourceInterval(406, 410))).withInterval(decl.sourceInterval(402, 410))).withInterval(decl.sourceInterval(401, 412))).withInterval(decl.sourceInterval(396, 412)))
    .define("Term_inline", [], this.seq(this.app("Seq").withInterval(decl.sourceInterval(427, 430)), this.app("caseName").withInterval(decl.sourceInterval(431, 439))).withInterval(decl.sourceInterval(427, 439)))
    .define("Term", [], this.alt(this.app("Term_inline").withInterval(decl.sourceInterval(427, 439)), this.app("Seq").withInterval(decl.sourceInterval(456, 459))).withInterval(decl.sourceInterval(427, 459)))
    .define("Seq", [], this.star(this.app("Iter").withInterval(decl.sourceInterval(473, 477))).withInterval(decl.sourceInterval(473, 478)))
    .define("Iter_star", [], this.seq(this.app("Pred").withInterval(decl.sourceInterval(493, 497)), this.prim("*").withInterval(decl.sourceInterval(498, 501))).withInterval(decl.sourceInterval(493, 501)))
    .define("Iter_plus", [], this.seq(this.app("Pred").withInterval(decl.sourceInterval(517, 521)), this.prim("+").withInterval(decl.sourceInterval(522, 525))).withInterval(decl.sourceInterval(517, 525)))
    .define("Iter_opt", [], this.seq(this.app("Pred").withInterval(decl.sourceInterval(541, 545)), this.prim("?").withInterval(decl.sourceInterval(546, 549))).withInterval(decl.sourceInterval(541, 549)))
    .define("Iter", [], this.alt(this.app("Iter_star").withInterval(decl.sourceInterval(493, 501)), this.app("Iter_plus").withInterval(decl.sourceInterval(517, 525)), this.app("Iter_opt").withInterval(decl.sourceInterval(541, 549)), this.app("Pred").withInterval(decl.sourceInterval(564, 568))).withInterval(decl.sourceInterval(493, 568)))
    .define("Pred_not", [], this.seq(this.prim("~").withInterval(decl.sourceInterval(583, 586)), this.app("Lex").withInterval(decl.sourceInterval(587, 590))).withInterval(decl.sourceInterval(583, 590)))
    .define("Pred_lookahead", [], this.seq(this.prim("&").withInterval(decl.sourceInterval(605, 608)), this.app("Lex").withInterval(decl.sourceInterval(609, 612))).withInterval(decl.sourceInterval(605, 612)))
    .define("Pred", [], this.alt(this.app("Pred_not").withInterval(decl.sourceInterval(583, 590)), this.app("Pred_lookahead").withInterval(decl.sourceInterval(605, 612)), this.app("Lex").withInterval(decl.sourceInterval(633, 636))).withInterval(decl.sourceInterval(583, 636)))
    .define("Lex_lex", [], this.seq(this.prim("#").withInterval(decl.sourceInterval(650, 653)), this.app("Base").withInterval(decl.sourceInterval(654, 658))).withInterval(decl.sourceInterval(650, 658)))
    .define("Lex", [], this.alt(this.app("Lex_lex").withInterval(decl.sourceInterval(650, 658)), this.app("Base").withInterval(decl.sourceInterval(673, 677))).withInterval(decl.sourceInterval(650, 677)))
    .define("Base_application", [], this.seq(this.app("ident").withInterval(decl.sourceInterval(692, 697)), this.opt(this.app("Params").withInterval(decl.sourceInterval(698, 704))).withInterval(decl.sourceInterval(698, 705)), this.not(this.alt(this.seq(this.opt(this.app("ruleDescr").withInterval(decl.sourceInterval(708, 717))).withInterval(decl.sourceInterval(708, 718)), this.prim("=").withInterval(decl.sourceInterval(719, 722))).withInterval(decl.sourceInterval(708, 722)), this.prim(":=").withInterval(decl.sourceInterval(725, 729)), this.prim("+=").withInterval(decl.sourceInterval(732, 736))).withInterval(decl.sourceInterval(708, 736))).withInterval(decl.sourceInterval(706, 737))).withInterval(decl.sourceInterval(692, 737)))
    .define("Base_range", [], this.seq(this.app("string").withInterval(decl.sourceInterval(760, 766)), this.prim("..").withInterval(decl.sourceInterval(767, 771)), this.app("string").withInterval(decl.sourceInterval(772, 778))).withInterval(decl.sourceInterval(760, 778)))
    .define("Base_string", [], this.app("string").withInterval(decl.sourceInterval(822, 828)))
    .define("Base_paren", [], this.seq(this.prim("(").withInterval(decl.sourceInterval(885, 888)), this.app("Alt").withInterval(decl.sourceInterval(889, 892)), this.prim(")").withInterval(decl.sourceInterval(893, 896))).withInterval(decl.sourceInterval(885, 896)))
    .define("Base", [], this.alt(this.app("Base_application").withInterval(decl.sourceInterval(692, 737)), this.app("Base_range").withInterval(decl.sourceInterval(760, 778)), this.app("Base_string").withInterval(decl.sourceInterval(822, 828)), this.app("Base_paren").withInterval(decl.sourceInterval(885, 896))).withInterval(decl.sourceInterval(692, 940)))
    .define("ruleDescr", [], this.seq(this.prim("(").withInterval(decl.sourceInterval(982, 985)), this.app("ruleDescrText").withInterval(decl.sourceInterval(986, 999)), this.prim(")").withInterval(decl.sourceInterval(1000, 1003))).withInterval(decl.sourceInterval(982, 1003)), "a rule description")
    .define("ruleDescrText", [], this.star(this.seq(this.not(this.prim(")").withInterval(decl.sourceInterval(1029, 1032))).withInterval(decl.sourceInterval(1028, 1032)), this.app("any").withInterval(decl.sourceInterval(1033, 1036))).withInterval(decl.sourceInterval(1028, 1036))).withInterval(decl.sourceInterval(1027, 1038)))
    .define("caseName", [], this.seq(this.prim("--").withInterval(decl.sourceInterval(1057, 1061)), this.star(this.seq(this.not(this.prim("\n").withInterval(decl.sourceInterval(1064, 1068))).withInterval(decl.sourceInterval(1063, 1068)), this.app("space").withInterval(decl.sourceInterval(1069, 1074))).withInterval(decl.sourceInterval(1063, 1074))).withInterval(decl.sourceInterval(1062, 1076)), this.app("name").withInterval(decl.sourceInterval(1077, 1081)), this.star(this.seq(this.not(this.prim("\n").withInterval(decl.sourceInterval(1084, 1088))).withInterval(decl.sourceInterval(1083, 1088)), this.app("space").withInterval(decl.sourceInterval(1089, 1094))).withInterval(decl.sourceInterval(1083, 1094))).withInterval(decl.sourceInterval(1082, 1096)), this.alt(this.prim("\n").withInterval(decl.sourceInterval(1098, 1102)), this.la(this.prim("}").withInterval(decl.sourceInterval(1106, 1109))).withInterval(decl.sourceInterval(1105, 1109))).withInterval(decl.sourceInterval(1098, 1109))).withInterval(decl.sourceInterval(1057, 1110)))
    .define("name", [], this.seq(this.app("nameFirst").withInterval(decl.sourceInterval(1135, 1144)), this.star(this.app("nameRest").withInterval(decl.sourceInterval(1145, 1153))).withInterval(decl.sourceInterval(1145, 1154))).withInterval(decl.sourceInterval(1135, 1154)), "a name")
    .define("nameFirst", [], this.alt(this.prim("_").withInterval(decl.sourceInterval(1174, 1177)), this.app("letter").withInterval(decl.sourceInterval(1184, 1190))).withInterval(decl.sourceInterval(1174, 1190)))
    .define("nameRest", [], this.alt(this.prim("_").withInterval(decl.sourceInterval(1209, 1212)), this.app("alnum").withInterval(decl.sourceInterval(1219, 1224))).withInterval(decl.sourceInterval(1209, 1224)))
    .define("ident", [], this.app("name").withInterval(decl.sourceInterval(1257, 1261)), "an identifier")
    .define("string", [], this.seq(this.prim("\"").withInterval(decl.sourceInterval(1278, 1282)), this.star(this.app("strChar").withInterval(decl.sourceInterval(1283, 1290))).withInterval(decl.sourceInterval(1283, 1291)), this.prim("\"").withInterval(decl.sourceInterval(1292, 1296))).withInterval(decl.sourceInterval(1278, 1296)))
    .define("strChar", [], this.alt(this.app("escapeChar").withInterval(decl.sourceInterval(1314, 1324)), this.seq(this.not(this.prim("\\").withInterval(decl.sourceInterval(1332, 1336))).withInterval(decl.sourceInterval(1331, 1336)), this.not(this.prim("\"").withInterval(decl.sourceInterval(1338, 1342))).withInterval(decl.sourceInterval(1337, 1342)), this.not(this.prim("\n").withInterval(decl.sourceInterval(1344, 1348))).withInterval(decl.sourceInterval(1343, 1348)), this.app("any").withInterval(decl.sourceInterval(1349, 1352))).withInterval(decl.sourceInterval(1331, 1352))).withInterval(decl.sourceInterval(1314, 1352)))
    .define("escapeChar_backslash", [], this.prim("\\\\").withInterval(decl.sourceInterval(1395, 1401)))
    .define("escapeChar_doubleQuote", [], this.prim("\\\"").withInterval(decl.sourceInterval(1457, 1463)))
    .define("escapeChar_singleQuote", [], this.prim("\\'").withInterval(decl.sourceInterval(1521, 1527)))
    .define("escapeChar_backspace", [], this.prim("\\b").withInterval(decl.sourceInterval(1585, 1590)))
    .define("escapeChar_lineFeed", [], this.prim("\\n").withInterval(decl.sourceInterval(1647, 1652)))
    .define("escapeChar_carriageReturn", [], this.prim("\\r").withInterval(decl.sourceInterval(1708, 1713)))
    .define("escapeChar_tab", [], this.prim("\\t").withInterval(decl.sourceInterval(1775, 1780)))
    .define("escapeChar_unicodeEscape", [], this.seq(this.prim("\\u").withInterval(decl.sourceInterval(1831, 1836)), this.app("hexDigit").withInterval(decl.sourceInterval(1837, 1845)), this.app("hexDigit").withInterval(decl.sourceInterval(1846, 1854)), this.app("hexDigit").withInterval(decl.sourceInterval(1855, 1863)), this.app("hexDigit").withInterval(decl.sourceInterval(1864, 1872))).withInterval(decl.sourceInterval(1831, 1872)))
    .define("escapeChar_hexEscape", [], this.seq(this.prim("\\x").withInterval(decl.sourceInterval(1897, 1902)), this.app("hexDigit").withInterval(decl.sourceInterval(1903, 1911)), this.app("hexDigit").withInterval(decl.sourceInterval(1912, 1920))).withInterval(decl.sourceInterval(1897, 1920)))
    .define("escapeChar", [], this.alt(this.app("escapeChar_backslash").withInterval(decl.sourceInterval(1395, 1401)), this.app("escapeChar_doubleQuote").withInterval(decl.sourceInterval(1457, 1463)), this.app("escapeChar_singleQuote").withInterval(decl.sourceInterval(1521, 1527)), this.app("escapeChar_backspace").withInterval(decl.sourceInterval(1585, 1590)), this.app("escapeChar_lineFeed").withInterval(decl.sourceInterval(1647, 1652)), this.app("escapeChar_carriageReturn").withInterval(decl.sourceInterval(1708, 1713)), this.app("escapeChar_tab").withInterval(decl.sourceInterval(1775, 1780)), this.app("escapeChar_unicodeEscape").withInterval(decl.sourceInterval(1831, 1872)), this.app("escapeChar_hexEscape").withInterval(decl.sourceInterval(1897, 1920))).withInterval(decl.sourceInterval(1395, 1952)), "an escape sequence")
    .extend("space", [], this.app("comment").withInterval(decl.sourceInterval(1968, 1975)))
    .define("comment_singleLine", [], this.seq(this.prim("//").withInterval(decl.sourceInterval(1993, 1997)), this.star(this.seq(this.not(this.prim("\n").withInterval(decl.sourceInterval(2000, 2004))).withInterval(decl.sourceInterval(1999, 2004)), this.app("any").withInterval(decl.sourceInterval(2005, 2008))).withInterval(decl.sourceInterval(1999, 2008))).withInterval(decl.sourceInterval(1998, 2010)), this.prim("\n").withInterval(decl.sourceInterval(2011, 2015))).withInterval(decl.sourceInterval(1993, 2015)))
    .define("comment_multiLine", [], this.seq(this.prim("/*").withInterval(decl.sourceInterval(2037, 2041)), this.star(this.seq(this.not(this.prim("*/").withInterval(decl.sourceInterval(2044, 2048))).withInterval(decl.sourceInterval(2043, 2048)), this.app("any").withInterval(decl.sourceInterval(2049, 2052))).withInterval(decl.sourceInterval(2043, 2052))).withInterval(decl.sourceInterval(2042, 2054)), this.prim("*/").withInterval(decl.sourceInterval(2055, 2059))).withInterval(decl.sourceInterval(2037, 2059)))
    .define("comment", [], this.alt(this.app("comment_singleLine").withInterval(decl.sourceInterval(1993, 2015)), this.app("comment_multiLine").withInterval(decl.sourceInterval(2037, 2059))).withInterval(decl.sourceInterval(1993, 2073)))
    .define("tokens", [], this.star(this.app("token").withInterval(decl.sourceInterval(2086, 2091))).withInterval(decl.sourceInterval(2086, 2092)))
    .define("token", [], this.alt(this.app("caseName").withInterval(decl.sourceInterval(2104, 2112)), this.app("comment").withInterval(decl.sourceInterval(2115, 2122)), this.app("ident").withInterval(decl.sourceInterval(2125, 2130)), this.app("operator").withInterval(decl.sourceInterval(2133, 2141)), this.app("punctuation").withInterval(decl.sourceInterval(2144, 2155)), this.app("string").withInterval(decl.sourceInterval(2158, 2164)), this.app("any").withInterval(decl.sourceInterval(2167, 2170))).withInterval(decl.sourceInterval(2104, 2170)))
    .define("operator", [], this.alt(this.prim("<:").withInterval(decl.sourceInterval(2185, 2189)), this.prim("=").withInterval(decl.sourceInterval(2192, 2195)), this.prim(":=").withInterval(decl.sourceInterval(2198, 2202)), this.prim("+=").withInterval(decl.sourceInterval(2205, 2209)), this.prim("*").withInterval(decl.sourceInterval(2212, 2215)), this.prim("+").withInterval(decl.sourceInterval(2218, 2221)), this.prim("?").withInterval(decl.sourceInterval(2224, 2227)), this.prim("~").withInterval(decl.sourceInterval(2230, 2233)), this.prim("&").withInterval(decl.sourceInterval(2236, 2239))).withInterval(decl.sourceInterval(2185, 2239)))
    .define("punctuation", [], this.alt(this.prim("<").withInterval(decl.sourceInterval(2257, 2260)), this.prim(">").withInterval(decl.sourceInterval(2263, 2266)), this.prim(",").withInterval(decl.sourceInterval(2269, 2272)), this.prim("--").withInterval(decl.sourceInterval(2275, 2279))).withInterval(decl.sourceInterval(2257, 2279)))
    .build();
});


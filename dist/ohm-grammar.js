var ohm = require('..');
module.exports = ohm.makeRecipe(function() {
  var decl = this.newGrammar("Ohm")
    .withSource("Ohm {\n\n  Grammars\n    = Grammar*\n\n  Grammar\n    = ident SuperGrammar? \"{\" Rule* \"}\"\n\n  SuperGrammar\n    = \"<:\" ident\n\n  Rule\n    = ident Formals? ruleDescr? \"=\"  \"|\"? Alt  -- define\n    | ident Formals?            \":=\" \"|\"? Alt  -- override\n    | ident Formals?            \"+=\" \"|\"? Alt  -- extend\n\n  Formals\n    = \"<\" ListOf<ident, \",\"> \">\"\n\n  Params\n    = \"<\" ListOf<Seq, \",\"> \">\"\n\n  Alt\n    = Term (\"|\" Term)*\n\n  Term\n    = Seq caseName -- inline\n    | Seq\n\n  Seq\n    = Iter*\n\n  Iter\n    = Pred \"*\"  -- star\n    | Pred \"+\"  -- plus\n    | Pred \"?\"  -- opt\n    | Pred\n\n  Pred\n    = \"~\" Lex  -- not\n    | \"&\" Lex  -- lookahead\n    | Lex\n\n  Lex\n    = \"#\" Base  -- lex\n    | Base\n\n  Base\n    = ident Params? ~(ruleDescr? \"=\" | \":=\" | \"+=\")  -- application\n    | Prim \"..\" Prim                                 -- range\n    | Prim                                           -- prim\n    | \"(\" Alt \")\"                                    -- paren\n\n  Prim\n    = keyword\n    | string\n    | number\n\n  ruleDescr  (a rule description)\n    = \"(\" ruleDescrText \")\"\n\n  ruleDescrText\n    = (~\")\" any)*\n\n  caseName\n    = \"--\" (~\"\\n\" space)* name (~\"\\n\" space)* (\"\\n\" | &\"}\")\n\n  name  (a name)\n    = nameFirst nameRest*\n\n  nameFirst\n    = \"_\"\n    | letter\n\n  nameRest\n    = \"_\"\n    | alnum\n\n  ident  (an identifier)\n    = ~keyword name\n\n  keyword\n    = \"null\" ~nameRest   -- null\n    | \"true\" ~nameRest   -- true\n    | \"false\" ~nameRest  -- false\n\n  string\n    = \"\\\"\" strChar* \"\\\"\"\n\n  strChar\n    = escapeChar\n    | ~\"\\\\\" ~\"\\\"\" ~\"\\n\" any\n\n  escapeChar  (an escape sequence)\n    = \"\\\\\\\\\"                                     -- backslash\n    | \"\\\\\\\"\"                                     -- doubleQuote\n    | \"\\\\\\'\"                                     -- singleQuote\n    | \"\\\\b\"                                      -- backspace\n    | \"\\\\n\"                                      -- lineFeed\n    | \"\\\\r\"                                      -- carriageReturn\n    | \"\\\\t\"                                      -- tab\n    | \"\\\\u\" hexDigit hexDigit hexDigit hexDigit  -- unicodeEscape\n    | \"\\\\x\" hexDigit hexDigit                    -- hexEscape\n\n  number  (a number)\n    = \"-\"? digit+\n\n  space\n   += comment\n\n  comment\n    = \"//\" (~\"\\n\" any)* \"\\n\"  -- singleLine\n    | \"/*\" (~\"*/\" any)* \"*/\"  -- multiLine\n\n  tokens = token*\n\n  token = caseName | comment | ident | keyword | number | operator | punctuation | string | any\n\n  operator = \"<:\" | \"=\" | \":=\" | \"+=\" | \"*\" | \"+\" | \"?\" | \"~\" | \"&\"\n\n  punctuation = \"<\" | \">\" | \",\" | \"--\"\n}")
    .withDefaultStartRule("Grammars")
  return decl
    .define("Grammars", [], this.star(this.app("Grammar").withInterval(decl.sourceInterval(24, 31))).withInterval(decl.sourceInterval(24, 32)))
    .define("Grammar", [], this.seq(this.app("ident").withInterval(decl.sourceInterval(50, 55)), this.opt(this.app("SuperGrammar").withInterval(decl.sourceInterval(56, 68))).withInterval(decl.sourceInterval(56, 69)), this.prim("{").withInterval(decl.sourceInterval(70, 73)), this.star(this.app("Rule").withInterval(decl.sourceInterval(74, 78))).withInterval(decl.sourceInterval(74, 79)), this.prim("}").withInterval(decl.sourceInterval(80, 83))).withInterval(decl.sourceInterval(50, 83)))
    .define("SuperGrammar", [], this.seq(this.prim("<:").withInterval(decl.sourceInterval(106, 110)), this.app("ident").withInterval(decl.sourceInterval(111, 116))).withInterval(decl.sourceInterval(106, 116)))
    .define("Rule_define", [], this.seq(this.app("ident").withInterval(decl.sourceInterval(131, 136)), this.opt(this.app("Formals").withInterval(decl.sourceInterval(137, 144))).withInterval(decl.sourceInterval(137, 145)), this.opt(this.app("ruleDescr").withInterval(decl.sourceInterval(146, 155))).withInterval(decl.sourceInterval(146, 156)), this.prim("=").withInterval(decl.sourceInterval(157, 160)), this.opt(this.prim("|").withInterval(decl.sourceInterval(162, 165))).withInterval(decl.sourceInterval(162, 166)), this.app("Alt").withInterval(decl.sourceInterval(167, 170))).withInterval(decl.sourceInterval(131, 170)))
    .define("Rule_override", [], this.seq(this.app("ident").withInterval(decl.sourceInterval(188, 193)), this.opt(this.app("Formals").withInterval(decl.sourceInterval(194, 201))).withInterval(decl.sourceInterval(194, 202)), this.prim(":=").withInterval(decl.sourceInterval(214, 218)), this.opt(this.prim("|").withInterval(decl.sourceInterval(219, 222))).withInterval(decl.sourceInterval(219, 223)), this.app("Alt").withInterval(decl.sourceInterval(224, 227))).withInterval(decl.sourceInterval(188, 227)))
    .define("Rule_extend", [], this.seq(this.app("ident").withInterval(decl.sourceInterval(247, 252)), this.opt(this.app("Formals").withInterval(decl.sourceInterval(253, 260))).withInterval(decl.sourceInterval(253, 261)), this.prim("+=").withInterval(decl.sourceInterval(273, 277)), this.opt(this.prim("|").withInterval(decl.sourceInterval(278, 281))).withInterval(decl.sourceInterval(278, 282)), this.app("Alt").withInterval(decl.sourceInterval(283, 286))).withInterval(decl.sourceInterval(247, 286)))
    .define("Rule", [], this.alt(this.app("Rule_define").withInterval(decl.sourceInterval(131, 170)), this.app("Rule_override").withInterval(decl.sourceInterval(188, 227)), this.app("Rule_extend").withInterval(decl.sourceInterval(247, 286))).withInterval(decl.sourceInterval(131, 297)))
    .define("Formals", [], this.seq(this.prim("<").withInterval(decl.sourceInterval(315, 318)), this.app("ListOf", [this.app("ident").withInterval(decl.sourceInterval(326, 331)), this.prim(",").withInterval(decl.sourceInterval(333, 336))]).withInterval(decl.sourceInterval(319, 337)), this.prim(">").withInterval(decl.sourceInterval(338, 341))).withInterval(decl.sourceInterval(315, 341)))
    .define("Params", [], this.seq(this.prim("<").withInterval(decl.sourceInterval(358, 361)), this.app("ListOf", [this.app("Seq").withInterval(decl.sourceInterval(369, 372)), this.prim(",").withInterval(decl.sourceInterval(374, 377))]).withInterval(decl.sourceInterval(362, 378)), this.prim(">").withInterval(decl.sourceInterval(379, 382))).withInterval(decl.sourceInterval(358, 382)))
    .define("Alt", [], this.seq(this.app("Term").withInterval(decl.sourceInterval(396, 400)), this.star(this.seq(this.prim("|").withInterval(decl.sourceInterval(402, 405)), this.app("Term").withInterval(decl.sourceInterval(406, 410))).withInterval(decl.sourceInterval(402, 410))).withInterval(decl.sourceInterval(401, 412))).withInterval(decl.sourceInterval(396, 412)))
    .define("Term_inline", [], this.seq(this.app("Seq").withInterval(decl.sourceInterval(427, 430)), this.app("caseName").withInterval(decl.sourceInterval(431, 439))).withInterval(decl.sourceInterval(427, 439)))
    .define("Term", [], this.alt(this.app("Term_inline").withInterval(decl.sourceInterval(427, 439)), this.app("Seq").withInterval(decl.sourceInterval(456, 459))).withInterval(decl.sourceInterval(427, 459)))
    .define("Seq", [], this.star(this.app("Iter").withInterval(decl.sourceInterval(473, 477))).withInterval(decl.sourceInterval(473, 478)))
    .define("Iter_star", [], this.seq(this.app("Pred").withInterval(decl.sourceInterval(493, 497)), this.prim("*").withInterval(decl.sourceInterval(498, 501))).withInterval(decl.sourceInterval(493, 501)))
    .define("Iter_plus", [], this.seq(this.app("Pred").withInterval(decl.sourceInterval(517, 521)), this.prim("+").withInterval(decl.sourceInterval(522, 525))).withInterval(decl.sourceInterval(517, 525)))
    .define("Iter_opt", [], this.seq(this.app("Pred").withInterval(decl.sourceInterval(541, 545)), this.prim("?").withInterval(decl.sourceInterval(546, 549))).withInterval(decl.sourceInterval(541, 549)))
    .define("Iter", [], this.alt(this.app("Iter_star").withInterval(decl.sourceInterval(493, 501)), this.app("Iter_plus").withInterval(decl.sourceInterval(517, 525)), this.app("Iter_opt").withInterval(decl.sourceInterval(541, 549)), this.app("Pred").withInterval(decl.sourceInterval(564, 568))).withInterval(decl.sourceInterval(493, 568)))
    .define("Pred_not", [], this.seq(this.prim("~").withInterval(decl.sourceInterval(583, 586)), this.app("Lex").withInterval(decl.sourceInterval(587, 590))).withInterval(decl.sourceInterval(583, 590)))
    .define("Pred_lookahead", [], this.seq(this.prim("&").withInterval(decl.sourceInterval(605, 608)), this.app("Lex").withInterval(decl.sourceInterval(609, 612))).withInterval(decl.sourceInterval(605, 612)))
    .define("Pred", [], this.alt(this.app("Pred_not").withInterval(decl.sourceInterval(583, 590)), this.app("Pred_lookahead").withInterval(decl.sourceInterval(605, 612)), this.app("Lex").withInterval(decl.sourceInterval(633, 636))).withInterval(decl.sourceInterval(583, 636)))
    .define("Lex_lex", [], this.seq(this.prim("#").withInterval(decl.sourceInterval(650, 653)), this.app("Base").withInterval(decl.sourceInterval(654, 658))).withInterval(decl.sourceInterval(650, 658)))
    .define("Lex", [], this.alt(this.app("Lex_lex").withInterval(decl.sourceInterval(650, 658)), this.app("Base").withInterval(decl.sourceInterval(673, 677))).withInterval(decl.sourceInterval(650, 677)))
    .define("Base_application", [], this.seq(this.app("ident").withInterval(decl.sourceInterval(692, 697)), this.opt(this.app("Params").withInterval(decl.sourceInterval(698, 704))).withInterval(decl.sourceInterval(698, 705)), this.not(this.alt(this.seq(this.opt(this.app("ruleDescr").withInterval(decl.sourceInterval(708, 717))).withInterval(decl.sourceInterval(708, 718)), this.prim("=").withInterval(decl.sourceInterval(719, 722))).withInterval(decl.sourceInterval(708, 722)), this.prim(":=").withInterval(decl.sourceInterval(725, 729)), this.prim("+=").withInterval(decl.sourceInterval(732, 736))).withInterval(decl.sourceInterval(708, 736))).withInterval(decl.sourceInterval(706, 737))).withInterval(decl.sourceInterval(692, 737)))
    .define("Base_range", [], this.seq(this.app("Prim").withInterval(decl.sourceInterval(760, 764)), this.prim("..").withInterval(decl.sourceInterval(765, 769)), this.app("Prim").withInterval(decl.sourceInterval(770, 774))).withInterval(decl.sourceInterval(760, 774)))
    .define("Base_prim", [], this.app("Prim").withInterval(decl.sourceInterval(822, 826)))
    .define("Base_paren", [], this.seq(this.prim("(").withInterval(decl.sourceInterval(883, 886)), this.app("Alt").withInterval(decl.sourceInterval(887, 890)), this.prim(")").withInterval(decl.sourceInterval(891, 894))).withInterval(decl.sourceInterval(883, 894)))
    .define("Base", [], this.alt(this.app("Base_application").withInterval(decl.sourceInterval(692, 737)), this.app("Base_range").withInterval(decl.sourceInterval(760, 774)), this.app("Base_prim").withInterval(decl.sourceInterval(822, 826)), this.app("Base_paren").withInterval(decl.sourceInterval(883, 894))).withInterval(decl.sourceInterval(692, 938)))
    .define("Prim", [], this.alt(this.app("keyword").withInterval(decl.sourceInterval(953, 960)), this.app("string").withInterval(decl.sourceInterval(967, 973)), this.app("number").withInterval(decl.sourceInterval(980, 986))).withInterval(decl.sourceInterval(953, 986)))
    .define("ruleDescr", [], this.seq(this.prim("(").withInterval(decl.sourceInterval(1028, 1031)), this.app("ruleDescrText").withInterval(decl.sourceInterval(1032, 1045)), this.prim(")").withInterval(decl.sourceInterval(1046, 1049))).withInterval(decl.sourceInterval(1028, 1049)), "a rule description")
    .define("ruleDescrText", [], this.star(this.seq(this.not(this.prim(")").withInterval(decl.sourceInterval(1075, 1078))).withInterval(decl.sourceInterval(1074, 1078)), this.app("any").withInterval(decl.sourceInterval(1079, 1082))).withInterval(decl.sourceInterval(1074, 1082))).withInterval(decl.sourceInterval(1073, 1084)))
    .define("caseName", [], this.seq(this.prim("--").withInterval(decl.sourceInterval(1103, 1107)), this.star(this.seq(this.not(this.prim("\n").withInterval(decl.sourceInterval(1110, 1114))).withInterval(decl.sourceInterval(1109, 1114)), this.app("space").withInterval(decl.sourceInterval(1115, 1120))).withInterval(decl.sourceInterval(1109, 1120))).withInterval(decl.sourceInterval(1108, 1122)), this.app("name").withInterval(decl.sourceInterval(1123, 1127)), this.star(this.seq(this.not(this.prim("\n").withInterval(decl.sourceInterval(1130, 1134))).withInterval(decl.sourceInterval(1129, 1134)), this.app("space").withInterval(decl.sourceInterval(1135, 1140))).withInterval(decl.sourceInterval(1129, 1140))).withInterval(decl.sourceInterval(1128, 1142)), this.alt(this.prim("\n").withInterval(decl.sourceInterval(1144, 1148)), this.la(this.prim("}").withInterval(decl.sourceInterval(1152, 1155))).withInterval(decl.sourceInterval(1151, 1155))).withInterval(decl.sourceInterval(1144, 1155))).withInterval(decl.sourceInterval(1103, 1156)))
    .define("name", [], this.seq(this.app("nameFirst").withInterval(decl.sourceInterval(1181, 1190)), this.star(this.app("nameRest").withInterval(decl.sourceInterval(1191, 1199))).withInterval(decl.sourceInterval(1191, 1200))).withInterval(decl.sourceInterval(1181, 1200)), "a name")
    .define("nameFirst", [], this.alt(this.prim("_").withInterval(decl.sourceInterval(1220, 1223)), this.app("letter").withInterval(decl.sourceInterval(1230, 1236))).withInterval(decl.sourceInterval(1220, 1236)))
    .define("nameRest", [], this.alt(this.prim("_").withInterval(decl.sourceInterval(1255, 1258)), this.app("alnum").withInterval(decl.sourceInterval(1265, 1270))).withInterval(decl.sourceInterval(1255, 1270)))
    .define("ident", [], this.seq(this.not(this.app("keyword").withInterval(decl.sourceInterval(1304, 1311))).withInterval(decl.sourceInterval(1303, 1311)), this.app("name").withInterval(decl.sourceInterval(1312, 1316))).withInterval(decl.sourceInterval(1303, 1316)), "an identifier")
    .define("keyword_null", [], this.seq(this.prim("null").withInterval(decl.sourceInterval(1334, 1340)), this.not(this.app("nameRest").withInterval(decl.sourceInterval(1342, 1350))).withInterval(decl.sourceInterval(1341, 1350))).withInterval(decl.sourceInterval(1334, 1350)))
    .define("keyword_true", [], this.seq(this.prim("true").withInterval(decl.sourceInterval(1367, 1373)), this.not(this.app("nameRest").withInterval(decl.sourceInterval(1375, 1383))).withInterval(decl.sourceInterval(1374, 1383))).withInterval(decl.sourceInterval(1367, 1383)))
    .define("keyword_false", [], this.seq(this.prim("false").withInterval(decl.sourceInterval(1400, 1407)), this.not(this.app("nameRest").withInterval(decl.sourceInterval(1409, 1417))).withInterval(decl.sourceInterval(1408, 1417))).withInterval(decl.sourceInterval(1400, 1417)))
    .define("keyword", [], this.alt(this.app("keyword_null").withInterval(decl.sourceInterval(1334, 1350)), this.app("keyword_true").withInterval(decl.sourceInterval(1367, 1383)), this.app("keyword_false").withInterval(decl.sourceInterval(1400, 1417))).withInterval(decl.sourceInterval(1334, 1427)))
    .define("string", [], this.seq(this.prim("\"").withInterval(decl.sourceInterval(1444, 1448)), this.star(this.app("strChar").withInterval(decl.sourceInterval(1449, 1456))).withInterval(decl.sourceInterval(1449, 1457)), this.prim("\"").withInterval(decl.sourceInterval(1458, 1462))).withInterval(decl.sourceInterval(1444, 1462)))
    .define("strChar", [], this.alt(this.app("escapeChar").withInterval(decl.sourceInterval(1480, 1490)), this.seq(this.not(this.prim("\\").withInterval(decl.sourceInterval(1498, 1502))).withInterval(decl.sourceInterval(1497, 1502)), this.not(this.prim("\"").withInterval(decl.sourceInterval(1504, 1508))).withInterval(decl.sourceInterval(1503, 1508)), this.not(this.prim("\n").withInterval(decl.sourceInterval(1510, 1514))).withInterval(decl.sourceInterval(1509, 1514)), this.app("any").withInterval(decl.sourceInterval(1515, 1518))).withInterval(decl.sourceInterval(1497, 1518))).withInterval(decl.sourceInterval(1480, 1518)))
    .define("escapeChar_backslash", [], this.prim("\\\\").withInterval(decl.sourceInterval(1561, 1567)))
    .define("escapeChar_doubleQuote", [], this.prim("\\\"").withInterval(decl.sourceInterval(1623, 1629)))
    .define("escapeChar_singleQuote", [], this.prim("\\'").withInterval(decl.sourceInterval(1687, 1693)))
    .define("escapeChar_backspace", [], this.prim("\\b").withInterval(decl.sourceInterval(1751, 1756)))
    .define("escapeChar_lineFeed", [], this.prim("\\n").withInterval(decl.sourceInterval(1813, 1818)))
    .define("escapeChar_carriageReturn", [], this.prim("\\r").withInterval(decl.sourceInterval(1874, 1879)))
    .define("escapeChar_tab", [], this.prim("\\t").withInterval(decl.sourceInterval(1941, 1946)))
    .define("escapeChar_unicodeEscape", [], this.seq(this.prim("\\u").withInterval(decl.sourceInterval(1997, 2002)), this.app("hexDigit").withInterval(decl.sourceInterval(2003, 2011)), this.app("hexDigit").withInterval(decl.sourceInterval(2012, 2020)), this.app("hexDigit").withInterval(decl.sourceInterval(2021, 2029)), this.app("hexDigit").withInterval(decl.sourceInterval(2030, 2038))).withInterval(decl.sourceInterval(1997, 2038)))
    .define("escapeChar_hexEscape", [], this.seq(this.prim("\\x").withInterval(decl.sourceInterval(2063, 2068)), this.app("hexDigit").withInterval(decl.sourceInterval(2069, 2077)), this.app("hexDigit").withInterval(decl.sourceInterval(2078, 2086))).withInterval(decl.sourceInterval(2063, 2086)))
    .define("escapeChar", [], this.alt(this.app("escapeChar_backslash").withInterval(decl.sourceInterval(1561, 1567)), this.app("escapeChar_doubleQuote").withInterval(decl.sourceInterval(1623, 1629)), this.app("escapeChar_singleQuote").withInterval(decl.sourceInterval(1687, 1693)), this.app("escapeChar_backspace").withInterval(decl.sourceInterval(1751, 1756)), this.app("escapeChar_lineFeed").withInterval(decl.sourceInterval(1813, 1818)), this.app("escapeChar_carriageReturn").withInterval(decl.sourceInterval(1874, 1879)), this.app("escapeChar_tab").withInterval(decl.sourceInterval(1941, 1946)), this.app("escapeChar_unicodeEscape").withInterval(decl.sourceInterval(1997, 2038)), this.app("escapeChar_hexEscape").withInterval(decl.sourceInterval(2063, 2086))).withInterval(decl.sourceInterval(1561, 2118)), "an escape sequence")
    .define("number", [], this.seq(this.opt(this.prim("-").withInterval(decl.sourceInterval(2147, 2150))).withInterval(decl.sourceInterval(2147, 2151)), this.plus(this.app("digit").withInterval(decl.sourceInterval(2152, 2157))).withInterval(decl.sourceInterval(2152, 2158))).withInterval(decl.sourceInterval(2147, 2158)), "a number")
    .extend("space", [], this.app("comment").withInterval(decl.sourceInterval(2174, 2181)))
    .define("comment_singleLine", [], this.seq(this.prim("//").withInterval(decl.sourceInterval(2199, 2203)), this.star(this.seq(this.not(this.prim("\n").withInterval(decl.sourceInterval(2206, 2210))).withInterval(decl.sourceInterval(2205, 2210)), this.app("any").withInterval(decl.sourceInterval(2211, 2214))).withInterval(decl.sourceInterval(2205, 2214))).withInterval(decl.sourceInterval(2204, 2216)), this.prim("\n").withInterval(decl.sourceInterval(2217, 2221))).withInterval(decl.sourceInterval(2199, 2221)))
    .define("comment_multiLine", [], this.seq(this.prim("/*").withInterval(decl.sourceInterval(2243, 2247)), this.star(this.seq(this.not(this.prim("*/").withInterval(decl.sourceInterval(2250, 2254))).withInterval(decl.sourceInterval(2249, 2254)), this.app("any").withInterval(decl.sourceInterval(2255, 2258))).withInterval(decl.sourceInterval(2249, 2258))).withInterval(decl.sourceInterval(2248, 2260)), this.prim("*/").withInterval(decl.sourceInterval(2261, 2265))).withInterval(decl.sourceInterval(2243, 2265)))
    .define("comment", [], this.alt(this.app("comment_singleLine").withInterval(decl.sourceInterval(2199, 2221)), this.app("comment_multiLine").withInterval(decl.sourceInterval(2243, 2265))).withInterval(decl.sourceInterval(2199, 2279)))
    .define("tokens", [], this.star(this.app("token").withInterval(decl.sourceInterval(2292, 2297))).withInterval(decl.sourceInterval(2292, 2298)))
    .define("token", [], this.alt(this.app("caseName").withInterval(decl.sourceInterval(2310, 2318)), this.app("comment").withInterval(decl.sourceInterval(2321, 2328)), this.app("ident").withInterval(decl.sourceInterval(2331, 2336)), this.app("keyword").withInterval(decl.sourceInterval(2339, 2346)), this.app("number").withInterval(decl.sourceInterval(2349, 2355)), this.app("operator").withInterval(decl.sourceInterval(2358, 2366)), this.app("punctuation").withInterval(decl.sourceInterval(2369, 2380)), this.app("string").withInterval(decl.sourceInterval(2383, 2389)), this.app("any").withInterval(decl.sourceInterval(2392, 2395))).withInterval(decl.sourceInterval(2310, 2395)))
    .define("operator", [], this.alt(this.prim("<:").withInterval(decl.sourceInterval(2410, 2414)), this.prim("=").withInterval(decl.sourceInterval(2417, 2420)), this.prim(":=").withInterval(decl.sourceInterval(2423, 2427)), this.prim("+=").withInterval(decl.sourceInterval(2430, 2434)), this.prim("*").withInterval(decl.sourceInterval(2437, 2440)), this.prim("+").withInterval(decl.sourceInterval(2443, 2446)), this.prim("?").withInterval(decl.sourceInterval(2449, 2452)), this.prim("~").withInterval(decl.sourceInterval(2455, 2458)), this.prim("&").withInterval(decl.sourceInterval(2461, 2464))).withInterval(decl.sourceInterval(2410, 2464)))
    .define("punctuation", [], this.alt(this.prim("<").withInterval(decl.sourceInterval(2482, 2485)), this.prim(">").withInterval(decl.sourceInterval(2488, 2491)), this.prim(",").withInterval(decl.sourceInterval(2494, 2497)), this.prim("--").withInterval(decl.sourceInterval(2500, 2504))).withInterval(decl.sourceInterval(2482, 2504)))
    .build();
});


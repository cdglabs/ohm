/*
  This grammar was originally based on Tom Van Cutsem's ES5 parser from the
  es-lab project (https://github.com/tvcutsem/es-lab/blob/master/src/parser/es5parser.ojs),
  and was adapted to Ohm by Tony Garnock-Jones <tonygarnockjones@gmail.com> in 2014.

  The original copyright and license follows:
*/

// Copyright (C) 2009 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/* (end of original copyright and license) */

ES5 {

  Program = &(Directive*) SourceElement*

  // Â§A.1 Lexical Grammar -- https://es5.github.io/#A.1

  /*
    Note: the following lexical conventions (see https://es5.github.io/#x7)
    are not implemented in this parser.

    // Goal production in contexts where a leading "/" or "/=" is permitted:
    InputElementDiv = whitespace | lineTerminator | comment | token | DivPunctuator

    // Goal production in contexts where a leading "/" or "/=' is not permitted:
    InputElementRegExp = whitespace | lineTerminator | comment | token | regularExpressionLiteral
  */

  sourceCharacter = any

  // Override Ohm's built-in definition of space.
  space := whitespace | lineTerminator | comment

  whitespace = "\t"
             | "\x0B"    -- verticalTab
             | "\x0C"    -- formFeed
             | " "
             | "\u00A0"  -- noBreakSpace
             | "\uFEFF"  -- byteOrderMark
             | unicodeSpaceSeparator

  lineTerminator = "\n" | "\r" | "\u2028" | "\u2029"
  lineTerminatorSequence = "\n" | "\r" ~"\n" | "\u2028" | "\u2029" | "\r\n"

  comment = multiLineComment | singleLineComment

  multiLineComment = "/*" (~"*/" sourceCharacter)* "*/"
  singleLineComment = "//" (~lineTerminator sourceCharacter)*

  identifier (an identifier) = ~reservedWord identifierName
  identifierName = identifierStart identifierPart*

  identifierStart = letter | "$" | "_"
                  | otherStart
                  | "\\" unicodeEscapeSequence -- escaped
  identifierPart = identifierStart | unicodeCombiningMark
                 | unicodeDigit | unicodeConnectorPunctuation
                 | otherContinue
                 | "\u200C" | "\u200D"
  letter += unicodeCategoryNl

  unicodeCategoryNl
    = "\u2160".."\u2182" | "\u3007" | "\u3021".."\u3029"
  unicodeDigit (a digit)
    = "\u0030".."\u0039" | "\u0660".."\u0669" | "\u06F0".."\u06F9" | "\u0966".."\u096F" | "\u09E6".."\u09EF" | "\u0A66".."\u0A6F" | "\u0AE6".."\u0AEF" | "\u0B66".."\u0B6F" | "\u0BE7".."\u0BEF" | "\u0C66".."\u0C6F" | "\u0CE6".."\u0CEF" | "\u0D66".."\u0D6F" | "\u0E50".."\u0E59" | "\u0ED0".."\u0ED9" | "\u0F20".."\u0F29" | "\uFF10".."\uFF19"

  unicodeCombiningMark (a Unicode combining mark)
    = "\u0300".."\u0345" | "\u0360".."\u0361" | "\u0483".."\u0486" | "\u0591".."\u05A1" | "\u05A3".."\u05B9" | "\u05BB".."\u05BD" | "\u05BF".."\u05BF" | "\u05C1".."\u05C2" | "\u05C4".."\u05C4" | "\u064B".."\u0652" | "\u0670".."\u0670" | "\u06D6".."\u06DC" | "\u06DF".."\u06E4" | "\u06E7".."\u06E8" | "\u06EA".."\u06ED" | "\u0901".."\u0902" | "\u093C".."\u093C" | "\u0941".."\u0948" | "\u094D".."\u094D" | "\u0951".."\u0954" | "\u0962".."\u0963" | "\u0981".."\u0981" | "\u09BC".."\u09BC" | "\u09C1".."\u09C4" | "\u09CD".."\u09CD" | "\u09E2".."\u09E3" | "\u0A02".."\u0A02" | "\u0A3C".."\u0A3C" | "\u0A41".."\u0A42" | "\u0A47".."\u0A48" | "\u0A4B".."\u0A4D" | "\u0A70".."\u0A71" | "\u0A81".."\u0A82" | "\u0ABC".."\u0ABC" | "\u0AC1".."\u0AC5" | "\u0AC7".."\u0AC8" | "\u0ACD".."\u0ACD" | "\u0B01".."\u0B01" | "\u0B3C".."\u0B3C" | "\u0B3F".."\u0B3F" | "\u0B41".."\u0B43" | "\u0B4D".."\u0B4D" | "\u0B56".."\u0B56" | "\u0B82".."\u0B82" | "\u0BC0".."\u0BC0" | "\u0BCD".."\u0BCD" | "\u0C3E".."\u0C40" | "\u0C46".."\u0C48" | "\u0C4A".."\u0C4D" | "\u0C55".."\u0C56" | "\u0CBF".."\u0CBF" | "\u0CC6".."\u0CC6" | "\u0CCC".."\u0CCD" | "\u0D41".."\u0D43" | "\u0D4D".."\u0D4D" | "\u0E31".."\u0E31" | "\u0E34".."\u0E3A" | "\u0E47".."\u0E4E" | "\u0EB1".."\u0EB1" | "\u0EB4".."\u0EB9" | "\u0EBB".."\u0EBC" | "\u0EC8".."\u0ECD" | "\u0F18".."\u0F19" | "\u0F35".."\u0F35" | "\u0F37".."\u0F37" | "\u0F39".."\u0F39" | "\u0F71".."\u0F7E" | "\u0F80".."\u0F84" | "\u0F86".."\u0F87" | "\u0F90".."\u0F95" | "\u0F97".."\u0F97" | "\u0F99".."\u0FAD" | "\u0FB1".."\u0FB7" | "\u0FB9".."\u0FB9" | "\u20D0".."\u20DC" | "\u20E1".."\u20E1" | "\u302A".."\u302F" | "\u3099".."\u309A" | "\uFB1E".."\uFB1E" | "\uFE20".."\uFE23"

  otherStart = "\u0138" | "\u0149" | "\u0179" | "\u017F".."\u0180" | "\u0187" | "\u018A".."\u018B" | "\u018F".."\u0191" | "\u0194" | "\u0197".."\u0198" | "\u019D" | "\u01A0" | "\u01A7" | "\u01AF" | "\u01B2".."\u01B3" | "\u01B8" | "\u01BF".."\u01C3" | "\u01DD" | "\u01F0" | "\u01F6".."\u01F9" | "\u0218".."\u024F" | "\u02A9".."\u02AF" | "\u02B9".."\u02BA" | "\u02C6".."\u02CF" | "\u02EC" | "\u02EE" | "\u0370".."\u0374" | "\u0376".."\u0377" | "\u037B".."\u037D" | "\u037F" | "\u0392".."\u03A1" | "\u03AD".."\u03CF" | "\u03D3".."\u03D4" | "\u03D7".."\u03D9" | "\u03DB" | "\u03DD" | "\u03DF" | "\u03E1" | "\u03F0".."\u03F2" | "\u03F4".."\u03F5" | "\u03F7".."\u0400" | "\u040D" | "\u0431".."\u0450" | "\u045D" | "\u048A".."\u048F" | "\u04C5".."\u04C6" | "\u04C9".."\u04CA" | "\u04CD".."\u04CF" | "\u04EC".."\u04ED" | "\u04F6".."\u04F7" | "\u04FA".."\u052F" | "\u0620" | "\u063B".."\u063F" | "\u0642".."\u064A" | "\u066E".."\u066F" | "\u06B8".."\u06B9" | "\u06BF" | "\u06CF" | "\u06EE".."\u06EF" | "\u06FA".."\u06FC" | "\u06FF" | "\u0710" | "\u0712".."\u072F" | "\u074D".."\u07A5" | "\u07B1" | "\u07CA".."\u07EA" | "\u07F4".."\u07F5" | "\u07FA" | "\u0800".."\u0815" | "\u081A" | "\u0824" | "\u0828" | "\u0840".."\u0858" | "\u08A0".."\u08B4" | "\u0904" | "\u0971".."\u0980" | "\u09BD" | "\u09CE" | "\u0A8C" | "\u0AE1" | "\u0AF9" | "\u0B35" | "\u0B71" | "\u0B83" | "\u0BB6" | "\u0BD0" | "\u0C34" | "\u0C3D" | "\u0C58".."\u0C5A" | "\u0CBD" | "\u0CF1".."\u0CF2" | "\u0D29" | "\u0D3A" | "\u0D3D" | "\u0D4E" | "\u0D5F" | "\u0D7A".."\u0D7F" | "\u0D85".."\u0D96" | "\u0D9A".."\u0DB1" | "\u0DB3".."\u0DBB" | "\u0DBD" | "\u0DC0".."\u0DC6" | "\u0EDE".."\u0EDF" | "\u0F6A".."\u0F6C" | "\u0F8C" | "\u1000".."\u102A" | "\u103F" | "\u1050".."\u1055" | "\u105A".."\u105D" | "\u1061" | "\u1065".."\u1066" | "\u106E".."\u1070" | "\u1075".."\u1081" | "\u108E" | "\u10C7" | "\u10CD" | "\u10F7".."\u10FA" | "\u10FC".."\u10FF" | "\u115A".."\u115E" | "\u11A3".."\u11A7" | "\u11FA".."\u1248" | "\u124A".."\u124D" | "\u1250".."\u1256" | "\u1258" | "\u125A".."\u125D" | "\u1260".."\u1288" | "\u128A".."\u128D" | "\u1290".."\u12B0" | "\u12B2".."\u12B5" | "\u12B8".."\u12BE" | "\u12C0" | "\u12C2".."\u12C5" | "\u12C8".."\u12D6" | "\u12D8".."\u1310" | "\u1312".."\u1315" | "\u1318".."\u135A" | "\u1380".."\u138F" | "\u13A0".."\u13F5" | "\u13F8".."\u13FD" | "\u1401".."\u166C" | "\u166F".."\u167F" | "\u1681".."\u169A" | "\u16A0".."\u16EA" | "\u16EE".."\u16F8" | "\u1700".."\u170C" | "\u170E".."\u1711" | "\u1720".."\u1731" | "\u1740".."\u1751" | "\u1760".."\u176C" | "\u176E".."\u1770" | "\u1780".."\u17B3" | "\u17D7" | "\u17DC" | "\u1820".."\u1877" | "\u1880".."\u18A8" | "\u18AA" | "\u18B0".."\u18F5" | "\u1900".."\u191E" | "\u1950".."\u196D" | "\u1970".."\u1974" | "\u1980".."\u19AB" | "\u19B0".."\u19C9" | "\u1A00".."\u1A16" | "\u1A20".."\u1A54" | "\u1AA7" | "\u1B05".."\u1B33" | "\u1B45".."\u1B4B" | "\u1B83".."\u1BA0" | "\u1BAE".."\u1BAF" | "\u1BBA".."\u1BE5" | "\u1C00".."\u1C23" | "\u1C4D".."\u1C4F" | "\u1C5A".."\u1C7D" | "\u1CE9".."\u1CEC" | "\u1CEE".."\u1CF1" | "\u1CF5".."\u1CF6" | "\u1D00".."\u1DBF" | "\u1E96".."\u1E9F" | "\u1EFA".."\u1EFF" | "\u1F09".."\u1F0F" | "\u1F29".."\u1F2F" | "\u1F39".."\u1F3F" | "\u1F61".."\u1F67" | "\u1F71".."\u1F7D" | "\u1F89".."\u1F8F" | "\u1F99".."\u1F9F" | "\u1FA9".."\u1FAF" | "\u1FB9".."\u1FBC" | "\u1FC9".."\u1FCC" | "\u1FD9".."\u1FDB" | "\u1FE9".."\u1FEC" | "\u1FF9".."\u1FFC" | "\u2071" | "\u2090".."\u209C" | "\u210C".."\u210D" | "\u2111".."\u2112" | "\u211A".."\u211D" | "\u212F" | "\u2132" | "\u2136".."\u2139" | "\u213C".."\u213F" | "\u2145".."\u2149" | "\u214E" | "\u2183".."\u2188" | "\u2C00".."\u2C2E" | "\u2C30".."\u2C5E" | "\u2C60".."\u2CE4" | "\u2CEB".."\u2CEE" | "\u2CF2".."\u2CF3" | "\u2D00".."\u2D25" | "\u2D27" | "\u2D2D" | "\u2D30".."\u2D67" | "\u2D6F" | "\u2D80".."\u2D96" | "\u2DA0".."\u2DA6" | "\u2DA8".."\u2DAE" | "\u2DB0".."\u2DB6" | "\u2DB8".."\u2DBE" | "\u2DC0".."\u2DC6" | "\u2DC8".."\u2DCE" | "\u2DD0".."\u2DD6" | "\u2DD8".."\u2DDE" | "\u2E2F" | "\u3038".."\u303C" | "\u3095".."\u3096" | "\u309F" | "\u30FF" | "\u312D" | "\u31A0".."\u31BA" | "\u31F0".."\u31FF" | "\u3400".."\u4DB5" | "\u9FA6".."\u9FD5" | "\uA000".."\uA48C" | "\uA4D0".."\uA4FD" | "\uA500".."\uA60C" | "\uA610".."\uA61F" | "\uA62A".."\uA62B" | "\uA640".."\uA66E" | "\uA67F".."\uA69D" | "\uA6A0".."\uA6EF" | "\uA717".."\uA71F" | "\uA722".."\uA788" | "\uA78B".."\uA7AD" | "\uA7B0".."\uA7B7" | "\uA7F7".."\uA801" | "\uA803".."\uA805" | "\uA807".."\uA80A" | "\uA80C".."\uA822" | "\uA840".."\uA873" | "\uA882".."\uA8B3" | "\uA8F2".."\uA8F7" | "\uA8FB" | "\uA8FD" | "\uA90A".."\uA925" | "\uA930".."\uA946" | "\uA960".."\uA97C" | "\uA984".."\uA9B2" | "\uA9CF" | "\uA9E0".."\uA9E4" | "\uA9E6".."\uA9EF" | "\uA9FA".."\uA9FE" | "\uAA00".."\uAA28" | "\uAA40".."\uAA42" | "\uAA44".."\uAA4B" | "\uAA60".."\uAA76" | "\uAA7A" | "\uAA7E".."\uAAAF" | "\uAAB1" | "\uAAB5".."\uAAB6" | "\uAAB9".."\uAABD" | "\uAAC0" | "\uAAC2" | "\uAADB".."\uAADD" | "\uAAE0".."\uAAEA" | "\uAAF2".."\uAAF4" | "\uAB01".."\uAB06" | "\uAB09".."\uAB0E" | "\uAB11".."\uAB16" | "\uAB20".."\uAB26" | "\uAB28".."\uAB2E" | "\uAB30".."\uAB5A" | "\uAB5C".."\uAB65" | "\uAB70".."\uABE2" | "\uD7B0".."\uD7C6" | "\uD7CB".."\uD7FB" | "\uFA2E".."\uFA6D" | "\uFA70".."\uFAD9" | "\uFB1D" | "\uFE73" | "\uFF72".."\uFF9D" | "\uFFA1".."\uFFBE"

  otherContinue = "\u0346".."\u035F" | "\u0362".."\u036F" | "\u0487" | "\u05A2" | "\u05BA" | "\u05C5" | "\u05C7" | "\u0610".."\u061A" | "\u0653".."\u065F" | "\u0672".."\u06B7" | "\u06D7".."\u06DC" | "\u06E6" | "\u0711" | "\u0730".."\u074A" | "\u07A6".."\u07B0" | "\u07C0".."\u07C9" | "\u07EB".."\u07F3" | "\u0816".."\u0819" | "\u081B".."\u0823" | "\u0825".."\u0827" | "\u0829".."\u082D" | "\u0859".."\u085B" | "\u08E3".."\u0900" | "\u0903" | "\u093A".."\u093B" | "\u093E".."\u0940" | "\u0949".."\u094C" | "\u094E".."\u094F" | "\u0952".."\u0957" | "\u0963" | "\u0982".."\u0983" | "\u09BE".."\u09C0" | "\u09C7".."\u09C8" | "\u09CB".."\u09CC" | "\u09D7" | "\u09E3" | "\u09F1" | "\u0A01" | "\u0A03" | "\u0A3E".."\u0A40" | "\u0A51" | "\u0A71" | "\u0A75" | "\u0A83" | "\u0ABE".."\u0AC0" | "\u0AC9" | "\u0ACB".."\u0ACC" | "\u0AE2".."\u0AE3" | "\u0B02".."\u0B03" | "\u0B3E" | "\u0B40" | "\u0B44" | "\u0B47".."\u0B48" | "\u0B4B".."\u0B4C" | "\u0B57" | "\u0B62".."\u0B63" | "\u0BBE".."\u0BBF" | "\u0BC1".."\u0BC2" | "\u0BC6".."\u0BC8" | "\u0BCA".."\u0BCC" | "\u0BD7" | "\u0BE6" | "\u0C00".."\u0C03" | "\u0C41".."\u0C44" | "\u0C62".."\u0C63" | "\u0C81".."\u0C83" | "\u0CBC" | "\u0CBE" | "\u0CC0".."\u0CC4" | "\u0CC7".."\u0CC8" | "\u0CCA".."\u0CCB" | "\u0CD5".."\u0CD6" | "\u0CE2".."\u0CE3" | "\u0D01".."\u0D03" | "\u0D3E".."\u0D40" | "\u0D44" | "\u0D46".."\u0D48" | "\u0D4A".."\u0D4C" | "\u0D57" | "\u0D62".."\u0D63" | "\u0D82".."\u0D83" | "\u0DCA" | "\u0DCF".."\u0DD4" | "\u0DD6" | "\u0DD8".."\u0DDF" | "\u0DE6".."\u0DEF" | "\u0DF2".."\u0DF3" | "\u0E33" | "\u0E48".."\u0E4E" | "\u0EB3" | "\u0F3E".."\u0F3F" | "\u0F7F" | "\u0F89".."\u0F8B" | "\u0F8D".."\u0F8F" | "\u0F96" | "\u0FAE".."\u0FB0" | "\u0FB8" | "\u0FBA".."\u0FBC" | "\u0FC6" | "\u102B".."\u103E" | "\u1040".."\u1049" | "\u1056".."\u1059" | "\u105E".."\u1060" | "\u1062".."\u1064" | "\u1067".."\u106D" | "\u1071".."\u1074" | "\u1082".."\u108D" | "\u108F".."\u109D" | "\u135D".."\u135F" | "\u1712".."\u1714" | "\u1732".."\u1734" | "\u1752".."\u1753" | "\u1772".."\u1773" | "\u17B4".."\u17D3" | "\u17DD" | "\u17E0".."\u17E9" | "\u180B".."\u180D" | "\u1810".."\u1819" | "\u18A9" | "\u1920".."\u192B" | "\u1930".."\u193B" | "\u1946".."\u194F" | "\u19D0".."\u19D9" | "\u1A17".."\u1A1B" | "\u1A55".."\u1A5E" | "\u1A60".."\u1A7C" | "\u1A7F".."\u1A89" | "\u1A90".."\u1A99" | "\u1AB0".."\u1ABD" | "\u1B00".."\u1B04" | "\u1B34".."\u1B44" | "\u1B50".."\u1B59" | "\u1B6B".."\u1B73" | "\u1B80".."\u1B82" | "\u1BA1".."\u1BAD" | "\u1BB0".."\u1BB9" | "\u1BE6".."\u1BF3" | "\u1C24".."\u1C37" | "\u1C40".."\u1C49" | "\u1C50".."\u1C59" | "\u1CD0".."\u1CD2" | "\u1CD4".."\u1CE8" | "\u1CED" | "\u1CF2".."\u1CF4" | "\u1CF8".."\u1CF9" | "\u1DC0".."\u1DF5" | "\u1DFC".."\u1DFF" | "\u2054" | "\u20E5".."\u20F0" | "\u2CEF".."\u2CF1" | "\u2D7F" | "\u2DE0".."\u2DFF" | "\u302B".."\u302F" | "\u30FD".."\u30FE" | "\uA620".."\uA629" | "\uA66F" | "\uA674".."\uA67D" | "\uA69E".."\uA69F" | "\uA6F0".."\uA6F1" | "\uA802" | "\uA806" | "\uA80B" | "\uA823".."\uA827" | "\uA880".."\uA881" | "\uA8B4".."\uA8C4" | "\uA8D0".."\uA8D9" | "\uA8E0".."\uA8F1" | "\uA900".."\uA909" | "\uA926".."\uA92D" | "\uA947".."\uA953" | "\uA980".."\uA983" | "\uA9B3".."\uA9C0" | "\uA9D0".."\uA9D9" | "\uA9E5" | "\uA9F0".."\uA9F9" | "\uAA29".."\uAA36" | "\uAA43" | "\uAA4C".."\uAA4D" | "\uAA50".."\uAA59" | "\uAA7B".."\uAA7D" | "\uAAB0" | "\uAAB2".."\uAAB4" | "\uAAB7".."\uAAB8" | "\uAABE".."\uAABF" | "\uAAC1" | "\uAAEB".."\uAAEF" | "\uAAF5".."\uAAF6" | "\uABE3".."\uABEA" | "\uABEC".."\uABED" | "\uABF0".."\uABF9" | "\uFB20".."\uFB28" | "\uFE00".."\uFE0F" | "\uFE24".."\uFE2F" | "\uFF67".."\uFF6F"

  unicodeConnectorPunctuation = "\u005F" | "\u203F".."\u2040" | "\u30FB" | "\uFE33".."\uFE34" | "\uFE4D".."\uFE4F" | "\uFF3F" | "\uFF65"
  unicodeSpaceSeparator = "\u2000".."\u200B" | "\u3000"

  reservedWord = keyword | futureReservedWord | nullLiteral | booleanLiteral

  // Note: keywords that are the complete prefix of another keyword should
  // be prioritized (e.g. 'in' should come before 'instanceof')
  keyword = break    | do        | instanceof | typeof
          | case     | else      | new        | var
          | catch    | finally   | return     | void
          | continue | for       | switch     | while
          | debugger | function  | this       | with
          | default  | if        | throw
          | delete   | in        | try

  futureReservedWordLax = class  | enum  | extends
                        | super  | const | export
                        | import

  futureReservedWordStrict = futureReservedWordLax
                           | implements | let     | private   | public
                           | interface  | package | protected | static
                           | yield

  futureReservedWord = futureReservedWordStrict

  /*
    Note: Punctuator and DivPunctuator (see https://es5.github.io/x7.html#x7.7) are
    not currently used by this grammar.
  */

  literal = nullLiteral | booleanLiteral | numericLiteral
          | stringLiteral | regularExpressionLiteral // spec forgot Regexp literals in appendix?
  nullLiteral = "null" ~identifierPart
  booleanLiteral = ("true" | "false") ~identifierPart

  // For semantics on how decimal literals are constructed, see section 7.8.3

  // Note that the ordering of hexIntegerLiteral and decimalLiteral is reversed w.r.t. the spec
  // This is intentional: the order decimalLiteral | hexIntegerLiteral will parse
  // "0x..." as a decimal literal "0" followed by "x..."
  numericLiteral = octalIntegerLiteral | hexIntegerLiteral | decimalLiteral

  decimalLiteral = decimalIntegerLiteral "." decimalDigit* exponentPart -- bothParts
                 |                       "." decimalDigit+ exponentPart -- decimalsOnly
                 | decimalIntegerLiteral                   exponentPart -- integerOnly

  decimalIntegerLiteral = nonZeroDigit decimalDigit*  -- nonZero
                        | "0"                         -- zero
  decimalDigit = "0".."9"
  nonZeroDigit = "1".."9"

  exponentPart = exponentIndicator signedInteger -- present
               |                                 -- absent
  exponentIndicator = "e" | "E"
  signedInteger = "+" decimalDigit* -- positive
                | "-" decimalDigit* -- negative
                |     decimalDigit+ -- noSign

  hexIntegerLiteral = "0x" hexDigit+
                    | "0X" hexDigit+

  // hexDigit defined in Ohm's built-in rules (otherwise: hexDigit = "0".."9" | "a".."f" | "A".."F")

  octalIntegerLiteral = "0" octalDigit+

  octalDigit = "0".."7"

  // For semantics on how string literals are constructed, see section 7.8.4
  stringLiteral = "\"" doubleStringCharacter* "\""
                | "'" singleStringCharacter* "'"
  doubleStringCharacter = ~("\"" | "\\" | lineTerminator) sourceCharacter -- nonEscaped
                        | "\\" escapeSequence                             -- escaped
                        | lineContinuation                                -- lineContinuation
  singleStringCharacter = ~("'" | "\\" | lineTerminator) sourceCharacter -- nonEscaped
                        | "\\" escapeSequence                            -- escaped
                        | lineContinuation                               -- lineContinuation
  lineContinuation = "\\" lineTerminatorSequence
  escapeSequence = unicodeEscapeSequence
                 | hexEscapeSequence
                 | octalEscapeSequence
                 | characterEscapeSequence  // Must come last.
  characterEscapeSequence = singleEscapeCharacter
                          | nonEscapeCharacter
  singleEscapeCharacter = "'" | "\"" | "\\" | "b" | "f" | "n" | "r" | "t" | "v"
  nonEscapeCharacter = ~(escapeCharacter | lineTerminator) sourceCharacter
  escapeCharacter = singleEscapeCharacter | decimalDigit | "x" | "u"
  octalEscapeSequence = zeroToThree octalDigit octalDigit    -- whole
                      | fourToSeven octalDigit               -- eightTimesfourToSeven
                      | zeroToThree octalDigit ~decimalDigit -- eightTimesZeroToThree
                      | octalDigit ~decimalDigit             -- octal
  hexEscapeSequence = "x" hexDigit hexDigit
  unicodeEscapeSequence = "u" hexDigit hexDigit hexDigit hexDigit

  zeroToThree = "0".."3"
  fourToSeven = "4".."7"

  // Â§7.8.5 Regular Expression Literals -- https://es5.github.io/#x7.8.5

  regularExpressionLiteral = "/" regularExpressionBody "/" regularExpressionFlags
  regularExpressionBody = regularExpressionFirstChar regularExpressionChar*
  regularExpressionFirstChar = ~("*" | "\\" | "/" | "[") regularExpressionNonTerminator
                             | regularExpressionBackslashSequence
                             | regularExpressionClass
  regularExpressionChar = ~("\\" | "/" | "[") regularExpressionNonTerminator
                        | regularExpressionBackslashSequence
                        | regularExpressionClass
  regularExpressionBackslashSequence = "\\" regularExpressionNonTerminator
  regularExpressionNonTerminator = ~(lineTerminator) sourceCharacter
  regularExpressionClass = "[" regularExpressionClassChar* "]"
  regularExpressionClassChar = ~("]" | "\\") regularExpressionNonTerminator
                             | regularExpressionBackslashSequence
  regularExpressionFlags = identifierPart*

  // === Implementation-level rules (not part of the spec) ===

  multiLineCommentNoNL = "/*" (~("*/" | lineTerminator) sourceCharacter)* "*/"

  // does not accept lineTerminators, not even implicit ones in a multiLineComment (cf. section 7.4)
  spacesNoNL = (whitespace | singleLineComment | multiLineCommentNoNL)*

  // A semicolon is "automatically inserted" if a newline or the end of the input stream is
  // reached, or the offending token is "}".
  // See https://es5.github.io/#x7.9 for more information.
  // NOTE: Applications of this rule *must* appear in a lexical context -- either in the body of a
  // lexical rule, or inside `#()`.
  sc = space* (";" | end)
     | spacesNoNL (lineTerminator | ~multiLineCommentNoNL multiLineComment | &"}")

  // Convenience rules for parsing keyword tokens.
  break = "break" ~identifierPart
  do = "do" ~identifierPart
  instanceof = "instanceof" ~identifierPart
  typeof = "typeof" ~identifierPart
  case = "case" ~identifierPart
  else = "else" ~identifierPart
  new = "new" ~identifierPart
  var = "var" ~identifierPart
  catch = "catch" ~identifierPart
  finally = "finally" ~identifierPart
  return = "return" ~identifierPart
  void = "void" ~identifierPart
  continue = "continue" ~identifierPart
  for = "for" ~identifierPart
  switch = "switch" ~identifierPart
  while = "while" ~identifierPart
  debugger = "debugger" ~identifierPart
  function = "function" ~identifierPart
  this = "this" ~identifierPart
  with = "with" ~identifierPart
  default = "default" ~identifierPart
  if = "if" ~identifierPart
  throw = "throw" ~identifierPart
  delete = "delete" ~identifierPart
  in = "in" ~identifierPart
  try = "try" ~identifierPart
  get = "get" ~identifierPart
  set = "set" ~identifierPart
  class = "class" ~identifierPart
  enum = "enum" ~identifierPart
  extends = "extends" ~identifierPart
  super = "super" ~identifierPart
  const = "const" ~identifierPart
  export = "export" ~identifierPart
  import = "import" ~identifierPart
  implements = "implements" ~identifierPart
  let = "let" ~identifierPart
  private = "private" ~identifierPart
  public = "public" ~identifierPart
  interface = "interface" ~identifierPart
  package = "package" ~identifierPart
  protected = "protected" ~identifierPart
  static = "static" ~identifierPart
  yield = "yield" ~identifierPart
  
  // end of lexical rules

  noIn = ~in
  withIn =

  // Â§A.3 Expressions -- https://es5.github.io/#A.3

  PrimaryExpression = this
                    | identifier
                    | literal
                      // ( litToken.type === "regexp"
                      //   ? this.ast(_fromIdx, "RegExpExpr",{body:  litToken.value.body
                      //                            flags: litToken.value.flags}, [])
                      //   : this.ast(_fromIdx, "LiteralExpr",{type:  litToken.type
                      //                             value: litToken.value}, []) )
                    | ArrayLiteral
                    | ObjectLiteral
                    | "(" Expression<withIn> ")"  -- parenExpr

  ArrayLiteral = "[" ListOf<AssignmentExpressionOrElision, ","> "]"
  AssignmentExpressionOrElision = AssignmentExpression<withIn>
                                |                       -- elision

  ObjectLiteral = "{" ListOf<PropertyAssignment, ","> "}"              -- noTrailingComma
                | "{" NonemptyListOf<PropertyAssignment, ","> "," "}"  -- trailingComma

  PropertyAssignment = get PropertyName "(" ")" "{" FunctionBody "}"                  -- getter
                     | set PropertyName "(" FormalParameter ")" "{" FunctionBody "}"  -- setter
                     | PropertyName ":" AssignmentExpression<withIn>                  -- simple

  PropertyName = identifierName
               | stringLiteral
               | numericLiteral

  MemberExpression = MemberExpression "[" Expression<withIn> "]"  -- arrayRefExp
                   | MemberExpression "." identifierName  -- propRefExp
                   | new MemberExpression Arguments       -- newExp
                   | FunctionExpression
                   | PrimaryExpression

  NewExpression = MemberExpression
                | new NewExpression -- newExp

  CallExpression = CallExpression "[" Expression<withIn> "]"  -- arrayRefExp
                 | CallExpression "." identifierName  -- propRefExp
                 | CallExpression Arguments           -- callExpExp
                 | MemberExpression Arguments         -- memberExpExp

  Arguments = "(" ListOf<AssignmentExpression<withIn>, ","> ")"

  LeftHandSideExpression = CallExpression
                         | NewExpression

  PostfixExpression = LeftHandSideExpression #(spacesNoNL "++")  -- postIncrement
                    | LeftHandSideExpression #(spacesNoNL "--")  -- postDecrement
                    | LeftHandSideExpression

  UnaryExpression = delete UnaryExpression  -- deleteExp
                  | void   UnaryExpression  -- voidExp
                  | typeof UnaryExpression  -- typeofExp
                  | "++"   UnaryExpression  -- preIncrement
                  | "--"   UnaryExpression  -- preDecrement
                  | "+"    UnaryExpression  -- unaryPlus
                  | "-"    UnaryExpression  -- unaryMinus
                  | "~"    UnaryExpression  -- bnot
                  | "!"    UnaryExpression  -- lnot
                  | PostfixExpression

  MultiplicativeExpression = MultiplicativeExpression "*" UnaryExpression -- mul
                           | MultiplicativeExpression "/" UnaryExpression -- div
                           | MultiplicativeExpression "%" UnaryExpression -- mod
                           | UnaryExpression

  AdditiveExpression = AdditiveExpression "+" MultiplicativeExpression -- add
                     | AdditiveExpression "-" MultiplicativeExpression -- sub
                     | MultiplicativeExpression

  ShiftExpression = ShiftExpression "<<" AdditiveExpression  -- lsl
                  | ShiftExpression ">>>" AdditiveExpression -- lsr
                  | ShiftExpression ">>" AdditiveExpression  -- asr
                  | AdditiveExpression

  RelationalExpression<guardIn>
    = RelationalExpression<guardIn> "<" ShiftExpression           -- lt
    | RelationalExpression<guardIn> ">" ShiftExpression           -- gt
    | RelationalExpression<guardIn> "<=" ShiftExpression          -- le
    | RelationalExpression<guardIn> ">=" ShiftExpression          -- ge
    | RelationalExpression<guardIn> "instanceof" ShiftExpression  -- instanceOfExp
    | RelationalExpression<guardIn> guardIn "in" ShiftExpression  -- inExp
    | ShiftExpression

  EqualityExpression<guardIn>
    = EqualityExpression<guardIn> "==" RelationalExpression<guardIn>  -- equal
    | EqualityExpression<guardIn> "!=" RelationalExpression<guardIn>  -- notEqual
    | EqualityExpression<guardIn> "===" RelationalExpression<guardIn> -- eq
    | EqualityExpression<guardIn> "!==" RelationalExpression<guardIn> -- notEq
    | RelationalExpression<guardIn>

  BitwiseANDExpression<guardIn>
    = BitwiseANDExpression<guardIn> "&" EqualityExpression<guardIn> -- band
    | EqualityExpression<guardIn>

  BitwiseXORExpression<guardIn>
    = BitwiseXORExpression<guardIn> "^" BitwiseANDExpression<guardIn> -- bxor
    | BitwiseANDExpression<guardIn>

  BitwiseORExpression<guardIn>
    = BitwiseORExpression<guardIn> "|" BitwiseXORExpression<guardIn> -- bor
    | BitwiseXORExpression<guardIn>

  LogicalANDExpression<guardIn>
    = LogicalANDExpression<guardIn> "&&" BitwiseORExpression<guardIn> -- land
    | BitwiseORExpression<guardIn>

  LogicalORExpression<guardIn>
    = LogicalORExpression<guardIn> "||" LogicalANDExpression<guardIn> -- lor
    | LogicalANDExpression<guardIn>

  ConditionalExpression<guardIn>
    = LogicalORExpression<guardIn> "?" AssignmentExpression<withIn> ":" AssignmentExpression<guardIn> -- conditional
    | LogicalORExpression<guardIn>

  AssignmentExpression<guardIn>
    = LeftHandSideExpression assignmentOperator AssignmentExpression<guardIn> -- assignment
    | ConditionalExpression<guardIn>

  Expression<guardIn> (an expression)
    = Expression<guardIn> "," AssignmentExpression<guardIn> -- commaExp
    | AssignmentExpression<guardIn>

  assignmentOperator = "=" | ">>>=" | "<<=" | ">>="
                     | "*=" | "/=" | "%=" | "+=" | "-=" | "&=" | "^=" | "|="

  // Â§A.4 Statements -- https://es5.github.io/#A.4

  Statement
    = Block
    | VariableStatement
    | EmptyStatement
    | ExpressionStatement
    | IfStatement
    | IterationStatement
    | ContinueStatement
    | BreakStatement
    | ReturnStatement
    | WithStatement
    | LabelledStatement
    | SwitchStatement
    | ThrowStatement
    | TryStatement
    | DebuggerStatement

  Block = "{" StatementList "}"

  StatementList = Statement*

  VariableStatement = var VariableDeclarationList<withIn> #sc

  VariableDeclarationList<guardIn> = NonemptyListOf<VariableDeclaration<guardIn>, ",">

  VariableDeclaration<guardIn> = identifier Initialiser<guardIn>?

  Initialiser<guardIn> = "=" AssignmentExpression<guardIn>

  EmptyStatement = ";" // note: this semicolon eats newlines

  ExpressionStatement = ~("{" | function) Expression<withIn> #sc

  IfStatement = if "(" Expression<withIn> ")" Statement (else Statement)?

  IterationStatement = do Statement while "(" Expression<withIn> ")" #sc  -- doWhile
                     | while "(" Expression<withIn> ")" Statement           -- whileDo
                     | for "(" Expression<noIn>? ";"
                                 Expression<withIn>? ";"
                                 Expression<withIn>? ")" Statement          -- for3
                     | for "(" var VariableDeclarationList<noIn> ";"
                                 Expression<withIn>? ";"
                                 Expression<withIn>? ")" Statement          -- for3var
                     | for "(" LeftHandSideExpression in
                                 Expression<withIn> ")" Statement           -- forIn
                     | for "(" var VariableDeclaration<noIn> in
                                 Expression<withIn> ")" Statement           -- forInVar

  ContinueStatement = continue #((spacesNoNL identifier)? sc)

  BreakStatement = break #((spacesNoNL identifier)? sc)

  ReturnStatement = return (#(spacesNoNL ~space) Expression<withIn>)? #sc

  WithStatement = with "(" Expression<withIn> ")" Statement

  SwitchStatement = switch "(" Expression<withIn> ")" CaseBlock

  CaseBlock = "{" CaseClause* DefaultClause CaseClause* "}"  -- withDefault
            | "{"                           CaseClause* "}"  -- withoutDefault

  CaseClause = case Expression<withIn> ":" Statement*

  DefaultClause = default ":" Statement*

  LabelledStatement = identifier ":" Statement

  ThrowStatement = throw Expression<withIn> #sc  -- throwExpr

  TryStatement = try Block Catch Finally  -- tryCatchFinally
               | try Block Finally        -- tryFinally
               | try Block Catch          -- tryCatch

  Catch = catch "(" FormalParameter ")" Block

  Finally = finally Block

  DebuggerStatement = #(debugger sc)

  // Â§A.5 Functions and Programs -- https://es5.github.io/#A.5

  FunctionDeclaration
    = function identifier "(" FormalParameterList ")" "{" FunctionBody "}"

  FunctionExpression
    = function identifier "(" FormalParameterList ")" "{" FunctionBody "}"  -- named
    | function "(" FormalParameterList ")" "{" FunctionBody "}"             -- anonymous

  FormalParameterList = ListOf<FormalParameter, ",">

  FormalParameter = identifier

  /*
    Note: The Directive Prologue is the longest sequence of ExpressionStatement
    productions occurring as the initial SourceElement (see https://es5.github.io/#x14.1)
  */
  FunctionBody = &(Directive*) SourceElement*

  SourceElement = Declaration | Statement

  // Broken out so es6 can override to include ConstDecl and LetDecl
  Declaration = FunctionDeclaration

  Directive = stringLiteral #sc
}

ES5Lax <: ES5 {
  futureReservedWord := futureReservedWordLax
}
